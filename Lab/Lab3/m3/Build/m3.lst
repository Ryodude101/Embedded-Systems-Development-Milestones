ARM GAS  m3.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"m3.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.fn_advancePointer.str1.4,"aMS",%progbits,1
  20              		.align	2
  21              	.LC0:
  22 0000 7073745F 		.ascii	"pst_me\000"
  22      6D6500
  23 0007 00       		.align	2
  24              	.LC1:
  25 0008 536F7572 		.ascii	"Source/circularBuffer.h\000"
  25      63652F63 
  25      69726375 
  25      6C617242 
  25      75666665 
  26              		.section	.text.fn_advancePointer,"ax",%progbits
  27              		.align	1
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	fn_advancePointer:
  33              	.LVL0:
  34              	.LFB6:
  35              		.file 1 "Source/circularBuffer.h"
   1:Source/circularBuffer.h **** /* Ryan Colon
   2:Source/circularBuffer.h ****  * 02.15.22
   3:Source/circularBuffer.h ****  * Circular Buffer library for use in embedded systems
   4:Source/circularBuffer.h ****  * Modeled after standard c circular buffer library Embedded Artistry article
   5:Source/circularBuffer.h ****  */ 
   6:Source/circularBuffer.h **** 
   7:Source/circularBuffer.h **** #ifndef CIRCULARBUFFER_H
   8:Source/circularBuffer.h ****     #define CIRCULARBUFFER_H
   9:Source/circularBuffer.h **** 
  10:Source/circularBuffer.h ****     #include <assert.h>
  11:Source/circularBuffer.h ****     #include <stddef.h>
  12:Source/circularBuffer.h **** 
  13:Source/circularBuffer.h ****     //This struct is the actual circular buffer
  14:Source/circularBuffer.h ****     typedef struct st_circBuff{
  15:Source/circularBuffer.h ****         char* pc_buffer;
  16:Source/circularBuffer.h **** 	    size_t u_head;
  17:Source/circularBuffer.h **** 	    size_t u_tail;
  18:Source/circularBuffer.h **** 	    size_t u_max;
ARM GAS  m3.s 			page 2


  19:Source/circularBuffer.h **** 	    bool b_full;
  20:Source/circularBuffer.h ****     }st_circBuff;
  21:Source/circularBuffer.h **** 
  22:Source/circularBuffer.h ****     //"Empties" the buffer
  23:Source/circularBuffer.h ****     void fn_circBuffReset(st_circBuff* pst_me){
  24:Source/circularBuffer.h ****         assert(pst_me);
  25:Source/circularBuffer.h **** 
  26:Source/circularBuffer.h **** 	    pst_me->u_head = 0;
  27:Source/circularBuffer.h **** 	    pst_me->u_tail = 0;
  28:Source/circularBuffer.h **** 	    pst_me->b_full = false;
  29:Source/circularBuffer.h ****     }
  30:Source/circularBuffer.h ****     
  31:Source/circularBuffer.h ****     //Checks if the buffer is empty
  32:Source/circularBuffer.h ****     bool fn_circBuffEmpty(st_circBuff* pst_me){
  33:Source/circularBuffer.h ****         assert(pst_me);
  34:Source/circularBuffer.h **** 
  35:Source/circularBuffer.h **** 	    return (!pst_me->b_full && (pst_me->u_head == pst_me->u_tail));
  36:Source/circularBuffer.h ****     }
  37:Source/circularBuffer.h **** 
  38:Source/circularBuffer.h ****     //Initialize the buffer struct, user must provide the structure and buffer to maintain static a
  39:Source/circularBuffer.h ****     void fn_circBuffInit(st_circBuff* pst_me, char* pc_buff, size_t u_size){
  40:Source/circularBuffer.h ****         assert(pst_me && pc_buff && u_size);
  41:Source/circularBuffer.h ****     
  42:Source/circularBuffer.h ****         pst_me->pc_buffer = pc_buff;
  43:Source/circularBuffer.h ****         pst_me->u_max = u_size;
  44:Source/circularBuffer.h ****         fn_circBuffReset(pst_me);
  45:Source/circularBuffer.h **** 
  46:Source/circularBuffer.h ****         assert(fn_circBuffEmpty(pst_me));
  47:Source/circularBuffer.h ****     }
  48:Source/circularBuffer.h **** 
  49:Source/circularBuffer.h ****     //Checks if the buffer is full
  50:Source/circularBuffer.h ****     bool fn_circBuffFull(st_circBuff* pst_me){
  51:Source/circularBuffer.h ****         assert(pst_me);
  52:Source/circularBuffer.h **** 
  53:Source/circularBuffer.h **** 	return pst_me->b_full;
  54:Source/circularBuffer.h ****     }
  55:Source/circularBuffer.h **** 
  56:Source/circularBuffer.h ****     //Returns the maximum capacity of the buffer
  57:Source/circularBuffer.h ****     size_t fn_circBuffCapacity(st_circBuff* pst_me){
  58:Source/circularBuffer.h ****         assert(pst_me);
  59:Source/circularBuffer.h **** 
  60:Source/circularBuffer.h **** 	return pst_me->u_max;
  61:Source/circularBuffer.h ****     }
  62:Source/circularBuffer.h **** 
  63:Source/circularBuffer.h ****     //Returns the current amount of data in the buffer in (number of data types) NOT BITS/BYTES
  64:Source/circularBuffer.h ****     size_t fn_circBuffSize(st_circBuff* pst_me){
  65:Source/circularBuffer.h ****         assert(pst_me);
  66:Source/circularBuffer.h **** 
  67:Source/circularBuffer.h **** 	size_t u_size = pst_me->u_max;
  68:Source/circularBuffer.h **** 
  69:Source/circularBuffer.h **** 	if(!pst_me->b_full){
  70:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
  71:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
  72:Source/circularBuffer.h **** 		else
  73:Source/circularBuffer.h **** 			u_size = pst_me->u_max + pst_me->u_head - pst_me->u_tail;
  74:Source/circularBuffer.h **** 	}
  75:Source/circularBuffer.h **** 	
ARM GAS  m3.s 			page 3


  76:Source/circularBuffer.h **** 	return u_size;
  77:Source/circularBuffer.h ****     }
  78:Source/circularBuffer.h **** 
  79:Source/circularBuffer.h ****     //Called by Put, moves the head and tail appropriately
  80:Source/circularBuffer.h ****     static void fn_advancePointer(st_circBuff* pst_me){
  36              		.loc 1 80 55 view -0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 0
  39              		@ frame_needed = 0, uses_anonymous_args = 0
  40              		.loc 1 80 55 is_stmt 0 view .LVU1
  41 0000 08B5     		push	{r3, lr}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 3, -8
  45              		.cfi_offset 14, -4
  81:Source/circularBuffer.h ****         assert(pst_me);
  46              		.loc 1 81 8 is_stmt 1 view .LVU2
  47              		.loc 1 81 20 is_stmt 0 view .LVU3
  48 0002 B0B1     		cbz	r0, .L6
  49 0004 0346     		mov	r3, r0
  82:Source/circularBuffer.h **** 
  83:Source/circularBuffer.h **** 	if(pst_me->b_full){
  50              		.loc 1 83 2 is_stmt 1 view .LVU4
  51              		.loc 1 83 11 is_stmt 0 view .LVU5
  52 0006 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
  53              		.loc 1 83 4 view .LVU6
  54 0008 2AB1     		cbz	r2, .L3
  84:Source/circularBuffer.h ****             if(++(pst_me->u_tail) == pst_me->u_max)
  55              		.loc 1 84 13 is_stmt 1 view .LVU7
  56              		.loc 1 84 25 is_stmt 0 view .LVU8
  57 000a 8268     		ldr	r2, [r0, #8]
  58              		.loc 1 84 16 view .LVU9
  59 000c 0132     		adds	r2, r2, #1
  60              		.loc 1 84 15 view .LVU10
  61 000e 8260     		str	r2, [r0, #8]
  62              		.loc 1 84 44 view .LVU11
  63 0010 C168     		ldr	r1, [r0, #12]
  64              		.loc 1 84 15 view .LVU12
  65 0012 8A42     		cmp	r2, r1
  66 0014 13D0     		beq	.L7
  67              	.L3:
  85:Source/circularBuffer.h **** 	        pst_me->u_tail = 0;
  86:Source/circularBuffer.h **** 	}
  87:Source/circularBuffer.h **** 
  88:Source/circularBuffer.h **** 	if(++(pst_me->u_head) == pst_me->u_max)
  68              		.loc 1 88 2 is_stmt 1 view .LVU13
  69              		.loc 1 88 14 is_stmt 0 view .LVU14
  70 0016 5A68     		ldr	r2, [r3, #4]
  71              		.loc 1 88 5 view .LVU15
  72 0018 0132     		adds	r2, r2, #1
  73              		.loc 1 88 4 view .LVU16
  74 001a 5A60     		str	r2, [r3, #4]
  75              		.loc 1 88 33 view .LVU17
  76 001c D968     		ldr	r1, [r3, #12]
  77              		.loc 1 88 4 view .LVU18
  78 001e 8A42     		cmp	r2, r1
  79 0020 10D0     		beq	.L8
ARM GAS  m3.s 			page 4


  80              	.L4:
  89:Source/circularBuffer.h **** 	    pst_me->u_head = 0;
  90:Source/circularBuffer.h **** 
  91:Source/circularBuffer.h **** 	pst_me->b_full = (pst_me->u_head == pst_me->u_tail);
  81              		.loc 1 91 2 is_stmt 1 view .LVU19
  82              		.loc 1 91 26 is_stmt 0 view .LVU20
  83 0022 5A68     		ldr	r2, [r3, #4]
  84              		.loc 1 91 44 view .LVU21
  85 0024 9968     		ldr	r1, [r3, #8]
  86              		.loc 1 91 35 view .LVU22
  87 0026 8A42     		cmp	r2, r1
  88 0028 14BF     		ite	ne
  89 002a 0022     		movne	r2, #0
  90 002c 0122     		moveq	r2, #1
  91              		.loc 1 91 17 view .LVU23
  92 002e 1A74     		strb	r2, [r3, #16]
  92:Source/circularBuffer.h ****     }
  93              		.loc 1 92 5 view .LVU24
  94 0030 08BD     		pop	{r3, pc}
  95              	.L6:
  81:Source/circularBuffer.h **** 
  96              		.loc 1 81 22 discriminator 1 view .LVU25
  97 0032 064B     		ldr	r3, .L9
  98 0034 064A     		ldr	r2, .L9+4
  99 0036 5121     		movs	r1, #81
 100 0038 0648     		ldr	r0, .L9+8
 101              	.LVL1:
  81:Source/circularBuffer.h **** 
 102              		.loc 1 81 22 discriminator 1 view .LVU26
 103 003a FFF7FEFF 		bl	__assert_func
 104              	.LVL2:
 105              	.L7:
  85:Source/circularBuffer.h **** 	}
 106              		.loc 1 85 10 is_stmt 1 view .LVU27
  85:Source/circularBuffer.h **** 	}
 107              		.loc 1 85 25 is_stmt 0 view .LVU28
 108 003e 0022     		movs	r2, #0
 109 0040 8260     		str	r2, [r0, #8]
 110 0042 E8E7     		b	.L3
 111              	.L8:
  89:Source/circularBuffer.h **** 
 112              		.loc 1 89 6 is_stmt 1 view .LVU29
  89:Source/circularBuffer.h **** 
 113              		.loc 1 89 21 is_stmt 0 view .LVU30
 114 0044 0022     		movs	r2, #0
 115 0046 5A60     		str	r2, [r3, #4]
 116 0048 EBE7     		b	.L4
 117              	.L10:
 118 004a 00BF     		.align	2
 119              	.L9:
 120 004c 00000000 		.word	.LC0
 121 0050 00000000 		.word	.LANCHOR0
 122 0054 08000000 		.word	.LC1
 123              		.cfi_endproc
 124              	.LFE6:
 126              		.section	.text.fn_retreatPointer,"ax",%progbits
 127              		.align	1
ARM GAS  m3.s 			page 5


 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 132              	fn_retreatPointer:
 133              	.LVL3:
 134              	.LFB7:
  93:Source/circularBuffer.h **** 
  94:Source/circularBuffer.h ****     //Called by Get, moves the tail appropriately
  95:Source/circularBuffer.h ****     static void fn_retreatPointer(st_circBuff* pst_me){
 135              		.loc 1 95 55 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		.loc 1 95 55 is_stmt 0 view .LVU32
 140 0000 08B5     		push	{r3, lr}
 141              	.LCFI1:
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 3, -8
 144              		.cfi_offset 14, -4
  96:Source/circularBuffer.h ****         assert(pst_me);
 145              		.loc 1 96 8 is_stmt 1 view .LVU33
 146              		.loc 1 96 20 is_stmt 0 view .LVU34
 147 0002 40B1     		cbz	r0, .L15
  97:Source/circularBuffer.h **** 
  98:Source/circularBuffer.h **** 	pst_me->b_full = false;
 148              		.loc 1 98 2 is_stmt 1 view .LVU35
 149              		.loc 1 98 17 is_stmt 0 view .LVU36
 150 0004 0022     		movs	r2, #0
 151 0006 0274     		strb	r2, [r0, #16]
  99:Source/circularBuffer.h **** 
 100:Source/circularBuffer.h **** 	if(++(pst_me->u_tail) == pst_me->u_max)
 152              		.loc 1 100 2 is_stmt 1 view .LVU37
 153              		.loc 1 100 14 is_stmt 0 view .LVU38
 154 0008 8268     		ldr	r2, [r0, #8]
 155              		.loc 1 100 5 view .LVU39
 156 000a 0132     		adds	r2, r2, #1
 157              		.loc 1 100 4 view .LVU40
 158 000c 8260     		str	r2, [r0, #8]
 159              		.loc 1 100 33 view .LVU41
 160 000e C168     		ldr	r1, [r0, #12]
 161              		.loc 1 100 4 view .LVU42
 162 0010 8A42     		cmp	r2, r1
 163 0012 06D0     		beq	.L16
 164              	.L11:
 101:Source/circularBuffer.h **** 		pst_me->u_tail = 0;
 102:Source/circularBuffer.h **** 
 103:Source/circularBuffer.h ****     }
 165              		.loc 1 103 5 view .LVU43
 166 0014 08BD     		pop	{r3, pc}
 167              	.L15:
  96:Source/circularBuffer.h **** 
 168              		.loc 1 96 22 discriminator 1 view .LVU44
 169 0016 044B     		ldr	r3, .L17
 170 0018 044A     		ldr	r2, .L17+4
 171 001a 6021     		movs	r1, #96
 172 001c 0448     		ldr	r0, .L17+8
 173              	.LVL4:
ARM GAS  m3.s 			page 6


  96:Source/circularBuffer.h **** 
 174              		.loc 1 96 22 discriminator 1 view .LVU45
 175 001e FFF7FEFF 		bl	__assert_func
 176              	.LVL5:
 177              	.L16:
 101:Source/circularBuffer.h **** 		pst_me->u_tail = 0;
 178              		.loc 1 101 3 is_stmt 1 view .LVU46
 101:Source/circularBuffer.h **** 		pst_me->u_tail = 0;
 179              		.loc 1 101 18 is_stmt 0 view .LVU47
 180 0022 0022     		movs	r2, #0
 181 0024 8260     		str	r2, [r0, #8]
 182              		.loc 1 103 5 view .LVU48
 183 0026 F5E7     		b	.L11
 184              	.L18:
 185              		.align	2
 186              	.L17:
 187 0028 00000000 		.word	.LC0
 188 002c 00000000 		.word	.LANCHOR1
 189 0030 08000000 		.word	.LC1
 190              		.cfi_endproc
 191              	.LFE7:
 193              		.section	.text.fn_circBuffReset,"ax",%progbits
 194              		.align	1
 195              		.global	fn_circBuffReset
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 200              	fn_circBuffReset:
 201              	.LVL6:
 202              	.LFB0:
  23:Source/circularBuffer.h ****         assert(pst_me);
 203              		.loc 1 23 47 is_stmt 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
  23:Source/circularBuffer.h ****         assert(pst_me);
 207              		.loc 1 23 47 is_stmt 0 view .LVU50
 208 0000 08B5     		push	{r3, lr}
 209              	.LCFI2:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 3, -8
 212              		.cfi_offset 14, -4
  24:Source/circularBuffer.h **** 
 213              		.loc 1 24 8 is_stmt 1 view .LVU51
  24:Source/circularBuffer.h **** 
 214              		.loc 1 24 20 is_stmt 0 view .LVU52
 215 0002 20B1     		cbz	r0, .L22
  26:Source/circularBuffer.h **** 	    pst_me->u_tail = 0;
 216              		.loc 1 26 6 is_stmt 1 view .LVU53
  26:Source/circularBuffer.h **** 	    pst_me->u_tail = 0;
 217              		.loc 1 26 21 is_stmt 0 view .LVU54
 218 0004 0022     		movs	r2, #0
 219 0006 4260     		str	r2, [r0, #4]
  27:Source/circularBuffer.h **** 	    pst_me->b_full = false;
 220              		.loc 1 27 6 is_stmt 1 view .LVU55
  27:Source/circularBuffer.h **** 	    pst_me->b_full = false;
 221              		.loc 1 27 21 is_stmt 0 view .LVU56
ARM GAS  m3.s 			page 7


 222 0008 8260     		str	r2, [r0, #8]
  28:Source/circularBuffer.h ****     }
 223              		.loc 1 28 6 is_stmt 1 view .LVU57
  28:Source/circularBuffer.h ****     }
 224              		.loc 1 28 21 is_stmt 0 view .LVU58
 225 000a 0274     		strb	r2, [r0, #16]
  29:Source/circularBuffer.h ****     
 226              		.loc 1 29 5 view .LVU59
 227 000c 08BD     		pop	{r3, pc}
 228              	.L22:
  24:Source/circularBuffer.h **** 
 229              		.loc 1 24 22 discriminator 1 view .LVU60
 230 000e 034B     		ldr	r3, .L23
 231 0010 034A     		ldr	r2, .L23+4
 232 0012 1821     		movs	r1, #24
 233 0014 0348     		ldr	r0, .L23+8
 234              	.LVL7:
  24:Source/circularBuffer.h **** 
 235              		.loc 1 24 22 discriminator 1 view .LVU61
 236 0016 FFF7FEFF 		bl	__assert_func
 237              	.LVL8:
 238              	.L24:
 239 001a 00BF     		.align	2
 240              	.L23:
 241 001c 00000000 		.word	.LC0
 242 0020 00000000 		.word	.LANCHOR2
 243 0024 08000000 		.word	.LC1
 244              		.cfi_endproc
 245              	.LFE0:
 247              		.section	.text.fn_circBuffEmpty,"ax",%progbits
 248              		.align	1
 249              		.global	fn_circBuffEmpty
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 254              	fn_circBuffEmpty:
 255              	.LVL9:
 256              	.LFB1:
  32:Source/circularBuffer.h ****         assert(pst_me);
 257              		.loc 1 32 46 is_stmt 1 view -0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
  32:Source/circularBuffer.h ****         assert(pst_me);
 261              		.loc 1 32 46 is_stmt 0 view .LVU63
 262 0000 08B5     		push	{r3, lr}
 263              	.LCFI3:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 3, -8
 266              		.cfi_offset 14, -4
  33:Source/circularBuffer.h **** 
 267              		.loc 1 33 8 is_stmt 1 view .LVU64
  33:Source/circularBuffer.h **** 
 268              		.loc 1 33 20 is_stmt 0 view .LVU65
 269 0002 38B1     		cbz	r0, .L31
  35:Source/circularBuffer.h ****     }
 270              		.loc 1 35 6 is_stmt 1 view .LVU66
ARM GAS  m3.s 			page 8


  35:Source/circularBuffer.h ****     }
 271              		.loc 1 35 21 is_stmt 0 view .LVU67
 272 0004 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
  35:Source/circularBuffer.h ****     }
 273              		.loc 1 35 30 view .LVU68
 274 0006 5AB9     		cbnz	r2, .L28
  35:Source/circularBuffer.h ****     }
 275              		.loc 1 35 40 discriminator 1 view .LVU69
 276 0008 4268     		ldr	r2, [r0, #4]
  35:Source/circularBuffer.h ****     }
 277              		.loc 1 35 58 discriminator 1 view .LVU70
 278 000a 8368     		ldr	r3, [r0, #8]
  35:Source/circularBuffer.h ****     }
 279              		.loc 1 35 30 discriminator 1 view .LVU71
 280 000c 9A42     		cmp	r2, r3
 281 000e 09D0     		beq	.L29
  35:Source/circularBuffer.h ****     }
 282              		.loc 1 35 30 view .LVU72
 283 0010 0020     		movs	r0, #0
 284              	.LVL10:
  35:Source/circularBuffer.h ****     }
 285              		.loc 1 35 30 view .LVU73
 286 0012 06E0     		b	.L27
 287              	.LVL11:
 288              	.L31:
  33:Source/circularBuffer.h **** 
 289              		.loc 1 33 22 discriminator 1 view .LVU74
 290 0014 044B     		ldr	r3, .L32
 291 0016 054A     		ldr	r2, .L32+4
 292 0018 2121     		movs	r1, #33
 293 001a 0548     		ldr	r0, .L32+8
 294              	.LVL12:
  33:Source/circularBuffer.h **** 
 295              		.loc 1 33 22 discriminator 1 view .LVU75
 296 001c FFF7FEFF 		bl	__assert_func
 297              	.LVL13:
 298              	.L28:
  35:Source/circularBuffer.h ****     }
 299              		.loc 1 35 30 view .LVU76
 300 0020 0020     		movs	r0, #0
 301              	.LVL14:
 302              	.L27:
  36:Source/circularBuffer.h **** 
 303              		.loc 1 36 5 discriminator 6 view .LVU77
 304 0022 08BD     		pop	{r3, pc}
 305              	.LVL15:
 306              	.L29:
  35:Source/circularBuffer.h ****     }
 307              		.loc 1 35 30 view .LVU78
 308 0024 0120     		movs	r0, #1
 309              	.LVL16:
  35:Source/circularBuffer.h ****     }
 310              		.loc 1 35 30 view .LVU79
 311 0026 FCE7     		b	.L27
 312              	.L33:
 313              		.align	2
 314              	.L32:
ARM GAS  m3.s 			page 9


 315 0028 00000000 		.word	.LC0
 316 002c 00000000 		.word	.LANCHOR3
 317 0030 08000000 		.word	.LC1
 318              		.cfi_endproc
 319              	.LFE1:
 321              		.section	.rodata.fn_circBuffInit.str1.4,"aMS",%progbits,1
 322              		.align	2
 323              	.LC2:
 324 0000 7073745F 		.ascii	"pst_me && pc_buff && u_size\000"
 324      6D652026 
 324      26207063 
 324      5F627566 
 324      66202626 
 325              		.align	2
 326              	.LC3:
 327 001c 666E5F63 		.ascii	"fn_circBuffEmpty(pst_me)\000"
 327      69726342 
 327      75666645 
 327      6D707479 
 327      28707374 
 328              		.section	.text.fn_circBuffInit,"ax",%progbits
 329              		.align	1
 330              		.global	fn_circBuffInit
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 335              	fn_circBuffInit:
 336              	.LVL17:
 337              	.LFB2:
  39:Source/circularBuffer.h ****         assert(pst_me && pc_buff && u_size);
 338              		.loc 1 39 76 is_stmt 1 view -0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
  39:Source/circularBuffer.h ****         assert(pst_me && pc_buff && u_size);
 342              		.loc 1 39 76 is_stmt 0 view .LVU81
 343 0000 10B5     		push	{r4, lr}
 344              	.LCFI4:
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 4, -8
 347              		.cfi_offset 14, -4
  40:Source/circularBuffer.h ****     
 348              		.loc 1 40 8 is_stmt 1 view .LVU82
  40:Source/circularBuffer.h ****     
 349              		.loc 1 40 20 is_stmt 0 view .LVU83
 350 0002 58B1     		cbz	r0, .L35
 351 0004 0446     		mov	r4, r0
  40:Source/circularBuffer.h ****     
 352              		.loc 1 40 15 discriminator 2 view .LVU84
 353 0006 49B1     		cbz	r1, .L35
  40:Source/circularBuffer.h ****     
 354              		.loc 1 40 26 discriminator 4 view .LVU85
 355 0008 42B1     		cbz	r2, .L35
  42:Source/circularBuffer.h ****         pst_me->u_max = u_size;
 356              		.loc 1 42 9 is_stmt 1 view .LVU86
  42:Source/circularBuffer.h ****         pst_me->u_max = u_size;
 357              		.loc 1 42 27 is_stmt 0 view .LVU87
ARM GAS  m3.s 			page 10


 358 000a 0160     		str	r1, [r0]
  43:Source/circularBuffer.h ****         fn_circBuffReset(pst_me);
 359              		.loc 1 43 9 is_stmt 1 view .LVU88
  43:Source/circularBuffer.h ****         fn_circBuffReset(pst_me);
 360              		.loc 1 43 23 is_stmt 0 view .LVU89
 361 000c C260     		str	r2, [r0, #12]
  44:Source/circularBuffer.h **** 
 362              		.loc 1 44 9 is_stmt 1 view .LVU90
 363 000e FFF7FEFF 		bl	fn_circBuffReset
 364              	.LVL18:
  46:Source/circularBuffer.h ****     }
 365              		.loc 1 46 8 view .LVU91
  46:Source/circularBuffer.h ****     }
 366              		.loc 1 46 8 is_stmt 0 view .LVU92
 367 0012 2046     		mov	r0, r4
 368 0014 FFF7FEFF 		bl	fn_circBuffEmpty
 369              	.LVL19:
  46:Source/circularBuffer.h ****     }
 370              		.loc 1 46 20 view .LVU93
 371 0018 30B1     		cbz	r0, .L39
  47:Source/circularBuffer.h **** 
 372              		.loc 1 47 5 view .LVU94
 373 001a 10BD     		pop	{r4, pc}
 374              	.LVL20:
 375              	.L35:
  40:Source/circularBuffer.h ****     
 376              		.loc 1 40 22 discriminator 5 view .LVU95
 377 001c 054B     		ldr	r3, .L40
 378 001e 064A     		ldr	r2, .L40+4
 379              	.LVL21:
  40:Source/circularBuffer.h ****     
 380              		.loc 1 40 22 discriminator 5 view .LVU96
 381 0020 2821     		movs	r1, #40
 382              	.LVL22:
  40:Source/circularBuffer.h ****     
 383              		.loc 1 40 22 discriminator 5 view .LVU97
 384 0022 0648     		ldr	r0, .L40+8
 385              	.LVL23:
  40:Source/circularBuffer.h ****     
 386              		.loc 1 40 22 discriminator 5 view .LVU98
 387 0024 FFF7FEFF 		bl	__assert_func
 388              	.LVL24:
 389              	.L39:
  46:Source/circularBuffer.h ****     }
 390              		.loc 1 46 22 discriminator 1 view .LVU99
 391 0028 054B     		ldr	r3, .L40+12
 392 002a 034A     		ldr	r2, .L40+4
 393 002c 2E21     		movs	r1, #46
 394 002e 0348     		ldr	r0, .L40+8
 395 0030 FFF7FEFF 		bl	__assert_func
 396              	.LVL25:
 397              	.L41:
 398              		.align	2
 399              	.L40:
 400 0034 00000000 		.word	.LC2
 401 0038 00000000 		.word	.LANCHOR4
 402 003c 08000000 		.word	.LC1
ARM GAS  m3.s 			page 11


 403 0040 1C000000 		.word	.LC3
 404              		.cfi_endproc
 405              	.LFE2:
 407              		.section	.text.fn_circBuffFull,"ax",%progbits
 408              		.align	1
 409              		.global	fn_circBuffFull
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 414              	fn_circBuffFull:
 415              	.LVL26:
 416              	.LFB3:
  50:Source/circularBuffer.h ****         assert(pst_me);
 417              		.loc 1 50 45 is_stmt 1 view -0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
  50:Source/circularBuffer.h ****         assert(pst_me);
 421              		.loc 1 50 45 is_stmt 0 view .LVU101
 422 0000 08B5     		push	{r3, lr}
 423              	.LCFI5:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 3, -8
 426              		.cfi_offset 14, -4
  51:Source/circularBuffer.h **** 
 427              		.loc 1 51 8 is_stmt 1 view .LVU102
  51:Source/circularBuffer.h **** 
 428              		.loc 1 51 20 is_stmt 0 view .LVU103
 429 0002 08B1     		cbz	r0, .L45
  53:Source/circularBuffer.h ****     }
 430              		.loc 1 53 2 is_stmt 1 view .LVU104
  54:Source/circularBuffer.h **** 
 431              		.loc 1 54 5 is_stmt 0 view .LVU105
 432 0004 007C     		ldrb	r0, [r0, #16]	@ zero_extendqisi2
 433              	.LVL27:
  54:Source/circularBuffer.h **** 
 434              		.loc 1 54 5 view .LVU106
 435 0006 08BD     		pop	{r3, pc}
 436              	.LVL28:
 437              	.L45:
  51:Source/circularBuffer.h **** 
 438              		.loc 1 51 22 discriminator 1 view .LVU107
 439 0008 024B     		ldr	r3, .L46
 440 000a 034A     		ldr	r2, .L46+4
 441 000c 3321     		movs	r1, #51
 442 000e 0348     		ldr	r0, .L46+8
 443              	.LVL29:
  51:Source/circularBuffer.h **** 
 444              		.loc 1 51 22 discriminator 1 view .LVU108
 445 0010 FFF7FEFF 		bl	__assert_func
 446              	.LVL30:
 447              	.L47:
 448              		.align	2
 449              	.L46:
 450 0014 00000000 		.word	.LC0
 451 0018 00000000 		.word	.LANCHOR5
 452 001c 08000000 		.word	.LC1
ARM GAS  m3.s 			page 12


 453              		.cfi_endproc
 454              	.LFE3:
 456              		.section	.text.fn_circBuffCapacity,"ax",%progbits
 457              		.align	1
 458              		.global	fn_circBuffCapacity
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 463              	fn_circBuffCapacity:
 464              	.LVL31:
 465              	.LFB4:
  57:Source/circularBuffer.h ****         assert(pst_me);
 466              		.loc 1 57 52 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
  57:Source/circularBuffer.h ****         assert(pst_me);
 470              		.loc 1 57 52 is_stmt 0 view .LVU110
 471 0000 08B5     		push	{r3, lr}
 472              	.LCFI6:
 473              		.cfi_def_cfa_offset 8
 474              		.cfi_offset 3, -8
 475              		.cfi_offset 14, -4
  58:Source/circularBuffer.h **** 
 476              		.loc 1 58 8 is_stmt 1 view .LVU111
  58:Source/circularBuffer.h **** 
 477              		.loc 1 58 20 is_stmt 0 view .LVU112
 478 0002 08B1     		cbz	r0, .L51
  60:Source/circularBuffer.h ****     }
 479              		.loc 1 60 2 is_stmt 1 view .LVU113
  61:Source/circularBuffer.h **** 
 480              		.loc 1 61 5 is_stmt 0 view .LVU114
 481 0004 C068     		ldr	r0, [r0, #12]
 482              	.LVL32:
  61:Source/circularBuffer.h **** 
 483              		.loc 1 61 5 view .LVU115
 484 0006 08BD     		pop	{r3, pc}
 485              	.LVL33:
 486              	.L51:
  58:Source/circularBuffer.h **** 
 487              		.loc 1 58 22 discriminator 1 view .LVU116
 488 0008 024B     		ldr	r3, .L52
 489 000a 034A     		ldr	r2, .L52+4
 490 000c 3A21     		movs	r1, #58
 491 000e 0348     		ldr	r0, .L52+8
 492              	.LVL34:
  58:Source/circularBuffer.h **** 
 493              		.loc 1 58 22 discriminator 1 view .LVU117
 494 0010 FFF7FEFF 		bl	__assert_func
 495              	.LVL35:
 496              	.L53:
 497              		.align	2
 498              	.L52:
 499 0014 00000000 		.word	.LC0
 500 0018 00000000 		.word	.LANCHOR6
 501 001c 08000000 		.word	.LC1
 502              		.cfi_endproc
ARM GAS  m3.s 			page 13


 503              	.LFE4:
 505              		.section	.text.fn_circBuffSize,"ax",%progbits
 506              		.align	1
 507              		.global	fn_circBuffSize
 508              		.syntax unified
 509              		.thumb
 510              		.thumb_func
 512              	fn_circBuffSize:
 513              	.LVL36:
 514              	.LFB5:
  64:Source/circularBuffer.h ****         assert(pst_me);
 515              		.loc 1 64 48 is_stmt 1 view -0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
  64:Source/circularBuffer.h ****         assert(pst_me);
 519              		.loc 1 64 48 is_stmt 0 view .LVU119
 520 0000 08B5     		push	{r3, lr}
 521              	.LCFI7:
 522              		.cfi_def_cfa_offset 8
 523              		.cfi_offset 3, -8
 524              		.cfi_offset 14, -4
  65:Source/circularBuffer.h **** 
 525              		.loc 1 65 8 is_stmt 1 view .LVU120
  65:Source/circularBuffer.h **** 
 526              		.loc 1 65 20 is_stmt 0 view .LVU121
 527 0002 48B1     		cbz	r0, .L59
 528 0004 0346     		mov	r3, r0
  67:Source/circularBuffer.h **** 
 529              		.loc 1 67 2 is_stmt 1 view .LVU122
  67:Source/circularBuffer.h **** 
 530              		.loc 1 67 9 is_stmt 0 view .LVU123
 531 0006 C068     		ldr	r0, [r0, #12]
 532              	.LVL37:
  69:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
 533              		.loc 1 69 2 is_stmt 1 view .LVU124
  69:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
 534              		.loc 1 69 12 is_stmt 0 view .LVU125
 535 0008 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
  69:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
 536              		.loc 1 69 4 view .LVU126
 537 000a 22B9     		cbnz	r2, .L54
  70:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 538              		.loc 1 70 3 is_stmt 1 view .LVU127
  70:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 539              		.loc 1 70 12 is_stmt 0 view .LVU128
 540 000c 5A68     		ldr	r2, [r3, #4]
  70:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 541              		.loc 1 70 30 view .LVU129
 542 000e 9B68     		ldr	r3, [r3, #8]
 543              	.LVL38:
  70:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 544              		.loc 1 70 5 view .LVU130
 545 0010 9A42     		cmp	r2, r3
 546 0012 07D3     		bcc	.L57
  71:Source/circularBuffer.h **** 		else
 547              		.loc 1 71 4 is_stmt 1 view .LVU131
ARM GAS  m3.s 			page 14


  71:Source/circularBuffer.h **** 		else
 548              		.loc 1 71 11 is_stmt 0 view .LVU132
 549 0014 D01A     		subs	r0, r2, r3
 550              	.LVL39:
 551              	.L54:
  77:Source/circularBuffer.h **** 
 552              		.loc 1 77 5 view .LVU133
 553 0016 08BD     		pop	{r3, pc}
 554              	.LVL40:
 555              	.L59:
  65:Source/circularBuffer.h **** 
 556              		.loc 1 65 22 discriminator 1 view .LVU134
 557 0018 044B     		ldr	r3, .L60
 558 001a 054A     		ldr	r2, .L60+4
 559 001c 4121     		movs	r1, #65
 560 001e 0548     		ldr	r0, .L60+8
 561              	.LVL41:
  65:Source/circularBuffer.h **** 
 562              		.loc 1 65 22 discriminator 1 view .LVU135
 563 0020 FFF7FEFF 		bl	__assert_func
 564              	.LVL42:
 565              	.L57:
  73:Source/circularBuffer.h **** 	}
 566              		.loc 1 73 4 is_stmt 1 view .LVU136
  73:Source/circularBuffer.h **** 	}
 567              		.loc 1 73 27 is_stmt 0 view .LVU137
 568 0024 1044     		add	r0, r0, r2
 569              	.LVL43:
  73:Source/circularBuffer.h **** 	}
 570              		.loc 1 73 11 view .LVU138
 571 0026 C01A     		subs	r0, r0, r3
 572              	.LVL44:
  76:Source/circularBuffer.h ****     }
 573              		.loc 1 76 2 is_stmt 1 view .LVU139
  76:Source/circularBuffer.h ****     }
 574              		.loc 1 76 9 is_stmt 0 view .LVU140
 575 0028 F5E7     		b	.L54
 576              	.L61:
 577 002a 00BF     		.align	2
 578              	.L60:
 579 002c 00000000 		.word	.LC0
 580 0030 00000000 		.word	.LANCHOR7
 581 0034 08000000 		.word	.LC1
 582              		.cfi_endproc
 583              	.LFE5:
 585              		.section	.rodata.fn_circBuffPut.str1.4,"aMS",%progbits,1
 586              		.align	2
 587              	.LC4:
 588 0000 7073745F 		.ascii	"pst_me && pst_me->pc_buffer\000"
 588      6D652026 
 588      26207073 
 588      745F6D65 
 588      2D3E7063 
 589              		.section	.text.fn_circBuffPut,"ax",%progbits
 590              		.align	1
 591              		.global	fn_circBuffPut
 592              		.syntax unified
ARM GAS  m3.s 			page 15


 593              		.thumb
 594              		.thumb_func
 596              	fn_circBuffPut:
 597              	.LVL45:
 598              	.LFB8:
 104:Source/circularBuffer.h **** 
 105:Source/circularBuffer.h ****     //Puts data in the buffer
 106:Source/circularBuffer.h ****     void fn_circBuffPut(st_circBuff* pst_me, char c_data){
 599              		.loc 1 106 58 is_stmt 1 view -0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              		.loc 1 106 58 is_stmt 0 view .LVU142
 604 0000 08B5     		push	{r3, lr}
 605              	.LCFI8:
 606              		.cfi_def_cfa_offset 8
 607              		.cfi_offset 3, -8
 608              		.cfi_offset 14, -4
 107:Source/circularBuffer.h ****         assert(pst_me && pst_me->pc_buffer);
 609              		.loc 1 107 8 is_stmt 1 view .LVU143
 610              		.loc 1 107 20 is_stmt 0 view .LVU144
 611 0002 40B1     		cbz	r0, .L63
 612 0004 0346     		mov	r3, r0
 613              		.loc 1 107 24 discriminator 2 view .LVU145
 614 0006 0268     		ldr	r2, [r0]
 615              		.loc 1 107 15 discriminator 2 view .LVU146
 616 0008 2AB1     		cbz	r2, .L63
 108:Source/circularBuffer.h **** 
 109:Source/circularBuffer.h **** 	pst_me->pc_buffer[pst_me->u_head] = c_data;
 617              		.loc 1 109 2 is_stmt 1 view .LVU147
 618              		.loc 1 109 26 is_stmt 0 view .LVU148
 619 000a 4068     		ldr	r0, [r0, #4]
 620              	.LVL46:
 621              		.loc 1 109 36 view .LVU149
 622 000c 1154     		strb	r1, [r2, r0]
 110:Source/circularBuffer.h **** 
 111:Source/circularBuffer.h **** 	fn_advancePointer(pst_me);
 623              		.loc 1 111 2 is_stmt 1 view .LVU150
 624 000e 1846     		mov	r0, r3
 625 0010 FFF7FEFF 		bl	fn_advancePointer
 626              	.LVL47:
 112:Source/circularBuffer.h ****     }
 627              		.loc 1 112 5 is_stmt 0 view .LVU151
 628 0014 08BD     		pop	{r3, pc}
 629              	.LVL48:
 630              	.L63:
 107:Source/circularBuffer.h **** 
 631              		.loc 1 107 22 discriminator 3 view .LVU152
 632 0016 034B     		ldr	r3, .L66
 633 0018 034A     		ldr	r2, .L66+4
 634 001a 6B21     		movs	r1, #107
 635              	.LVL49:
 107:Source/circularBuffer.h **** 
 636              		.loc 1 107 22 discriminator 3 view .LVU153
 637 001c 0348     		ldr	r0, .L66+8
 638              	.LVL50:
 107:Source/circularBuffer.h **** 
ARM GAS  m3.s 			page 16


 639              		.loc 1 107 22 discriminator 3 view .LVU154
 640 001e FFF7FEFF 		bl	__assert_func
 641              	.LVL51:
 642              	.L67:
 643 0022 00BF     		.align	2
 644              	.L66:
 645 0024 00000000 		.word	.LC4
 646 0028 00000000 		.word	.LANCHOR8
 647 002c 08000000 		.word	.LC1
 648              		.cfi_endproc
 649              	.LFE8:
 651              		.section	.rodata.fn_circBuffGet.str1.4,"aMS",%progbits,1
 652              		.align	2
 653              	.LC5:
 654 0000 70635F64 		.ascii	"pc_data\000"
 654      61746100 
 655              		.align	2
 656              	.LC6:
 657 0008 7073745F 		.ascii	"pst_me->pc_buffer\000"
 657      6D652D3E 
 657      70635F62 
 657      75666665 
 657      7200
 658              		.section	.text.fn_circBuffGet,"ax",%progbits
 659              		.align	1
 660              		.global	fn_circBuffGet
 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 665              	fn_circBuffGet:
 666              	.LVL52:
 667              	.LFB9:
 113:Source/circularBuffer.h **** 
 114:Source/circularBuffer.h ****     //Removes data from the buffer, returns pass/fail (need to supply storage for data in parameter
 115:Source/circularBuffer.h ****     bool fn_circBuffGet(st_circBuff* pst_me, char* pc_data){
 668              		.loc 1 115 59 is_stmt 1 view -0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672              		.loc 1 115 59 is_stmt 0 view .LVU156
 673 0000 70B5     		push	{r4, r5, r6, lr}
 674              	.LCFI9:
 675              		.cfi_def_cfa_offset 16
 676              		.cfi_offset 4, -16
 677              		.cfi_offset 5, -12
 678              		.cfi_offset 6, -8
 679              		.cfi_offset 14, -4
 116:Source/circularBuffer.h ****         //assert(pst_me && pc_data && pst_me->pc_buffer);
 117:Source/circularBuffer.h ****         assert(pst_me);
 680              		.loc 1 117 8 is_stmt 1 view .LVU157
 681              		.loc 1 117 20 is_stmt 0 view .LVU158
 682 0002 48B1     		cbz	r0, .L75
 683 0004 0C46     		mov	r4, r1
 684 0006 0546     		mov	r5, r0
 118:Source/circularBuffer.h ****         assert(pc_data);
 685              		.loc 1 118 8 is_stmt 1 view .LVU159
 686              		.loc 1 118 20 is_stmt 0 view .LVU160
ARM GAS  m3.s 			page 17


 687 0008 61B1     		cbz	r1, .L76
 119:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 688              		.loc 1 119 8 is_stmt 1 view .LVU161
 689              		.loc 1 119 14 is_stmt 0 view .LVU162
 690 000a 0668     		ldr	r6, [r0]
 691              		.loc 1 119 20 view .LVU163
 692 000c 86B1     		cbz	r6, .L77
 120:Source/circularBuffer.h **** 
 121:Source/circularBuffer.h **** 	bool r = false;
 693              		.loc 1 121 1 is_stmt 1 view .LVU164
 694              	.LVL53:
 122:Source/circularBuffer.h **** 
 123:Source/circularBuffer.h **** 	if(!fn_circBuffEmpty(pst_me)){
 695              		.loc 1 123 2 view .LVU165
 696              		.loc 1 123 6 is_stmt 0 view .LVU166
 697 000e FFF7FEFF 		bl	fn_circBuffEmpty
 698              	.LVL54:
 699              		.loc 1 123 4 view .LVU167
 700 0012 98B1     		cbz	r0, .L78
 121:Source/circularBuffer.h **** 
 701              		.loc 1 121 6 view .LVU168
 702 0014 0020     		movs	r0, #0
 703              	.LVL55:
 704              	.L72:
 124:Source/circularBuffer.h ****         *pc_data = pst_me->pc_buffer[pst_me->u_tail];
 125:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 126:Source/circularBuffer.h **** 
 127:Source/circularBuffer.h **** 	   r = true; 
 128:Source/circularBuffer.h **** 	}
 129:Source/circularBuffer.h **** 
 130:Source/circularBuffer.h ****         return r;
 705              		.loc 1 130 9 is_stmt 1 view .LVU169
 131:Source/circularBuffer.h ****     }
 706              		.loc 1 131 5 is_stmt 0 view .LVU170
 707 0016 70BD     		pop	{r4, r5, r6, pc}
 708              	.LVL56:
 709              	.L75:
 117:Source/circularBuffer.h ****         assert(pc_data);
 710              		.loc 1 117 22 discriminator 1 view .LVU171
 711 0018 0C4B     		ldr	r3, .L79
 712 001a 0D4A     		ldr	r2, .L79+4
 713 001c 7521     		movs	r1, #117
 714              	.LVL57:
 117:Source/circularBuffer.h ****         assert(pc_data);
 715              		.loc 1 117 22 discriminator 1 view .LVU172
 716 001e 0D48     		ldr	r0, .L79+8
 717              	.LVL58:
 117:Source/circularBuffer.h ****         assert(pc_data);
 718              		.loc 1 117 22 discriminator 1 view .LVU173
 719 0020 FFF7FEFF 		bl	__assert_func
 720              	.LVL59:
 721              	.L76:
 118:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 722              		.loc 1 118 22 discriminator 1 view .LVU174
 723 0024 0C4B     		ldr	r3, .L79+12
 724 0026 0A4A     		ldr	r2, .L79+4
 725 0028 7621     		movs	r1, #118
ARM GAS  m3.s 			page 18


 726              	.LVL60:
 118:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 727              		.loc 1 118 22 discriminator 1 view .LVU175
 728 002a 0A48     		ldr	r0, .L79+8
 729              	.LVL61:
 118:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 730              		.loc 1 118 22 discriminator 1 view .LVU176
 731 002c FFF7FEFF 		bl	__assert_func
 732              	.LVL62:
 733              	.L77:
 119:Source/circularBuffer.h **** 
 734              		.loc 1 119 22 discriminator 1 view .LVU177
 735 0030 0A4B     		ldr	r3, .L79+16
 736 0032 074A     		ldr	r2, .L79+4
 737 0034 7721     		movs	r1, #119
 738              	.LVL63:
 119:Source/circularBuffer.h **** 
 739              		.loc 1 119 22 discriminator 1 view .LVU178
 740 0036 0748     		ldr	r0, .L79+8
 741              	.LVL64:
 119:Source/circularBuffer.h **** 
 742              		.loc 1 119 22 discriminator 1 view .LVU179
 743 0038 FFF7FEFF 		bl	__assert_func
 744              	.LVL65:
 745              	.L78:
 124:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 746              		.loc 1 124 9 is_stmt 1 view .LVU180
 124:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 747              		.loc 1 124 44 is_stmt 0 view .LVU181
 748 003c AB68     		ldr	r3, [r5, #8]
 124:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 749              		.loc 1 124 37 view .LVU182
 750 003e F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 124:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 751              		.loc 1 124 18 view .LVU183
 752 0040 2370     		strb	r3, [r4]
 125:Source/circularBuffer.h **** 
 753              		.loc 1 125 6 is_stmt 1 view .LVU184
 754 0042 2846     		mov	r0, r5
 755 0044 FFF7FEFF 		bl	fn_retreatPointer
 756              	.LVL66:
 127:Source/circularBuffer.h **** 	}
 757              		.loc 1 127 5 view .LVU185
 127:Source/circularBuffer.h **** 	}
 758              		.loc 1 127 7 is_stmt 0 view .LVU186
 759 0048 0120     		movs	r0, #1
 760 004a E4E7     		b	.L72
 761              	.L80:
 762              		.align	2
 763              	.L79:
 764 004c 00000000 		.word	.LC0
 765 0050 00000000 		.word	.LANCHOR9
 766 0054 08000000 		.word	.LC1
 767 0058 00000000 		.word	.LC5
 768 005c 08000000 		.word	.LC6
 769              		.cfi_endproc
 770              	.LFE9:
ARM GAS  m3.s 			page 19


 772              		.section	.rodata.fn_circBuffGetMostRecent.str1.4,"aMS",%progbits,1
 773              		.align	2
 774              	.LC7:
 775 0000 7073745F 		.ascii	"pst_me && pc_data && pst_me->pc_buffer\000"
 775      6D652026 
 775      26207063 
 775      5F646174 
 775      61202626 
 776              		.section	.text.fn_circBuffGetMostRecent,"ax",%progbits
 777              		.align	1
 778              		.global	fn_circBuffGetMostRecent
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 783              	fn_circBuffGetMostRecent:
 784              	.LVL67:
 785              	.LFB10:
 132:Source/circularBuffer.h **** 
 133:Source/circularBuffer.h ****     bool fn_circBuffGetMostRecent(st_circBuff* pst_me, char* pc_data){
 786              		.loc 1 133 69 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		.loc 1 133 69 is_stmt 0 view .LVU188
 791 0000 70B5     		push	{r4, r5, r6, lr}
 792              	.LCFI10:
 793              		.cfi_def_cfa_offset 16
 794              		.cfi_offset 4, -16
 795              		.cfi_offset 5, -12
 796              		.cfi_offset 6, -8
 797              		.cfi_offset 14, -4
 134:Source/circularBuffer.h ****         assert(pst_me && pc_data && pst_me->pc_buffer);
 798              		.loc 1 134 8 is_stmt 1 view .LVU189
 799              		.loc 1 134 20 is_stmt 0 view .LVU190
 800 0002 80B1     		cbz	r0, .L82
 801 0004 0C46     		mov	r4, r1
 802 0006 0646     		mov	r6, r0
 803              		.loc 1 134 15 discriminator 2 view .LVU191
 804 0008 69B1     		cbz	r1, .L82
 805              		.loc 1 134 35 discriminator 4 view .LVU192
 806 000a 0568     		ldr	r5, [r0]
 807              		.loc 1 134 26 discriminator 4 view .LVU193
 808 000c 5DB1     		cbz	r5, .L82
 135:Source/circularBuffer.h **** 
 136:Source/circularBuffer.h ****         bool r = false;
 809              		.loc 1 136 8 is_stmt 1 view .LVU194
 810              	.LVL68:
 137:Source/circularBuffer.h **** 
 138:Source/circularBuffer.h ****         if(!fn_circBuffEmpty(pst_me)){
 811              		.loc 1 138 9 view .LVU195
 812              		.loc 1 138 13 is_stmt 0 view .LVU196
 813 000e FFF7FEFF 		bl	fn_circBuffEmpty
 814              	.LVL69:
 815              		.loc 1 138 11 view .LVU197
 816 0012 A0B9     		cbnz	r0, .L86
 139:Source/circularBuffer.h ****                 if(pst_me->u_head == 0){
 817              		.loc 1 139 17 is_stmt 1 view .LVU198
ARM GAS  m3.s 			page 20


 818              		.loc 1 139 26 is_stmt 0 view .LVU199
 819 0014 7368     		ldr	r3, [r6, #4]
 820              		.loc 1 139 19 view .LVU200
 821 0016 63B9     		cbnz	r3, .L85
 140:Source/circularBuffer.h ****                     pst_me->u_head = (pst_me->u_max) - 1;
 822              		.loc 1 140 21 is_stmt 1 view .LVU201
 823              		.loc 1 140 45 is_stmt 0 view .LVU202
 824 0018 F368     		ldr	r3, [r6, #12]
 825              		.loc 1 140 54 view .LVU203
 826 001a 013B     		subs	r3, r3, #1
 827              		.loc 1 140 36 view .LVU204
 828 001c 7360     		str	r3, [r6, #4]
 141:Source/circularBuffer.h ****                 *pc_data = pst_me->pc_buffer[pst_me->u_head];
 829              		.loc 1 141 17 is_stmt 1 view .LVU205
 830              		.loc 1 141 45 is_stmt 0 view .LVU206
 831 001e EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 832              		.loc 1 141 26 view .LVU207
 833 0020 2370     		strb	r3, [r4]
 142:Source/circularBuffer.h ****                 r = true;	
 834              		.loc 1 142 17 is_stmt 1 view .LVU208
 835              	.LVL70:
 836              		.loc 1 142 19 is_stmt 0 view .LVU209
 837 0022 0120     		movs	r0, #1
 838 0024 0CE0     		b	.L84
 839              	.LVL71:
 840              	.L82:
 134:Source/circularBuffer.h **** 
 841              		.loc 1 134 22 discriminator 5 view .LVU210
 842 0026 074B     		ldr	r3, .L88
 843 0028 074A     		ldr	r2, .L88+4
 844 002a 8621     		movs	r1, #134
 845              	.LVL72:
 134:Source/circularBuffer.h **** 
 846              		.loc 1 134 22 discriminator 5 view .LVU211
 847 002c 0748     		ldr	r0, .L88+8
 848              	.LVL73:
 134:Source/circularBuffer.h **** 
 849              		.loc 1 134 22 discriminator 5 view .LVU212
 850 002e FFF7FEFF 		bl	__assert_func
 851              	.LVL74:
 852              	.L85:
 143:Source/circularBuffer.h ****             }   
 144:Source/circularBuffer.h ****             else{
 145:Source/circularBuffer.h ****                 *pc_data = pst_me->pc_buffer[--(pst_me->u_head)];
 853              		.loc 1 145 17 is_stmt 1 view .LVU213
 854              		.loc 1 145 46 is_stmt 0 view .LVU214
 855 0032 013B     		subs	r3, r3, #1
 856              		.loc 1 145 26 view .LVU215
 857 0034 7360     		str	r3, [r6, #4]
 858              		.loc 1 145 45 view .LVU216
 859 0036 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 860              		.loc 1 145 26 view .LVU217
 861 0038 2370     		strb	r3, [r4]
 146:Source/circularBuffer.h ****             r = true;
 862              		.loc 1 146 13 is_stmt 1 view .LVU218
 863              	.LVL75:
 864              		.loc 1 146 15 is_stmt 0 view .LVU219
ARM GAS  m3.s 			page 21


 865 003a 0120     		movs	r0, #1
 866 003c 00E0     		b	.L84
 867              	.LVL76:
 868              	.L86:
 136:Source/circularBuffer.h **** 
 869              		.loc 1 136 13 view .LVU220
 870 003e 0020     		movs	r0, #0
 871              	.LVL77:
 872              	.L84:
 147:Source/circularBuffer.h ****             }
 148:Source/circularBuffer.h ****         }
 149:Source/circularBuffer.h **** 
 150:Source/circularBuffer.h ****         return r;
 873              		.loc 1 150 9 is_stmt 1 view .LVU221
 151:Source/circularBuffer.h ****     }
 874              		.loc 1 151 5 is_stmt 0 view .LVU222
 875 0040 70BD     		pop	{r4, r5, r6, pc}
 876              	.LVL78:
 877              	.L89:
 878              		.loc 1 151 5 view .LVU223
 879 0042 00BF     		.align	2
 880              	.L88:
 881 0044 00000000 		.word	.LC7
 882 0048 00000000 		.word	.LANCHOR10
 883 004c 08000000 		.word	.LC1
 884              		.cfi_endproc
 885              	.LFE10:
 887              		.section	.text.fn_convertToCaps,"ax",%progbits
 888              		.align	1
 889              		.global	fn_convertToCaps
 890              		.syntax unified
 891              		.thumb
 892              		.thumb_func
 894              	fn_convertToCaps:
 895              	.LVL79:
 896              	.LFB11:
 897              		.file 2 "Source/embsysS20.h"
   1:Source/embsysS20.h **** #ifndef embsysS20_H
   2:Source/embsysS20.h ****     #define embsysS20_H
   3:Source/embsysS20.h **** 
   4:Source/embsysS20.h ****     #ifndef STM32L4
   5:Source/embsysS20.h ****         #define STM32L4
   6:Source/embsysS20.h ****     #endif
   7:Source/embsysS20.h **** 
   8:Source/embsysS20.h ****     #include <libopencm3/stm32/rcc.h>
   9:Source/embsysS20.h ****     #include <libopencm3/stm32/gpio.h>
  10:Source/embsysS20.h ****     #include <libopencm3/stm32/usart.h>
  11:Source/embsysS20.h ****     #include <libopencm3/cm3/nvic.h>
  12:Source/embsysS20.h ****     #include <libopencm3/stm32/timer.h>
  13:Source/embsysS20.h ****     #include "circularBuffer.h"
  14:Source/embsysS20.h **** 
  15:Source/embsysS20.h ****     #define LED2_Pin GPIO5  //Pin number for PA5, the LED2 pin, can be found in nucleo board 64 use
  16:Source/embsysS20.h ****     #define LED2_GPIO_Port GPIOA  //PORTA address, can be found in libopencm3 docs
  17:Source/embsysS20.h ****     #define BUT1_GPIO_Port GPIOC  //PORTC address, can be found in libopencm3 docs
  18:Source/embsysS20.h ****     #define BUT1_Pin GPIO13  //Pin number for PC2, the B1 pin, can be found in the nucleo board 64 
  19:Source/embsysS20.h **** 
  20:Source/embsysS20.h ****     #define USART_CONSOLE USART2 //PA2 (tx) and PA3 (rx), STM32-L452RE Reference Manual
ARM GAS  m3.s 			page 22


  21:Source/embsysS20.h ****     #define USART_GPIO_Port GPIOA
  22:Source/embsysS20.h ****     #define USART_GPIO_TXPin GPIO2
  23:Source/embsysS20.h ****     #define USART_GPIO_RXPin GPIO3
  24:Source/embsysS20.h **** 
  25:Source/embsysS20.h ****     #define TOGGLE_LED gpio_toggle(LED2_GPIO_Port,LED2_Pin)
  26:Source/embsysS20.h ****     #define LED_ON gpio_set(LED2_GPIO_Port,LED2_Pin)
  27:Source/embsysS20.h ****     #define LED_OFF gpio_clear(LED2_GPIO_Port,LED2_Pin)
  28:Source/embsysS20.h ****     #define IS_LD2_SET  (gpio_get(LED2_GPIO_Port,LED2_Pin))
  29:Source/embsysS20.h ****     #define IS_LD2_RESET  ((IS_LD2_SET)^LED2_Pin)
  30:Source/embsysS20.h ****     #define IS_B1_RELEASED (gpio_get(BUT1_GPIO_Port,BUT1_Pin))
  31:Source/embsysS20.h ****     #define IS_B1_PRESSED ((IS_B1_RELEASED)^BUT1_Pin)
  32:Source/embsysS20.h **** 
  33:Source/embsysS20.h ****     #define BUFFER_SIZE 256
  34:Source/embsysS20.h ****     #define CIPHER_SIZE 13
  35:Source/embsysS20.h **** 
  36:Source/embsysS20.h ****     const char ac_CIPHER[CIPHER_SIZE] = {'T','E','N','N','E','S','S','E','E','T','E','C','H'};
  37:Source/embsysS20.h **** 
  38:Source/embsysS20.h ****     struct st_circBuff st_circularBufferInput;
  39:Source/embsysS20.h ****     struct st_circBuff st_circularBufferOutput;
  40:Source/embsysS20.h ****     char bufferI[BUFFER_SIZE];
  41:Source/embsysS20.h ****     char bufferO[BUFFER_SIZE];
  42:Source/embsysS20.h **** 
  43:Source/embsysS20.h ****     uint16_t u16_globalPeriod = 1000;
  44:Source/embsysS20.h **** 
  45:Source/embsysS20.h ****     //Will only convert a character to caps if it is in the alphabet and lowercase, stores in the p
  46:Source/embsysS20.h ****     void fn_convertToCaps(char* pc_Convert){
 898              		.loc 2 46 44 is_stmt 1 view -0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 902              		@ link register save eliminated.
  47:Source/embsysS20.h ****     if(*pc_Convert >= 'a' && *pc_Convert <= 'z')
 903              		.loc 2 47 5 view .LVU225
 904              		.loc 2 47 8 is_stmt 0 view .LVU226
 905 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 906              		.loc 2 47 27 view .LVU227
 907 0002 A2F16103 		sub	r3, r2, #97
 908 0006 DBB2     		uxtb	r3, r3
 909              		.loc 2 47 7 view .LVU228
 910 0008 192B     		cmp	r3, #25
 911 000a 01D8     		bhi	.L90
  48:Source/embsysS20.h ****         *pc_Convert = (*pc_Convert - 'a') + 'A';  
 912              		.loc 2 48 9 is_stmt 1 view .LVU229
 913              		.loc 2 48 43 is_stmt 0 view .LVU230
 914 000c 203A     		subs	r2, r2, #32
 915              		.loc 2 48 21 view .LVU231
 916 000e 0270     		strb	r2, [r0]
 917              	.L90:
  49:Source/embsysS20.h ****     }
 918              		.loc 2 49 5 view .LVU232
 919 0010 7047     		bx	lr
 920              		.cfi_endproc
 921              	.LFE11:
 923              		.section	.text.fn_encryptText,"ax",%progbits
 924              		.align	1
 925              		.global	fn_encryptText
 926              		.syntax unified
ARM GAS  m3.s 			page 23


 927              		.thumb
 928              		.thumb_func
 930              	fn_encryptText:
 931              	.LVL80:
 932              	.LFB12:
  50:Source/embsysS20.h **** 
  51:Source/embsysS20.h ****     //Encrypt using the cipher and return the encrypted key
  52:Source/embsysS20.h ****     char fn_encryptText(char c_toEncrypt){
 933              		.loc 2 52 42 is_stmt 1 view -0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 0
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 937              		@ link register save eliminated.
 938              		.loc 2 52 42 is_stmt 0 view .LVU234
 939 0000 10B4     		push	{r4}
 940              	.LCFI11:
 941              		.cfi_def_cfa_offset 4
 942              		.cfi_offset 4, -4
  53:Source/embsysS20.h ****     static uint8_t u8_cipherEPosition = 0;
 943              		.loc 2 53 5 is_stmt 1 view .LVU235
  54:Source/embsysS20.h **** 
  55:Source/embsysS20.h ****     c_toEncrypt = (((c_toEncrypt - 'A') + (ac_CIPHER[u8_cipherEPosition] - 'A')) % 26) + 'A';
 944              		.loc 2 55 5 view .LVU236
 945              		.loc 2 55 34 is_stmt 0 view .LVU237
 946 0002 4138     		subs	r0, r0, #65
 947              	.LVL81:
 948              		.loc 2 55 53 view .LVU238
 949 0004 0E4C     		ldr	r4, .L96
 950 0006 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 951 0008 0E4A     		ldr	r2, .L96+4
 952 000a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 953              		.loc 2 55 74 view .LVU239
 954 000c 413A     		subs	r2, r2, #65
 955              		.loc 2 55 41 view .LVU240
 956 000e 0244     		add	r2, r2, r0
 957              		.loc 2 55 82 view .LVU241
 958 0010 0D49     		ldr	r1, .L96+8
 959 0012 81FB0201 		smull	r0, r1, r1, r2
 960 0016 D017     		asrs	r0, r2, #31
 961 0018 C0EBE100 		rsb	r0, r0, r1, asr #3
 962 001c 1A21     		movs	r1, #26
 963 001e 01FB1020 		mls	r0, r1, r0, r2
 964              		.loc 2 55 88 view .LVU242
 965 0022 C0B2     		uxtb	r0, r0
 966              		.loc 2 55 17 view .LVU243
 967 0024 4130     		adds	r0, r0, #65
 968 0026 C0B2     		uxtb	r0, r0
 969              	.LVL82:
  56:Source/embsysS20.h ****     ++u8_cipherEPosition;
 970              		.loc 2 56 5 is_stmt 1 view .LVU244
 971 0028 0133     		adds	r3, r3, #1
 972 002a DBB2     		uxtb	r3, r3
 973 002c 2370     		strb	r3, [r4]
  57:Source/embsysS20.h **** 
  58:Source/embsysS20.h ****     u8_cipherEPosition = (u8_cipherEPosition == CIPHER_SIZE) ? 0 : u8_cipherEPosition;
 974              		.loc 2 58 5 view .LVU245
 975              		.loc 2 58 24 is_stmt 0 view .LVU246
ARM GAS  m3.s 			page 24


 976 002e 0D2B     		cmp	r3, #13
 977 0030 04D0     		beq	.L95
 978              	.L93:
 979              		.loc 2 58 24 discriminator 4 view .LVU247
 980 0032 034A     		ldr	r2, .L96
 981 0034 1370     		strb	r3, [r2]
  59:Source/embsysS20.h **** 
  60:Source/embsysS20.h ****     return c_toEncrypt;
 982              		.loc 2 60 5 is_stmt 1 discriminator 4 view .LVU248
  61:Source/embsysS20.h ****     }
 983              		.loc 2 61 5 is_stmt 0 discriminator 4 view .LVU249
 984 0036 5DF8044B 		ldr	r4, [sp], #4
 985              	.LCFI12:
 986              		.cfi_remember_state
 987              		.cfi_restore 4
 988              		.cfi_def_cfa_offset 0
 989 003a 7047     		bx	lr
 990              	.L95:
 991              	.LCFI13:
 992              		.cfi_restore_state
  58:Source/embsysS20.h **** 
 993              		.loc 2 58 24 view .LVU250
 994 003c 0023     		movs	r3, #0
 995 003e F8E7     		b	.L93
 996              	.L97:
 997              		.align	2
 998              	.L96:
 999 0040 00000000 		.word	.LANCHOR11
 1000 0044 00000000 		.word	.LANCHOR12
 1001 0048 4FECC44E 		.word	1321528399
 1002              		.cfi_endproc
 1003              	.LFE12:
 1005              		.section	.text.fn_decryptText,"ax",%progbits
 1006              		.align	1
 1007              		.global	fn_decryptText
 1008              		.syntax unified
 1009              		.thumb
 1010              		.thumb_func
 1012              	fn_decryptText:
 1013              	.LVL83:
 1014              	.LFB13:
  62:Source/embsysS20.h **** 
  63:Source/embsysS20.h ****     //Decrypt using the cipher and return the decrypted key
  64:Source/embsysS20.h ****     char fn_decryptText(char c_toDecrypt){
 1015              		.loc 2 64 42 is_stmt 1 view -0
 1016              		.cfi_startproc
 1017              		@ args = 0, pretend = 0, frame = 0
 1018              		@ frame_needed = 0, uses_anonymous_args = 0
 1019              		@ link register save eliminated.
 1020              		.loc 2 64 42 is_stmt 0 view .LVU252
 1021 0000 10B4     		push	{r4}
 1022              	.LCFI14:
 1023              		.cfi_def_cfa_offset 4
 1024              		.cfi_offset 4, -4
  65:Source/embsysS20.h ****     static uint8_t u8_cipherDPosition = 0;
 1025              		.loc 2 65 5 is_stmt 1 view .LVU253
  66:Source/embsysS20.h **** 
ARM GAS  m3.s 			page 25


  67:Source/embsysS20.h ****     c_toDecrypt = ((c_toDecrypt - ac_CIPHER[u8_cipherDPosition] + 26) % 26) + 'A';
 1026              		.loc 2 67 5 view .LVU254
 1027              		.loc 2 67 44 is_stmt 0 view .LVU255
 1028 0002 0F4C     		ldr	r4, .L102
 1029 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1030 0006 0F4A     		ldr	r2, .L102+4
 1031 0008 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1032              		.loc 2 67 33 view .LVU256
 1033 000a 821A     		subs	r2, r0, r2
 1034              		.loc 2 67 65 view .LVU257
 1035 000c 1A32     		adds	r2, r2, #26
 1036              		.loc 2 67 71 view .LVU258
 1037 000e 0E49     		ldr	r1, .L102+8
 1038 0010 81FB0201 		smull	r0, r1, r1, r2
 1039              	.LVL84:
 1040              		.loc 2 67 71 view .LVU259
 1041 0014 D017     		asrs	r0, r2, #31
 1042 0016 C0EBE100 		rsb	r0, r0, r1, asr #3
 1043 001a 1A21     		movs	r1, #26
 1044 001c 01FB1020 		mls	r0, r1, r0, r2
 1045              		.loc 2 67 77 view .LVU260
 1046 0020 C0B2     		uxtb	r0, r0
 1047              		.loc 2 67 17 view .LVU261
 1048 0022 4130     		adds	r0, r0, #65
 1049 0024 C0B2     		uxtb	r0, r0
 1050              	.LVL85:
  68:Source/embsysS20.h **** 
  69:Source/embsysS20.h ****     ++u8_cipherDPosition;
 1051              		.loc 2 69 5 is_stmt 1 view .LVU262
 1052 0026 0133     		adds	r3, r3, #1
 1053 0028 DBB2     		uxtb	r3, r3
 1054 002a 2370     		strb	r3, [r4]
  70:Source/embsysS20.h **** 
  71:Source/embsysS20.h ****     u8_cipherDPosition = (u8_cipherDPosition == CIPHER_SIZE) ? 0 : u8_cipherDPosition;
 1055              		.loc 2 71 5 view .LVU263
 1056              		.loc 2 71 24 is_stmt 0 view .LVU264
 1057 002c 0D2B     		cmp	r3, #13
 1058 002e 04D0     		beq	.L101
 1059              	.L99:
 1060              		.loc 2 71 24 discriminator 4 view .LVU265
 1061 0030 034A     		ldr	r2, .L102
 1062 0032 1370     		strb	r3, [r2]
  72:Source/embsysS20.h ****     
  73:Source/embsysS20.h ****     return c_toDecrypt;
 1063              		.loc 2 73 5 is_stmt 1 discriminator 4 view .LVU266
  74:Source/embsysS20.h ****     }
 1064              		.loc 2 74 5 is_stmt 0 discriminator 4 view .LVU267
 1065 0034 5DF8044B 		ldr	r4, [sp], #4
 1066              	.LCFI15:
 1067              		.cfi_remember_state
 1068              		.cfi_restore 4
 1069              		.cfi_def_cfa_offset 0
 1070 0038 7047     		bx	lr
 1071              	.L101:
 1072              	.LCFI16:
 1073              		.cfi_restore_state
  71:Source/embsysS20.h ****     
ARM GAS  m3.s 			page 26


 1074              		.loc 2 71 24 view .LVU268
 1075 003a 0023     		movs	r3, #0
 1076 003c F8E7     		b	.L99
 1077              	.L103:
 1078 003e 00BF     		.align	2
 1079              	.L102:
 1080 0040 00000000 		.word	.LANCHOR13
 1081 0044 00000000 		.word	.LANCHOR12
 1082 0048 4FECC44E 		.word	1321528399
 1083              		.cfi_endproc
 1084              	.LFE13:
 1086              		.section	.text.fn_clock_setup,"ax",%progbits
 1087              		.align	1
 1088              		.global	fn_clock_setup
 1089              		.syntax unified
 1090              		.thumb
 1091              		.thumb_func
 1093              	fn_clock_setup:
 1094              	.LFB14:
  75:Source/embsysS20.h ****     
  76:Source/embsysS20.h ****     void fn_clock_setup(void){
 1095              		.loc 2 76 30 is_stmt 1 view -0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099 0000 10B5     		push	{r4, lr}
 1100              	.LCFI17:
 1101              		.cfi_def_cfa_offset 8
 1102              		.cfi_offset 4, -8
 1103              		.cfi_offset 14, -4
 1104 0002 82B0     		sub	sp, sp, #8
 1105              	.LCFI18:
 1106              		.cfi_def_cfa_offset 16
  77:Source/embsysS20.h ****         rcc_osc_on(RCC_HSI16);
 1107              		.loc 2 77 9 view .LVU270
 1108 0004 0220     		movs	r0, #2
 1109 0006 FFF7FEFF 		bl	rcc_osc_on
 1110              	.LVL86:
  78:Source/embsysS20.h **** 
  79:Source/embsysS20.h ****         //16 MHz / 4 => 4 * 20 = 80 MHz / 2 = 40 MHz
  80:Source/embsysS20.h ****         rcc_set_main_pll(RCC_PLLCFGR_PLLSRC_HSI16, 4, 40, 0, 0, RCC_PLLCFGR_PLLR_DIV2);
 1111              		.loc 2 80 9 view .LVU271
 1112 000a 0024     		movs	r4, #0
 1113 000c 0194     		str	r4, [sp, #4]
 1114 000e 0094     		str	r4, [sp]
 1115 0010 2346     		mov	r3, r4
 1116 0012 2822     		movs	r2, #40
 1117 0014 0421     		movs	r1, #4
 1118 0016 0220     		movs	r0, #2
 1119 0018 FFF7FEFF 		bl	rcc_set_main_pll
 1120              	.LVL87:
  81:Source/embsysS20.h **** 
  82:Source/embsysS20.h ****         rcc_osc_on(RCC_PLL);
 1121              		.loc 2 82 9 view .LVU272
 1122 001c 2046     		mov	r0, r4
 1123 001e FFF7FEFF 		bl	rcc_osc_on
 1124              	.LVL88:
ARM GAS  m3.s 			page 27


  83:Source/embsysS20.h **** 
  84:Source/embsysS20.h ****         rcc_periph_clock_enable(RCC_TIM2);
 1125              		.loc 2 84 9 view .LVU273
 1126 0022 4FF43060 		mov	r0, #2816
 1127 0026 FFF7FEFF 		bl	rcc_periph_clock_enable
 1128              	.LVL89:
  85:Source/embsysS20.h ****         rcc_periph_clock_enable(RCC_GPIOA);
 1129              		.loc 2 85 9 view .LVU274
 1130 002a 4FF41860 		mov	r0, #2432
 1131 002e FFF7FEFF 		bl	rcc_periph_clock_enable
 1132              	.LVL90:
  86:Source/embsysS20.h **** 	    rcc_periph_clock_enable(RCC_GPIOC);
 1133              		.loc 2 86 6 view .LVU275
 1134 0032 40F68210 		movw	r0, #2434
 1135 0036 FFF7FEFF 		bl	rcc_periph_clock_enable
 1136              	.LVL91:
  87:Source/embsysS20.h **** 	    rcc_periph_clock_enable(RCC_USART2);
 1137              		.loc 2 87 6 view .LVU276
 1138 003a 40F61130 		movw	r0, #2833
 1139 003e FFF7FEFF 		bl	rcc_periph_clock_enable
 1140              	.LVL92:
  88:Source/embsysS20.h **** 	    return;
 1141              		.loc 2 88 6 view .LVU277
  89:Source/embsysS20.h ****     }
 1142              		.loc 2 89 5 is_stmt 0 view .LVU278
 1143 0042 02B0     		add	sp, sp, #8
 1144              	.LCFI19:
 1145              		.cfi_def_cfa_offset 8
 1146              		@ sp needed
 1147 0044 10BD     		pop	{r4, pc}
 1148              		.cfi_endproc
 1149              	.LFE14:
 1151              		.section	.text.fn_usart_setup,"ax",%progbits
 1152              		.align	1
 1153              		.global	fn_usart_setup
 1154              		.syntax unified
 1155              		.thumb
 1156              		.thumb_func
 1158              	fn_usart_setup:
 1159              	.LFB15:
  90:Source/embsysS20.h **** 
  91:Source/embsysS20.h ****     void fn_usart_setup(void){
 1160              		.loc 2 91 30 is_stmt 1 view -0
 1161              		.cfi_startproc
 1162              		@ args = 0, pretend = 0, frame = 0
 1163              		@ frame_needed = 0, uses_anonymous_args = 0
 1164 0000 10B5     		push	{r4, lr}
 1165              	.LCFI20:
 1166              		.cfi_def_cfa_offset 8
 1167              		.cfi_offset 4, -8
 1168              		.cfi_offset 14, -4
  92:Source/embsysS20.h ****         nvic_enable_irq(NVIC_USART2_IRQ);
 1169              		.loc 2 92 9 view .LVU280
 1170 0002 2620     		movs	r0, #38
 1171 0004 FFF7FEFF 		bl	nvic_enable_irq
 1172              	.LVL93:
  93:Source/embsysS20.h **** 
ARM GAS  m3.s 			page 28


  94:Source/embsysS20.h ****         /* Setup GPIO pins for USART */
  95:Source/embsysS20.h ****          gpio_mode_setup(USART_GPIO_Port, GPIO_MODE_AF, GPIO_PUPD_NONE, USART_GPIO_TXPin | USART_GP
 1173              		.loc 2 95 10 view .LVU281
 1174 0008 0C23     		movs	r3, #12
 1175 000a 0022     		movs	r2, #0
 1176 000c 0221     		movs	r1, #2
 1177 000e 4FF09040 		mov	r0, #1207959552
 1178 0012 FFF7FEFF 		bl	gpio_mode_setup
 1179              	.LVL94:
  96:Source/embsysS20.h ****         
  97:Source/embsysS20.h ****          /* Setup USART pins as alternate function. */
  98:Source/embsysS20.h ****          gpio_set_af(USART_GPIO_Port, GPIO_AF7, USART_GPIO_TXPin | USART_GPIO_RXPin); //AF7 = USART
 1180              		.loc 2 98 10 view .LVU282
 1181 0016 0C22     		movs	r2, #12
 1182 0018 0721     		movs	r1, #7
 1183 001a 4FF09040 		mov	r0, #1207959552
 1184 001e FFF7FEFF 		bl	gpio_set_af
 1185              	.LVL95:
  99:Source/embsysS20.h **** 
 100:Source/embsysS20.h ****          /* Setup UART parameters. */
 101:Source/embsysS20.h ****          usart_set_baudrate(USART_CONSOLE, 57600);
 1186              		.loc 2 101 10 view .LVU283
 1187 0022 104C     		ldr	r4, .L108
 1188 0024 4FF46141 		mov	r1, #57600
 1189 0028 2046     		mov	r0, r4
 1190 002a FFF7FEFF 		bl	usart_set_baudrate
 1191              	.LVL96:
 102:Source/embsysS20.h ****          usart_set_databits(USART_CONSOLE, 9);  // check the effect of parity on this fcn.
 1192              		.loc 2 102 10 view .LVU284
 1193 002e 0921     		movs	r1, #9
 1194 0030 2046     		mov	r0, r4
 1195 0032 FFF7FEFF 		bl	usart_set_databits
 1196              	.LVL97:
 103:Source/embsysS20.h ****          usart_set_stopbits(USART_CONSOLE, USART_STOPBITS_1);
 1197              		.loc 2 103 10 view .LVU285
 1198 0036 0021     		movs	r1, #0
 1199 0038 2046     		mov	r0, r4
 1200 003a FFF7FEFF 		bl	usart_set_stopbits
 1201              	.LVL98:
 104:Source/embsysS20.h ****          usart_set_mode(USART_CONSOLE, USART_MODE_TX_RX);
 1202              		.loc 2 104 10 view .LVU286
 1203 003e 0C21     		movs	r1, #12
 1204 0040 2046     		mov	r0, r4
 1205 0042 FFF7FEFF 		bl	usart_set_mode
 1206              	.LVL99:
 105:Source/embsysS20.h ****          usart_set_parity(USART_CONSOLE, USART_PARITY_NONE);
 1207              		.loc 2 105 10 view .LVU287
 1208 0046 0021     		movs	r1, #0
 1209 0048 2046     		mov	r0, r4
 1210 004a FFF7FEFF 		bl	usart_set_parity
 1211              	.LVL100:
 106:Source/embsysS20.h ****          usart_set_flow_control(USART_CONSOLE, USART_FLOWCONTROL_NONE);
 1212              		.loc 2 106 10 view .LVU288
 1213 004e 0021     		movs	r1, #0
 1214 0050 2046     		mov	r0, r4
 1215 0052 FFF7FEFF 		bl	usart_set_flow_control
 1216              	.LVL101:
ARM GAS  m3.s 			page 29


 107:Source/embsysS20.h **** 
 108:Source/embsysS20.h ****          usart_enable_rx_interrupt(USART_CONSOLE);
 1217              		.loc 2 108 10 view .LVU289
 1218 0056 2046     		mov	r0, r4
 1219 0058 FFF7FEFF 		bl	usart_enable_rx_interrupt
 1220              	.LVL102:
 109:Source/embsysS20.h **** 
 110:Source/embsysS20.h ****          /* everything is setup, so turn UART on */  
 111:Source/embsysS20.h ****          usart_enable(USART_CONSOLE);
 1221              		.loc 2 111 10 view .LVU290
 1222 005c 2046     		mov	r0, r4
 1223 005e FFF7FEFF 		bl	usart_enable
 1224              	.LVL103:
 112:Source/embsysS20.h ****     }
 1225              		.loc 2 112 5 is_stmt 0 view .LVU291
 1226 0062 10BD     		pop	{r4, pc}
 1227              	.L109:
 1228              		.align	2
 1229              	.L108:
 1230 0064 00440040 		.word	1073759232
 1231              		.cfi_endproc
 1232              	.LFE15:
 1234              		.section	.text.usart2_isr,"ax",%progbits
 1235              		.align	1
 1236              		.global	usart2_isr
 1237              		.syntax unified
 1238              		.thumb
 1239              		.thumb_func
 1241              	usart2_isr:
 1242              	.LFB16:
 113:Source/embsysS20.h **** 
 114:Source/embsysS20.h ****     void usart2_isr(void){
 1243              		.loc 2 114 26 is_stmt 1 view -0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 8
 1246              		@ frame_needed = 0, uses_anonymous_args = 0
 1247 0000 10B5     		push	{r4, lr}
 1248              	.LCFI21:
 1249              		.cfi_def_cfa_offset 8
 1250              		.cfi_offset 4, -8
 1251              		.cfi_offset 14, -4
 1252 0002 82B0     		sub	sp, sp, #8
 1253              	.LCFI22:
 1254              		.cfi_def_cfa_offset 16
 115:Source/embsysS20.h ****         /* Check if we were called because of RXNE. */
 116:Source/embsysS20.h ****         if (((USART_CR1(USART_CONSOLE) & USART_CR1_RXNEIE) != 0) && (usart_get_flag(USART_CONSOLE,U
 1255              		.loc 2 116 9 view .LVU293
 1256              		.loc 2 116 16 is_stmt 0 view .LVU294
 1257 0004 4FF04023 		mov	r3, #1073758208
 1258 0008 D3F80034 		ldr	r3, [r3, #1024]
 1259              		.loc 2 116 12 view .LVU295
 1260 000c 13F0200F 		tst	r3, #32
 1261 0010 08D1     		bne	.L115
 1262              	.L111:
 117:Source/embsysS20.h ****             /* Retrieve the data from the peripheral. */
 118:Source/embsysS20.h ****             fn_circBuffPut(&st_circularBufferInput, usart_recv(USART_CONSOLE));
 119:Source/embsysS20.h ****         }
ARM GAS  m3.s 			page 30


 120:Source/embsysS20.h **** 
 121:Source/embsysS20.h ****         /* Check if we were called because of TXE. */
 122:Source/embsysS20.h ****         if (((USART_CR1(USART_CONSOLE) & USART_CR1_TXEIE) != 0) && (usart_get_flag(USART_CONSOLE,US
 1263              		.loc 2 122 9 is_stmt 1 view .LVU296
 1264              		.loc 2 122 16 is_stmt 0 view .LVU297
 1265 0012 4FF04023 		mov	r3, #1073758208
 1266 0016 D3F80034 		ldr	r3, [r3, #1024]
 1267              		.loc 2 122 12 view .LVU298
 1268 001a 13F0800F 		tst	r3, #128
 1269 001e 0FD1     		bne	.L116
 1270              	.L110:
 123:Source/embsysS20.h ****             char c_charToSend = '\0';
 124:Source/embsysS20.h ****             fn_circBuffGet(&st_circularBufferOutput, &c_charToSend);
 125:Source/embsysS20.h ****             /* Put data into the transmit register to send data */
 126:Source/embsysS20.h ****             usart_send(USART_CONSOLE, c_charToSend);
 127:Source/embsysS20.h ****             /* Disable the TXE interrupt as we don't need it anymore. */
 128:Source/embsysS20.h ****             if(fn_circBuffEmpty(&st_circularBufferOutput))
 129:Source/embsysS20.h ****                 usart_disable_tx_interrupt(USART_CONSOLE);
 130:Source/embsysS20.h ****         }
 131:Source/embsysS20.h ****     }
 1271              		.loc 2 131 5 view .LVU299
 1272 0020 02B0     		add	sp, sp, #8
 1273              	.LCFI23:
 1274              		.cfi_remember_state
 1275              		.cfi_def_cfa_offset 8
 1276              		@ sp needed
 1277 0022 10BD     		pop	{r4, pc}
 1278              	.L115:
 1279              	.LCFI24:
 1280              		.cfi_restore_state
 116:Source/embsysS20.h ****             /* Retrieve the data from the peripheral. */
 1281              		.loc 2 116 109 discriminator 1 view .LVU300
 1282 0024 2021     		movs	r1, #32
 1283 0026 1548     		ldr	r0, .L117
 1284 0028 FFF7FEFF 		bl	usart_get_flag
 1285              	.LVL104:
 116:Source/embsysS20.h ****             /* Retrieve the data from the peripheral. */
 1286              		.loc 2 116 105 discriminator 1 view .LVU301
 1287 002c 0028     		cmp	r0, #0
 1288 002e F0D0     		beq	.L111
 118:Source/embsysS20.h ****         }
 1289              		.loc 2 118 13 is_stmt 1 view .LVU302
 118:Source/embsysS20.h ****         }
 1290              		.loc 2 118 53 is_stmt 0 view .LVU303
 1291 0030 1248     		ldr	r0, .L117
 1292 0032 FFF7FEFF 		bl	usart_recv
 1293              	.LVL105:
 118:Source/embsysS20.h ****         }
 1294              		.loc 2 118 13 view .LVU304
 1295 0036 C1B2     		uxtb	r1, r0
 1296 0038 1148     		ldr	r0, .L117+4
 1297 003a FFF7FEFF 		bl	fn_circBuffPut
 1298              	.LVL106:
 1299 003e E8E7     		b	.L111
 1300              	.L116:
 122:Source/embsysS20.h ****             char c_charToSend = '\0';
 1301              		.loc 2 122 109 discriminator 1 view .LVU305
ARM GAS  m3.s 			page 31


 1302 0040 8021     		movs	r1, #128
 1303 0042 0E48     		ldr	r0, .L117
 1304 0044 FFF7FEFF 		bl	usart_get_flag
 1305              	.LVL107:
 122:Source/embsysS20.h ****             char c_charToSend = '\0';
 1306              		.loc 2 122 105 discriminator 1 view .LVU306
 1307 0048 0028     		cmp	r0, #0
 1308 004a E9D0     		beq	.L110
 1309              	.LBB2:
 123:Source/embsysS20.h ****             fn_circBuffGet(&st_circularBufferOutput, &c_charToSend);
 1310              		.loc 2 123 13 is_stmt 1 view .LVU307
 123:Source/embsysS20.h ****             fn_circBuffGet(&st_circularBufferOutput, &c_charToSend);
 1311              		.loc 2 123 18 is_stmt 0 view .LVU308
 1312 004c 0023     		movs	r3, #0
 1313 004e 8DF80730 		strb	r3, [sp, #7]
 124:Source/embsysS20.h ****             /* Put data into the transmit register to send data */
 1314              		.loc 2 124 13 is_stmt 1 view .LVU309
 1315 0052 0C4C     		ldr	r4, .L117+8
 1316 0054 0DF10701 		add	r1, sp, #7
 1317 0058 2046     		mov	r0, r4
 1318 005a FFF7FEFF 		bl	fn_circBuffGet
 1319              	.LVL108:
 126:Source/embsysS20.h ****             /* Disable the TXE interrupt as we don't need it anymore. */
 1320              		.loc 2 126 13 view .LVU310
 1321 005e 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 1322 0062 0648     		ldr	r0, .L117
 1323 0064 FFF7FEFF 		bl	usart_send
 1324              	.LVL109:
 128:Source/embsysS20.h ****                 usart_disable_tx_interrupt(USART_CONSOLE);
 1325              		.loc 2 128 13 view .LVU311
 128:Source/embsysS20.h ****                 usart_disable_tx_interrupt(USART_CONSOLE);
 1326              		.loc 2 128 16 is_stmt 0 view .LVU312
 1327 0068 2046     		mov	r0, r4
 1328 006a FFF7FEFF 		bl	fn_circBuffEmpty
 1329              	.LVL110:
 128:Source/embsysS20.h ****                 usart_disable_tx_interrupt(USART_CONSOLE);
 1330              		.loc 2 128 15 view .LVU313
 1331 006e 0028     		cmp	r0, #0
 1332 0070 D6D0     		beq	.L110
 129:Source/embsysS20.h ****         }
 1333              		.loc 2 129 17 is_stmt 1 view .LVU314
 1334 0072 0248     		ldr	r0, .L117
 1335 0074 FFF7FEFF 		bl	usart_disable_tx_interrupt
 1336              	.LVL111:
 1337              	.LBE2:
 1338              		.loc 2 131 5 is_stmt 0 view .LVU315
 1339 0078 D2E7     		b	.L110
 1340              	.L118:
 1341 007a 00BF     		.align	2
 1342              	.L117:
 1343 007c 00440040 		.word	1073759232
 1344 0080 00000000 		.word	.LANCHOR14
 1345 0084 00000000 		.word	.LANCHOR15
 1346              		.cfi_endproc
 1347              	.LFE16:
 1349              		.section	.text.fn_setup_tim2,"ax",%progbits
 1350              		.align	1
ARM GAS  m3.s 			page 32


 1351              		.global	fn_setup_tim2
 1352              		.syntax unified
 1353              		.thumb
 1354              		.thumb_func
 1356              	fn_setup_tim2:
 1357              	.LFB17:
 132:Source/embsysS20.h **** 
 133:Source/embsysS20.h ****     void fn_setup_tim2(){
 1358              		.loc 2 133 25 is_stmt 1 view -0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 0
 1361              		@ frame_needed = 0, uses_anonymous_args = 0
 1362 0000 08B5     		push	{r3, lr}
 1363              	.LCFI25:
 1364              		.cfi_def_cfa_offset 8
 1365              		.cfi_offset 3, -8
 1366              		.cfi_offset 14, -4
 134:Source/embsysS20.h ****         nvic_enable_irq(NVIC_TIM2_IRQ);
 1367              		.loc 2 134 9 view .LVU317
 1368 0002 1C20     		movs	r0, #28
 1369 0004 FFF7FEFF 		bl	nvic_enable_irq
 1370              	.LVL112:
 135:Source/embsysS20.h ****         rcc_periph_reset_pulse(RST_TIM2);
 1371              		.loc 2 135 9 view .LVU318
 1372 0008 4FF4E060 		mov	r0, #1792
 1373 000c FFF7FEFF 		bl	rcc_periph_reset_pulse
 1374              	.LVL113:
 136:Source/embsysS20.h **** 	    timer_set_prescaler(TIM2, 2000);
 1375              		.loc 2 136 6 view .LVU319
 1376 0010 4FF4FA61 		mov	r1, #2000
 1377 0014 4FF08040 		mov	r0, #1073741824
 1378 0018 FFF7FEFF 		bl	timer_set_prescaler
 1379              	.LVL114:
 137:Source/embsysS20.h ****         timer_set_period(TIM2, 1000);
 1380              		.loc 2 137 9 view .LVU320
 1381 001c 4FF47A71 		mov	r1, #1000
 1382 0020 4FF08040 		mov	r0, #1073741824
 1383 0024 FFF7FEFF 		bl	timer_set_period
 1384              	.LVL115:
 138:Source/embsysS20.h **** 	    timer_enable_counter(TIM2);
 1385              		.loc 2 138 6 view .LVU321
 1386 0028 4FF08040 		mov	r0, #1073741824
 1387 002c FFF7FEFF 		bl	timer_enable_counter
 1388              	.LVL116:
 139:Source/embsysS20.h **** 	    timer_enable_irq(TIM2, TIM_DIER_CC1IE);
 1389              		.loc 2 139 6 view .LVU322
 1390 0030 0221     		movs	r1, #2
 1391 0032 4FF08040 		mov	r0, #1073741824
 1392 0036 FFF7FEFF 		bl	timer_enable_irq
 1393              	.LVL117:
 140:Source/embsysS20.h ****     }
 1394              		.loc 2 140 5 is_stmt 0 view .LVU323
 1395 003a 08BD     		pop	{r3, pc}
 1396              		.cfi_endproc
 1397              	.LFE17:
 1399              		.section	.text.tim2_isr,"ax",%progbits
 1400              		.align	1
ARM GAS  m3.s 			page 33


 1401              		.global	tim2_isr
 1402              		.syntax unified
 1403              		.thumb
 1404              		.thumb_func
 1406              	tim2_isr:
 1407              	.LFB18:
 141:Source/embsysS20.h **** 
 142:Source/embsysS20.h ****     void tim2_isr(void){
 1408              		.loc 2 142 24 is_stmt 1 view -0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 1412 0000 08B5     		push	{r3, lr}
 1413              	.LCFI26:
 1414              		.cfi_def_cfa_offset 8
 1415              		.cfi_offset 3, -8
 1416              		.cfi_offset 14, -4
 143:Source/embsysS20.h ****         if(timer_get_flag(TIM2,TIM_SR_CC1IF)){
 1417              		.loc 2 143 9 view .LVU325
 1418              		.loc 2 143 12 is_stmt 0 view .LVU326
 1419 0002 0221     		movs	r1, #2
 1420 0004 4FF08040 		mov	r0, #1073741824
 1421 0008 FFF7FEFF 		bl	timer_get_flag
 1422              	.LVL118:
 1423              		.loc 2 143 11 view .LVU327
 1424 000c 00B9     		cbnz	r0, .L124
 1425              	.L121:
 144:Source/embsysS20.h ****             timer_set_period(TIM2, u16_globalPeriod);
 145:Source/embsysS20.h ****             timer_clear_flag(TIM2, TIM_SR_CC1IF);
 146:Source/embsysS20.h ****             
 147:Source/embsysS20.h ****             TOGGLE_LED;
 148:Source/embsysS20.h ****         }
 149:Source/embsysS20.h **** }
 1426              		.loc 2 149 1 view .LVU328
 1427 000e 08BD     		pop	{r3, pc}
 1428              	.L124:
 144:Source/embsysS20.h ****             timer_set_period(TIM2, u16_globalPeriod);
 1429              		.loc 2 144 13 is_stmt 1 view .LVU329
 1430 0010 084B     		ldr	r3, .L125
 1431 0012 1988     		ldrh	r1, [r3]
 1432 0014 4FF08040 		mov	r0, #1073741824
 1433 0018 FFF7FEFF 		bl	timer_set_period
 1434              	.LVL119:
 145:Source/embsysS20.h ****             
 1435              		.loc 2 145 13 view .LVU330
 1436 001c 0221     		movs	r1, #2
 1437 001e 4FF08040 		mov	r0, #1073741824
 1438 0022 FFF7FEFF 		bl	timer_clear_flag
 1439              	.LVL120:
 147:Source/embsysS20.h ****         }
 1440              		.loc 2 147 13 view .LVU331
 1441 0026 2021     		movs	r1, #32
 1442 0028 4FF09040 		mov	r0, #1207959552
 1443 002c FFF7FEFF 		bl	gpio_toggle
 1444              	.LVL121:
 1445              		.loc 2 149 1 is_stmt 0 view .LVU332
 1446 0030 EDE7     		b	.L121
ARM GAS  m3.s 			page 34


 1447              	.L126:
 1448 0032 00BF     		.align	2
 1449              	.L125:
 1450 0034 00000000 		.word	.LANCHOR16
 1451              		.cfi_endproc
 1452              	.LFE18:
 1454              		.section	.text._write,"ax",%progbits
 1455              		.align	1
 1456              		.global	_write
 1457              		.syntax unified
 1458              		.thumb
 1459              		.thumb_func
 1461              	_write:
 1462              	.LVL122:
 1463              	.LFB22:
 1464              		.file 3 "Source/m3.c"
   1:Source/m3.c   **** /*
   2:Source/m3.c   ****  * Ryan Colon
   3:Source/m3.c   ****  * Embedded Systems Milestone 3
   4:Source/m3.c   ****  * 02.22.22
   5:Source/m3.c   ****  * Program takes user input from the serial monitor and encrypts the text
   6:Source/m3.c   ****  * While running, if the user holds B1, the output will switch to decrypt from encrypt.
   7:Source/m3.c   ****  * This program also adds the functionality to change the led blink speed.
   8:Source/m3.c   ****  */
   9:Source/m3.c   **** 
  10:Source/m3.c   **** #include "embsysS20.h"
  11:Source/m3.c   **** #include <stdio.h>
  12:Source/m3.c   **** #include <errno.h>
  13:Source/m3.c   **** #include <unistd.h>
  14:Source/m3.c   **** #include <stdlib.h>
  15:Source/m3.c   **** 
  16:Source/m3.c   **** void fn_handleChar(char c_toHandle);
  17:Source/m3.c   **** void fn_encDecChar(char c_toDo);
  18:Source/m3.c   **** void fn_commitPeriod(char* ac_toCommit);
  19:Source/m3.c   **** 
  20:Source/m3.c   **** //Available on the libopencm3 github example page
  21:Source/m3.c   **** //Essentially makes the USART2 port the STDOUT stream
  22:Source/m3.c   **** int _write(int file, char* ptr, int len){
 1465              		.loc 3 22 41 is_stmt 1 view -0
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 0
 1468              		@ frame_needed = 0, uses_anonymous_args = 0
 1469              		.loc 3 22 41 is_stmt 0 view .LVU334
 1470 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1471              	.LCFI27:
 1472              		.cfi_def_cfa_offset 24
 1473              		.cfi_offset 3, -24
 1474              		.cfi_offset 4, -20
 1475              		.cfi_offset 5, -16
 1476              		.cfi_offset 6, -12
 1477              		.cfi_offset 7, -8
 1478              		.cfi_offset 14, -4
  23:Source/m3.c   ****     int i;
 1479              		.loc 3 23 5 is_stmt 1 view .LVU335
  24:Source/m3.c   **** 
  25:Source/m3.c   ****     if (file == STDOUT_FILENO || file == STDERR_FILENO){
 1480              		.loc 3 25 5 view .LVU336
ARM GAS  m3.s 			page 35


 1481              		.loc 3 25 30 is_stmt 0 view .LVU337
 1482 0002 0138     		subs	r0, r0, #1
 1483              	.LVL123:
 1484              		.loc 3 25 8 view .LVU338
 1485 0004 0128     		cmp	r0, #1
 1486 0006 13D8     		bhi	.L136
 1487 0008 0D46     		mov	r5, r1
 1488 000a 1746     		mov	r7, r2
  26:Source/m3.c   **** 	    for(i = 0; i < len; i++){
 1489              		.loc 3 26 12 view .LVU339
 1490 000c 0024     		movs	r4, #0
 1491 000e 04E0     		b	.L128
 1492              	.LVL124:
 1493              	.L130:
  27:Source/m3.c   **** 		    if(ptr[i] == '\n')
  28:Source/m3.c   **** 			    usart_send_blocking(USART_CONSOLE, '\r');
  29:Source/m3.c   **** 
  30:Source/m3.c   **** 		    usart_send_blocking(USART_CONSOLE, ptr[i]);
 1494              		.loc 3 30 7 is_stmt 1 discriminator 2 view .LVU340
 1495 0010 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 1496 0012 0B48     		ldr	r0, .L137
 1497 0014 FFF7FEFF 		bl	usart_send_blocking
 1498              	.LVL125:
  26:Source/m3.c   **** 	    for(i = 0; i < len; i++){
 1499              		.loc 3 26 26 discriminator 2 view .LVU341
  26:Source/m3.c   **** 	    for(i = 0; i < len; i++){
 1500              		.loc 3 26 27 is_stmt 0 discriminator 2 view .LVU342
 1501 0018 0134     		adds	r4, r4, #1
 1502              	.LVL126:
 1503              	.L128:
  26:Source/m3.c   **** 	    for(i = 0; i < len; i++){
 1504              		.loc 3 26 17 is_stmt 1 discriminator 1 view .LVU343
  26:Source/m3.c   **** 	    for(i = 0; i < len; i++){
 1505              		.loc 3 26 6 is_stmt 0 discriminator 1 view .LVU344
 1506 001a BC42     		cmp	r4, r7
 1507 001c 0EDA     		bge	.L127
  27:Source/m3.c   **** 		    if(ptr[i] == '\n')
 1508              		.loc 3 27 7 is_stmt 1 view .LVU345
  27:Source/m3.c   **** 		    if(ptr[i] == '\n')
 1509              		.loc 3 27 13 is_stmt 0 view .LVU346
 1510 001e 2E19     		adds	r6, r5, r4
 1511 0020 2B5D     		ldrb	r3, [r5, r4]	@ zero_extendqisi2
  27:Source/m3.c   **** 		    if(ptr[i] == '\n')
 1512              		.loc 3 27 9 view .LVU347
 1513 0022 0A2B     		cmp	r3, #10
 1514 0024 F4D1     		bne	.L130
  28:Source/m3.c   **** 
 1515              		.loc 3 28 8 is_stmt 1 view .LVU348
 1516 0026 0D21     		movs	r1, #13
 1517 0028 0548     		ldr	r0, .L137
 1518 002a FFF7FEFF 		bl	usart_send_blocking
 1519              	.LVL127:
 1520 002e EFE7     		b	.L130
 1521              	.LVL128:
 1522              	.L136:
  31:Source/m3.c   **** 	    }
  32:Source/m3.c   **** 
ARM GAS  m3.s 			page 36


  33:Source/m3.c   **** 	    return i;
  34:Source/m3.c   ****     }
  35:Source/m3.c   **** 
  36:Source/m3.c   ****     errno = EIO;
 1523              		.loc 3 36 4 view .LVU349
 1524              		.loc 3 36 6 is_stmt 0 view .LVU350
 1525 0030 FFF7FEFF 		bl	__errno
 1526              	.LVL129:
 1527              		.loc 3 36 10 view .LVU351
 1528 0034 0523     		movs	r3, #5
 1529 0036 0360     		str	r3, [r0]
  37:Source/m3.c   ****     return -1;
 1530              		.loc 3 37 5 is_stmt 1 view .LVU352
 1531              		.loc 3 37 12 is_stmt 0 view .LVU353
 1532 0038 4FF0FF34 		mov	r4, #-1
 1533              	.L127:
  38:Source/m3.c   **** }
 1534              		.loc 3 38 1 view .LVU354
 1535 003c 2046     		mov	r0, r4
 1536 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1537              	.L138:
 1538              		.align	2
 1539              	.L137:
 1540 0040 00440040 		.word	1073759232
 1541              		.cfi_endproc
 1542              	.LFE22:
 1544              		.section	.text.fn_encDecChar,"ax",%progbits
 1545              		.align	1
 1546              		.global	fn_encDecChar
 1547              		.syntax unified
 1548              		.thumb
 1549              		.thumb_func
 1551              	fn_encDecChar:
 1552              	.LVL130:
 1553              	.LFB25:
  39:Source/m3.c   **** 
  40:Source/m3.c   **** // Below is a standard template for just about any embedded
  41:Source/m3.c   **** //  system main() loop. 
  42:Source/m3.c   **** int main(void)  {
  43:Source/m3.c   ****   // setup software structures need for application
  44:Source/m3.c   ****   fn_circBuffInit(&st_circularBufferInput, bufferI, BUFFER_SIZE);
  45:Source/m3.c   ****   fn_circBuffInit(&st_circularBufferOutput, bufferO, BUFFER_SIZE);
  46:Source/m3.c   **** 
  47:Source/m3.c   ****   // initialize the hardware
  48:Source/m3.c   ****   fn_clock_setup();
  49:Source/m3.c   ****   fn_usart_setup(); 
  50:Source/m3.c   ****   fn_setup_tim2();
  51:Source/m3.c   **** 
  52:Source/m3.c   ****   gpio_mode_setup(LED2_GPIO_Port, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, LED2_Pin);
  53:Source/m3.c   ****   gpio_mode_setup(BUT1_GPIO_Port, GPIO_MODE_INPUT, GPIO_PUPD_NONE, BUT1_Pin);
  54:Source/m3.c   **** 
  55:Source/m3.c   ****   LED_OFF;
  56:Source/m3.c   **** 
  57:Source/m3.c   ****   while(true){
  58:Source/m3.c   ****     if(!fn_circBuffEmpty(&st_circularBufferInput)){
  59:Source/m3.c   ****       char c_charToSend = '\0';
  60:Source/m3.c   ****       fn_circBuffGet(&st_circularBufferInput, &c_charToSend);
ARM GAS  m3.s 			page 37


  61:Source/m3.c   ****       fn_handleChar(c_charToSend);
  62:Source/m3.c   ****     }
  63:Source/m3.c   ****   }
  64:Source/m3.c   ****   return 0;    // NEVER EXECUTES
  65:Source/m3.c   **** } 
  66:Source/m3.c   **** 
  67:Source/m3.c   **** /*
  68:Source/m3.c   ****  * Handling the incoming characters for this program can become very complex, there are a lot of ca
  69:Source/m3.c   ****  * case at all. For each case it will do the bare minimum to keep itself aware of what is going on 
  70:Source/m3.c   ****  * with the incoming character appropriately. 
  71:Source/m3.c   ****  */
  72:Source/m3.c   **** void fn_handleChar(char c_toHandle){
  73:Source/m3.c   ****   static uint8_t u8_case = 0;
  74:Source/m3.c   ****   static char ac_period[4] = {'1','0','0','0'};
  75:Source/m3.c   ****   static char ac_lastPeriod[4] = {'1','0','0','0'};
  76:Source/m3.c   **** 
  77:Source/m3.c   ****   // Consider past characters and context to determine current character context
  78:Source/m3.c   ****   if(c_toHandle == '!' && u8_case != 3)
  79:Source/m3.c   ****     ++u8_case;
  80:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == 'L')
  81:Source/m3.c   ****     u8_case = 4;
  82:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == 'S')
  83:Source/m3.c   ****     u8_case = 5;
  84:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == '!'){
  85:Source/m3.c   ****     u8_case = 10;
  86:Source/m3.c   ****   }
  87:Source/m3.c   ****   else if(u8_case < 6)
  88:Source/m3.c   ****     u8_case = 0;
  89:Source/m3.c   ****   else if(u8_case >= 6 &&(c_toHandle < 0x30 || c_toHandle > 0x39)){
  90:Source/m3.c   ****     u8_case = 0;
  91:Source/m3.c   ****     printf("Invalid period, change not commited.\n");
  92:Source/m3.c   ****     for(int i = 0; i < 4; i++)
  93:Source/m3.c   ****       ac_period[i] = ac_lastPeriod[i];
  94:Source/m3.c   ****     return;
  95:Source/m3.c   ****   }
  96:Source/m3.c   **** 
  97:Source/m3.c   ****   //Act upon the incoming character based on it's context
  98:Source/m3.c   ****   switch(u8_case){
  99:Source/m3.c   ****     case 0:
 100:Source/m3.c   ****       fn_encDecChar(c_toHandle);
 101:Source/m3.c   ****       break;
 102:Source/m3.c   ****     case 1:
 103:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 104:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 105:Source/m3.c   ****       break;
 106:Source/m3.c   ****     case 2:
 107:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 108:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 109:Source/m3.c   ****       break;
 110:Source/m3.c   ****     case 3:
 111:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 112:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 113:Source/m3.c   ****       break;
 114:Source/m3.c   ****     case 4:
 115:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 116:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 117:Source/m3.c   ****         fn_circBuffPut(&st_circularBufferOutput, ac_period[i]);  
ARM GAS  m3.s 			page 38


 118:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 119:Source/m3.c   ****       u8_case = 0;
 120:Source/m3.c   ****       break;
 121:Source/m3.c   ****     case 5:
 122:Source/m3.c   ****       ++u8_case;
 123:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 124:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 125:Source/m3.c   ****       break;
 126:Source/m3.c   ****     case 6:
 127:Source/m3.c   ****       ++u8_case;
 128:Source/m3.c   ****       ac_period[0] = c_toHandle;
 129:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 130:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 131:Source/m3.c   ****       break;
 132:Source/m3.c   ****     case 7:
 133:Source/m3.c   ****       ++u8_case;
 134:Source/m3.c   ****       ac_period[1] = c_toHandle;
 135:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 136:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 137:Source/m3.c   ****       break;
 138:Source/m3.c   ****     case 8:
 139:Source/m3.c   ****       ++u8_case;
 140:Source/m3.c   ****       ac_period[2] = c_toHandle;
 141:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 142:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 143:Source/m3.c   ****       break;
 144:Source/m3.c   ****     case 9:
 145:Source/m3.c   ****       u8_case = 0;
 146:Source/m3.c   ****       ac_period[3] = c_toHandle;
 147:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 148:Source/m3.c   ****       fn_commitPeriod(ac_period);
 149:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 150:Source/m3.c   ****         ac_lastPeriod[i] = ac_period[i];
 151:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 152:Source/m3.c   ****       break;
 153:Source/m3.c   ****     case 10:
 154:Source/m3.c   ****       u8_case = 3;
 155:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 156:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 157:Source/m3.c   ****       break;
 158:Source/m3.c   ****   }  
 159:Source/m3.c   **** }
 160:Source/m3.c   **** 
 161:Source/m3.c   **** //Function to either encrypt/decrypt char and then stage to print it
 162:Source/m3.c   **** void fn_encDecChar(char c_toDo){
 1554              		.loc 3 162 32 is_stmt 1 view -0
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 8
 1557              		@ frame_needed = 0, uses_anonymous_args = 0
 1558              		.loc 3 162 32 is_stmt 0 view .LVU356
 1559 0000 00B5     		push	{lr}
 1560              	.LCFI28:
 1561              		.cfi_def_cfa_offset 4
 1562              		.cfi_offset 14, -4
 1563 0002 83B0     		sub	sp, sp, #12
 1564              	.LCFI29:
 1565              		.cfi_def_cfa_offset 16
ARM GAS  m3.s 			page 39


 1566 0004 8DF80700 		strb	r0, [sp, #7]
 163:Source/m3.c   ****   fn_convertToCaps(&c_toDo);
 1567              		.loc 3 163 3 is_stmt 1 view .LVU357
 1568 0008 0DF10700 		add	r0, sp, #7
 1569              	.LVL131:
 1570              		.loc 3 163 3 is_stmt 0 view .LVU358
 1571 000c FFF7FEFF 		bl	fn_convertToCaps
 1572              	.LVL132:
 164:Source/m3.c   **** 
 165:Source/m3.c   ****   if(IS_B1_PRESSED) //DECRYPT
 1573              		.loc 3 165 3 is_stmt 1 view .LVU359
 1574              		.loc 3 165 9 is_stmt 0 view .LVU360
 1575 0010 4FF40051 		mov	r1, #8192
 1576 0014 0E48     		ldr	r0, .L143
 1577 0016 FFF7FEFF 		bl	gpio_get
 1578              	.LVL133:
 1579              		.loc 3 165 5 view .LVU361
 1580 001a B0F5005F 		cmp	r0, #8192
 1581 001e 10D0     		beq	.L140
 166:Source/m3.c   ****       c_toDo = fn_decryptText(c_toDo);
 1582              		.loc 3 166 7 is_stmt 1 view .LVU362
 1583              		.loc 3 166 16 is_stmt 0 view .LVU363
 1584 0020 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1585 0024 FFF7FEFF 		bl	fn_decryptText
 1586              	.LVL134:
 1587              		.loc 3 166 14 view .LVU364
 1588 0028 8DF80700 		strb	r0, [sp, #7]
 1589              	.L141:
 167:Source/m3.c   **** 
 168:Source/m3.c   ****   else //ENCRYPT
 169:Source/m3.c   ****       c_toDo = fn_encryptText(c_toDo);
 170:Source/m3.c   **** 
 171:Source/m3.c   ****   fn_circBuffPut(&st_circularBufferOutput, c_toDo);
 1590              		.loc 3 171 3 is_stmt 1 view .LVU365
 1591 002c 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 1592 0030 0848     		ldr	r0, .L143+4
 1593 0032 FFF7FEFF 		bl	fn_circBuffPut
 1594              	.LVL135:
 172:Source/m3.c   ****   /* Enable transmit interrupt so it sends back the data. */
 173:Source/m3.c   ****   usart_enable_tx_interrupt(USART_CONSOLE);
 1595              		.loc 3 173 3 view .LVU366
 1596 0036 0848     		ldr	r0, .L143+8
 1597 0038 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1598              	.LVL136:
 174:Source/m3.c   **** }
 1599              		.loc 3 174 1 is_stmt 0 view .LVU367
 1600 003c 03B0     		add	sp, sp, #12
 1601              	.LCFI30:
 1602              		.cfi_remember_state
 1603              		.cfi_def_cfa_offset 4
 1604              		@ sp needed
 1605 003e 5DF804FB 		ldr	pc, [sp], #4
 1606              	.L140:
 1607              	.LCFI31:
 1608              		.cfi_restore_state
 169:Source/m3.c   **** 
 1609              		.loc 3 169 7 is_stmt 1 view .LVU368
ARM GAS  m3.s 			page 40


 169:Source/m3.c   **** 
 1610              		.loc 3 169 16 is_stmt 0 view .LVU369
 1611 0042 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1612 0046 FFF7FEFF 		bl	fn_encryptText
 1613              	.LVL137:
 169:Source/m3.c   **** 
 1614              		.loc 3 169 14 view .LVU370
 1615 004a 8DF80700 		strb	r0, [sp, #7]
 1616 004e EDE7     		b	.L141
 1617              	.L144:
 1618              		.align	2
 1619              	.L143:
 1620 0050 00080048 		.word	1207961600
 1621 0054 00000000 		.word	.LANCHOR15
 1622 0058 00440040 		.word	1073759232
 1623              		.cfi_endproc
 1624              	.LFE25:
 1626              		.section	.rodata.fn_commitPeriod.str1.4,"aMS",%progbits,1
 1627              		.align	2
 1628              	.LC8:
 1629 0000 30303030 		.ascii	"0000\000"
 1629      00
 1630              		.section	.text.fn_commitPeriod,"ax",%progbits
 1631              		.align	1
 1632              		.global	fn_commitPeriod
 1633              		.syntax unified
 1634              		.thumb
 1635              		.thumb_func
 1637              	fn_commitPeriod:
 1638              	.LVL138:
 1639              	.LFB26:
 175:Source/m3.c   **** 
 176:Source/m3.c   **** //Function sets the period of the LED
 177:Source/m3.c   **** void fn_commitPeriod(char* ac_toCommit){
 1640              		.loc 3 177 40 is_stmt 1 view -0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 8
 1643              		@ frame_needed = 0, uses_anonymous_args = 0
 1644              		.loc 3 177 40 is_stmt 0 view .LVU372
 1645 0000 00B5     		push	{lr}
 1646              	.LCFI32:
 1647              		.cfi_def_cfa_offset 4
 1648              		.cfi_offset 14, -4
 1649 0002 83B0     		sub	sp, sp, #12
 1650              	.LCFI33:
 1651              		.cfi_def_cfa_offset 16
 1652 0004 8446     		mov	ip, r0
 178:Source/m3.c   ****   char ac_convertThis[5] = {'0','0','0','0','\0'};
 1653              		.loc 3 178 3 is_stmt 1 view .LVU373
 1654              		.loc 3 178 8 is_stmt 0 view .LVU374
 1655 0006 0D4B     		ldr	r3, .L149
 1656 0008 93E80300 		ldm	r3, {r0, r1}
 1657              	.LVL139:
 1658              		.loc 3 178 8 view .LVU375
 1659 000c 0090     		str	r0, [sp]
 1660 000e 8DF80410 		strb	r1, [sp, #4]
 179:Source/m3.c   **** 
ARM GAS  m3.s 			page 41


 180:Source/m3.c   ****   for(int i = 0; i < 4; i++)
 1661              		.loc 3 180 3 is_stmt 1 view .LVU376
 1662              	.LBB3:
 1663              		.loc 3 180 7 view .LVU377
 1664              	.LVL140:
 1665              		.loc 3 180 11 is_stmt 0 view .LVU378
 1666 0012 0023     		movs	r3, #0
 1667              		.loc 3 180 3 view .LVU379
 1668 0014 07E0     		b	.L146
 1669              	.LVL141:
 1670              	.L147:
 181:Source/m3.c   ****     ac_convertThis[i] = ac_toCommit[i];
 1671              		.loc 3 181 5 is_stmt 1 discriminator 3 view .LVU380
 1672              		.loc 3 181 36 is_stmt 0 discriminator 3 view .LVU381
 1673 0016 1CF80310 		ldrb	r1, [ip, r3]	@ zero_extendqisi2
 1674              		.loc 3 181 23 discriminator 3 view .LVU382
 1675 001a 03F10802 		add	r2, r3, #8
 1676 001e 6A44     		add	r2, sp, r2
 1677 0020 02F8081C 		strb	r1, [r2, #-8]
 180:Source/m3.c   ****     ac_convertThis[i] = ac_toCommit[i];
 1678              		.loc 3 180 25 is_stmt 1 discriminator 3 view .LVU383
 180:Source/m3.c   ****     ac_convertThis[i] = ac_toCommit[i];
 1679              		.loc 3 180 26 is_stmt 0 discriminator 3 view .LVU384
 1680 0024 0133     		adds	r3, r3, #1
 1681              	.LVL142:
 1682              	.L146:
 180:Source/m3.c   ****     ac_convertThis[i] = ac_toCommit[i];
 1683              		.loc 3 180 18 is_stmt 1 discriminator 1 view .LVU385
 180:Source/m3.c   ****     ac_convertThis[i] = ac_toCommit[i];
 1684              		.loc 3 180 3 is_stmt 0 discriminator 1 view .LVU386
 1685 0026 032B     		cmp	r3, #3
 1686 0028 F5DD     		ble	.L147
 1687              	.LBE3:
 182:Source/m3.c   **** 
 183:Source/m3.c   ****   uint16_t u16_period = atoi(ac_convertThis);
 1688              		.loc 3 183 3 is_stmt 1 view .LVU387
 1689              		.loc 3 183 25 is_stmt 0 view .LVU388
 1690 002a 6846     		mov	r0, sp
 1691 002c FFF7FEFF 		bl	atoi
 1692              	.LVL143:
 184:Source/m3.c   **** 
 185:Source/m3.c   ****   u16_globalPeriod = u16_period;
 1693              		.loc 3 185 3 is_stmt 1 view .LVU389
 1694              		.loc 3 185 20 is_stmt 0 view .LVU390
 1695 0030 034B     		ldr	r3, .L149+4
 1696 0032 1880     		strh	r0, [r3]	@ movhi
 186:Source/m3.c   **** }...
 1697              		.loc 3 186 1 view .LVU391
 1698 0034 03B0     		add	sp, sp, #12
 1699              	.LCFI34:
 1700              		.cfi_def_cfa_offset 4
 1701              		@ sp needed
 1702 0036 5DF804FB 		ldr	pc, [sp], #4
 1703              	.L150:
 1704 003a 00BF     		.align	2
 1705              	.L149:
 1706 003c 00000000 		.word	.LC8
ARM GAS  m3.s 			page 42


 1707 0040 00000000 		.word	.LANCHOR16
 1708              		.cfi_endproc
 1709              	.LFE26:
 1711              		.section	.rodata.fn_handleChar.str1.4,"aMS",%progbits,1
 1712              		.align	2
 1713              	.LC9:
 1714 0000 496E7661 		.ascii	"Invalid period, change not commited.\000"
 1714      6C696420 
 1714      70657269 
 1714      6F642C20 
 1714      6368616E 
 1715              		.section	.text.fn_handleChar,"ax",%progbits
 1716              		.align	1
 1717              		.global	fn_handleChar
 1718              		.syntax unified
 1719              		.thumb
 1720              		.thumb_func
 1722              	fn_handleChar:
 1723              	.LVL144:
 1724              	.LFB24:
  72:Source/m3.c   **** void fn_handleChar(char c_toHandle){
 1725              		.loc 3 72 36 is_stmt 1 view -0
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 0
 1728              		@ frame_needed = 0, uses_anonymous_args = 0
  72:Source/m3.c   **** void fn_handleChar(char c_toHandle){
 1729              		.loc 3 72 36 is_stmt 0 view .LVU393
 1730 0000 38B5     		push	{r3, r4, r5, lr}
 1731              	.LCFI35:
 1732              		.cfi_def_cfa_offset 16
 1733              		.cfi_offset 3, -16
 1734              		.cfi_offset 4, -12
 1735              		.cfi_offset 5, -8
 1736              		.cfi_offset 14, -4
 1737 0002 0146     		mov	r1, r0
  73:Source/m3.c   ****   static uint8_t u8_case = 0;
 1738              		.loc 3 73 3 is_stmt 1 view .LVU394
  74:Source/m3.c   ****   static char ac_period[4] = {'1','0','0','0'};
 1739              		.loc 3 74 3 view .LVU395
  75:Source/m3.c   ****   static char ac_lastPeriod[4] = {'1','0','0','0'};
 1740              		.loc 3 75 3 view .LVU396
  78:Source/m3.c   ****   if(c_toHandle == '!' && u8_case != 3)
 1741              		.loc 3 78 3 view .LVU397
  78:Source/m3.c   ****   if(c_toHandle == '!' && u8_case != 3)
 1742              		.loc 3 78 5 is_stmt 0 view .LVU398
 1743 0004 2128     		cmp	r0, #33
 1744 0006 18D0     		beq	.L178
 1745              	.L152:
  80:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == 'L')
 1746              		.loc 3 80 8 is_stmt 1 view .LVU399
  80:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == 'L')
 1747              		.loc 3 80 19 is_stmt 0 view .LVU400
 1748 0008 624B     		ldr	r3, .L182
 1749 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  80:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == 'L')
 1750              		.loc 3 80 10 view .LVU401
 1751 000c 032B     		cmp	r3, #3
ARM GAS  m3.s 			page 43


 1752 000e 1CD0     		beq	.L179
 1753              	.L154:
  82:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == 'S')
 1754              		.loc 3 82 8 is_stmt 1 view .LVU402
  82:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == 'S')
 1755              		.loc 3 82 10 is_stmt 0 view .LVU403
 1756 0010 032B     		cmp	r3, #3
 1757 0012 20D0     		beq	.L180
 1758              	.L155:
  84:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == '!'){
 1759              		.loc 3 84 8 is_stmt 1 view .LVU404
  84:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == '!'){
 1760              		.loc 3 84 10 is_stmt 0 view .LVU405
 1761 0014 032B     		cmp	r3, #3
 1762 0016 24D0     		beq	.L181
 1763              	.L156:
  87:Source/m3.c   ****   else if(u8_case < 6)
 1764              		.loc 3 87 8 is_stmt 1 view .LVU406
  87:Source/m3.c   ****   else if(u8_case < 6)
 1765              		.loc 3 87 10 is_stmt 0 view .LVU407
 1766 0018 052B     		cmp	r3, #5
 1767 001a 28D8     		bhi	.L157
  88:Source/m3.c   ****     u8_case = 0;
 1768              		.loc 3 88 5 is_stmt 1 view .LVU408
  88:Source/m3.c   ****     u8_case = 0;
 1769              		.loc 3 88 13 is_stmt 0 view .LVU409
 1770 001c 5D4B     		ldr	r3, .L182
 1771 001e 0022     		movs	r2, #0
 1772 0020 1A70     		strb	r2, [r3]
 1773              	.L153:
  98:Source/m3.c   ****   switch(u8_case){
 1774              		.loc 3 98 3 is_stmt 1 view .LVU410
 1775 0022 5C4B     		ldr	r3, .L182
 1776 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1777 0026 0A2B     		cmp	r3, #10
 1778 0028 39D8     		bhi	.L151
 1779 002a DFE803F0 		tbb	[pc, r3]
 1780              	.L162:
 1781 002e 35       		.byte	(.L172-.L162)/2
 1782 002f 39       		.byte	(.L171-.L162)/2
 1783 0030 40       		.byte	(.L170-.L162)/2
 1784 0031 47       		.byte	(.L169-.L162)/2
 1785 0032 4E       		.byte	(.L168-.L162)/2
 1786 0033 62       		.byte	(.L167-.L162)/2
 1787 0034 6C       		.byte	(.L166-.L162)/2
 1788 0035 78       		.byte	(.L165-.L162)/2
 1789 0036 84       		.byte	(.L164-.L162)/2
 1790 0037 90       		.byte	(.L163-.L162)/2
 1791 0038 A8       		.byte	(.L161-.L162)/2
 1792 0039 00       		.p2align 1
 1793              	.L178:
  78:Source/m3.c   ****   if(c_toHandle == '!' && u8_case != 3)
 1794              		.loc 3 78 35 is_stmt 0 discriminator 1 view .LVU411
 1795 003a 564B     		ldr	r3, .L182
 1796 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  78:Source/m3.c   ****   if(c_toHandle == '!' && u8_case != 3)
 1797              		.loc 3 78 24 discriminator 1 view .LVU412
ARM GAS  m3.s 			page 44


 1798 003e 032B     		cmp	r3, #3
 1799 0040 E2D0     		beq	.L152
  79:Source/m3.c   ****     ++u8_case;
 1800              		.loc 3 79 5 is_stmt 1 view .LVU413
 1801 0042 0133     		adds	r3, r3, #1
 1802 0044 534A     		ldr	r2, .L182
 1803 0046 1370     		strb	r3, [r2]
 1804 0048 EBE7     		b	.L153
 1805              	.L179:
  80:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == 'L')
 1806              		.loc 3 80 24 is_stmt 0 discriminator 1 view .LVU414
 1807 004a 4C29     		cmp	r1, #76
 1808 004c E0D1     		bne	.L154
  81:Source/m3.c   ****     u8_case = 4;
 1809              		.loc 3 81 5 is_stmt 1 view .LVU415
  81:Source/m3.c   ****     u8_case = 4;
 1810              		.loc 3 81 13 is_stmt 0 view .LVU416
 1811 004e 514B     		ldr	r3, .L182
 1812 0050 0422     		movs	r2, #4
 1813 0052 1A70     		strb	r2, [r3]
 1814 0054 E5E7     		b	.L153
 1815              	.L180:
  82:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == 'S')
 1816              		.loc 3 82 24 discriminator 1 view .LVU417
 1817 0056 5329     		cmp	r1, #83
 1818 0058 DCD1     		bne	.L155
  83:Source/m3.c   ****     u8_case = 5;
 1819              		.loc 3 83 5 is_stmt 1 view .LVU418
  83:Source/m3.c   ****     u8_case = 5;
 1820              		.loc 3 83 13 is_stmt 0 view .LVU419
 1821 005a 4E4B     		ldr	r3, .L182
 1822 005c 0522     		movs	r2, #5
 1823 005e 1A70     		strb	r2, [r3]
 1824 0060 DFE7     		b	.L153
 1825              	.L181:
  84:Source/m3.c   ****   else if(u8_case == 3 && c_toHandle == '!'){
 1826              		.loc 3 84 24 discriminator 1 view .LVU420
 1827 0062 2129     		cmp	r1, #33
 1828 0064 D8D1     		bne	.L156
  85:Source/m3.c   ****     u8_case = 10;
 1829              		.loc 3 85 5 is_stmt 1 view .LVU421
  85:Source/m3.c   ****     u8_case = 10;
 1830              		.loc 3 85 13 is_stmt 0 view .LVU422
 1831 0066 4B4B     		ldr	r3, .L182
 1832 0068 0A22     		movs	r2, #10
 1833 006a 1A70     		strb	r2, [r3]
 1834 006c D9E7     		b	.L153
 1835              	.L157:
  89:Source/m3.c   ****   else if(u8_case >= 6 &&(c_toHandle < 0x30 || c_toHandle > 0x39)){
 1836              		.loc 3 89 8 is_stmt 1 discriminator 1 view .LVU423
  89:Source/m3.c   ****   else if(u8_case >= 6 &&(c_toHandle < 0x30 || c_toHandle > 0x39)){
 1837              		.loc 3 89 45 is_stmt 0 discriminator 1 view .LVU424
 1838 006e A1F13003 		sub	r3, r1, #48
 1839 0072 DBB2     		uxtb	r3, r3
  89:Source/m3.c   ****   else if(u8_case >= 6 &&(c_toHandle < 0x30 || c_toHandle > 0x39)){
 1840              		.loc 3 89 24 discriminator 1 view .LVU425
 1841 0074 092B     		cmp	r3, #9
ARM GAS  m3.s 			page 45


 1842 0076 D4D9     		bls	.L153
  90:Source/m3.c   ****     u8_case = 0;
 1843              		.loc 3 90 5 is_stmt 1 view .LVU426
  90:Source/m3.c   ****     u8_case = 0;
 1844              		.loc 3 90 13 is_stmt 0 view .LVU427
 1845 0078 0024     		movs	r4, #0
 1846 007a 464B     		ldr	r3, .L182
 1847 007c 1C70     		strb	r4, [r3]
  91:Source/m3.c   ****     printf("Invalid period, change not commited.\n");
 1848              		.loc 3 91 5 is_stmt 1 view .LVU428
 1849 007e 4648     		ldr	r0, .L182+4
 1850              	.LVL145:
  91:Source/m3.c   ****     printf("Invalid period, change not commited.\n");
 1851              		.loc 3 91 5 is_stmt 0 view .LVU429
 1852 0080 FFF7FEFF 		bl	puts
 1853              	.LVL146:
  92:Source/m3.c   ****     for(int i = 0; i < 4; i++)
 1854              		.loc 3 92 5 is_stmt 1 view .LVU430
 1855              	.LBB4:
  92:Source/m3.c   ****     for(int i = 0; i < 4; i++)
 1856              		.loc 3 92 9 view .LVU431
  92:Source/m3.c   ****     for(int i = 0; i < 4; i++)
 1857              		.loc 3 92 13 is_stmt 0 view .LVU432
 1858 0084 2346     		mov	r3, r4
  92:Source/m3.c   ****     for(int i = 0; i < 4; i++)
 1859              		.loc 3 92 5 view .LVU433
 1860 0086 04E0     		b	.L158
 1861              	.LVL147:
 1862              	.L159:
  93:Source/m3.c   ****       ac_period[i] = ac_lastPeriod[i];
 1863              		.loc 3 93 7 is_stmt 1 discriminator 3 view .LVU434
  93:Source/m3.c   ****       ac_period[i] = ac_lastPeriod[i];
 1864              		.loc 3 93 35 is_stmt 0 discriminator 3 view .LVU435
 1865 0088 444A     		ldr	r2, .L182+8
 1866 008a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
  93:Source/m3.c   ****       ac_period[i] = ac_lastPeriod[i];
 1867              		.loc 3 93 20 discriminator 3 view .LVU436
 1868 008c 444A     		ldr	r2, .L182+12
 1869 008e D154     		strb	r1, [r2, r3]
  92:Source/m3.c   ****     for(int i = 0; i < 4; i++)
 1870              		.loc 3 92 27 is_stmt 1 discriminator 3 view .LVU437
  92:Source/m3.c   ****     for(int i = 0; i < 4; i++)
 1871              		.loc 3 92 28 is_stmt 0 discriminator 3 view .LVU438
 1872 0090 0133     		adds	r3, r3, #1
 1873              	.LVL148:
 1874              	.L158:
  92:Source/m3.c   ****     for(int i = 0; i < 4; i++)
 1875              		.loc 3 92 20 is_stmt 1 discriminator 1 view .LVU439
  92:Source/m3.c   ****     for(int i = 0; i < 4; i++)
 1876              		.loc 3 92 5 is_stmt 0 discriminator 1 view .LVU440
 1877 0092 032B     		cmp	r3, #3
 1878 0094 F8DD     		ble	.L159
 1879 0096 02E0     		b	.L151
 1880              	.LVL149:
 1881              	.L172:
  92:Source/m3.c   ****     for(int i = 0; i < 4; i++)
 1882              		.loc 3 92 5 discriminator 1 view .LVU441
ARM GAS  m3.s 			page 46


 1883              	.LBE4:
 100:Source/m3.c   ****       fn_encDecChar(c_toHandle);
 1884              		.loc 3 100 7 is_stmt 1 view .LVU442
 1885 0098 0846     		mov	r0, r1
 1886              	.LVL150:
 100:Source/m3.c   ****       fn_encDecChar(c_toHandle);
 1887              		.loc 3 100 7 is_stmt 0 view .LVU443
 1888 009a FFF7FEFF 		bl	fn_encDecChar
 1889              	.LVL151:
 101:Source/m3.c   ****       break;
 1890              		.loc 3 101 7 is_stmt 1 view .LVU444
 1891              	.L151:
 159:Source/m3.c   **** }
 1892              		.loc 3 159 1 is_stmt 0 view .LVU445
 1893 009e 38BD     		pop	{r3, r4, r5, pc}
 1894              	.LVL152:
 1895              	.L171:
 103:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 1896              		.loc 3 103 7 is_stmt 1 view .LVU446
 1897 00a0 4048     		ldr	r0, .L182+16
 1898              	.LVL153:
 103:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 1899              		.loc 3 103 7 is_stmt 0 view .LVU447
 1900 00a2 FFF7FEFF 		bl	fn_circBuffPut
 1901              	.LVL154:
 104:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 1902              		.loc 3 104 7 is_stmt 1 view .LVU448
 1903 00a6 4048     		ldr	r0, .L182+20
 1904 00a8 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1905              	.LVL155:
 105:Source/m3.c   ****       break;
 1906              		.loc 3 105 7 view .LVU449
 1907 00ac F7E7     		b	.L151
 1908              	.LVL156:
 1909              	.L170:
 107:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 1910              		.loc 3 107 7 view .LVU450
 1911 00ae 3D48     		ldr	r0, .L182+16
 1912              	.LVL157:
 107:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 1913              		.loc 3 107 7 is_stmt 0 view .LVU451
 1914 00b0 FFF7FEFF 		bl	fn_circBuffPut
 1915              	.LVL158:
 108:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 1916              		.loc 3 108 7 is_stmt 1 view .LVU452
 1917 00b4 3C48     		ldr	r0, .L182+20
 1918 00b6 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1919              	.LVL159:
 109:Source/m3.c   ****       break;
 1920              		.loc 3 109 7 view .LVU453
 1921 00ba F0E7     		b	.L151
 1922              	.LVL160:
 1923              	.L169:
 111:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 1924              		.loc 3 111 7 view .LVU454
 1925 00bc 3948     		ldr	r0, .L182+16
 1926              	.LVL161:
ARM GAS  m3.s 			page 47


 111:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 1927              		.loc 3 111 7 is_stmt 0 view .LVU455
 1928 00be FFF7FEFF 		bl	fn_circBuffPut
 1929              	.LVL162:
 112:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 1930              		.loc 3 112 7 is_stmt 1 view .LVU456
 1931 00c2 3948     		ldr	r0, .L182+20
 1932 00c4 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1933              	.LVL163:
 113:Source/m3.c   ****       break;
 1934              		.loc 3 113 7 view .LVU457
 1935 00c8 E9E7     		b	.L151
 1936              	.LVL164:
 1937              	.L168:
 115:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 1938              		.loc 3 115 7 view .LVU458
 1939 00ca 3648     		ldr	r0, .L182+16
 1940              	.LVL165:
 115:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 1941              		.loc 3 115 7 is_stmt 0 view .LVU459
 1942 00cc FFF7FEFF 		bl	fn_circBuffPut
 1943              	.LVL166:
 116:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 1944              		.loc 3 116 7 is_stmt 1 view .LVU460
 1945              	.LBB5:
 116:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 1946              		.loc 3 116 11 view .LVU461
 116:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 1947              		.loc 3 116 15 is_stmt 0 view .LVU462
 1948 00d0 0024     		movs	r4, #0
 116:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 1949              		.loc 3 116 7 view .LVU463
 1950 00d2 05E0     		b	.L173
 1951              	.LVL167:
 1952              	.L174:
 117:Source/m3.c   ****         fn_circBuffPut(&st_circularBufferOutput, ac_period[i]);  
 1953              		.loc 3 117 9 is_stmt 1 discriminator 3 view .LVU464
 1954 00d4 324B     		ldr	r3, .L182+12
 1955 00d6 195D     		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 1956 00d8 3248     		ldr	r0, .L182+16
 1957 00da FFF7FEFF 		bl	fn_circBuffPut
 1958              	.LVL168:
 116:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 1959              		.loc 3 116 29 discriminator 3 view .LVU465
 116:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 1960              		.loc 3 116 30 is_stmt 0 discriminator 3 view .LVU466
 1961 00de 0134     		adds	r4, r4, #1
 1962              	.LVL169:
 1963              	.L173:
 116:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 1964              		.loc 3 116 22 is_stmt 1 discriminator 1 view .LVU467
 116:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 1965              		.loc 3 116 7 is_stmt 0 discriminator 1 view .LVU468
 1966 00e0 032C     		cmp	r4, #3
 1967 00e2 F7DD     		ble	.L174
 1968              	.LBE5:
 118:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
ARM GAS  m3.s 			page 48


 1969              		.loc 3 118 7 is_stmt 1 view .LVU469
 1970 00e4 3048     		ldr	r0, .L182+20
 1971 00e6 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1972              	.LVL170:
 119:Source/m3.c   ****       u8_case = 0;
 1973              		.loc 3 119 7 view .LVU470
 119:Source/m3.c   ****       u8_case = 0;
 1974              		.loc 3 119 15 is_stmt 0 view .LVU471
 1975 00ea 2A4B     		ldr	r3, .L182
 1976 00ec 0022     		movs	r2, #0
 1977 00ee 1A70     		strb	r2, [r3]
 120:Source/m3.c   ****       break;
 1978              		.loc 3 120 7 is_stmt 1 view .LVU472
 1979 00f0 D5E7     		b	.L151
 1980              	.LVL171:
 1981              	.L167:
 122:Source/m3.c   ****       ++u8_case;
 1982              		.loc 3 122 7 view .LVU473
 1983 00f2 0133     		adds	r3, r3, #1
 1984 00f4 274A     		ldr	r2, .L182
 1985 00f6 1370     		strb	r3, [r2]
 123:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 1986              		.loc 3 123 7 view .LVU474
 1987 00f8 2A48     		ldr	r0, .L182+16
 1988              	.LVL172:
 123:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 1989              		.loc 3 123 7 is_stmt 0 view .LVU475
 1990 00fa FFF7FEFF 		bl	fn_circBuffPut
 1991              	.LVL173:
 124:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 1992              		.loc 3 124 7 is_stmt 1 view .LVU476
 1993 00fe 2A48     		ldr	r0, .L182+20
 1994 0100 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1995              	.LVL174:
 125:Source/m3.c   ****       break;
 1996              		.loc 3 125 7 view .LVU477
 1997 0104 CBE7     		b	.L151
 1998              	.LVL175:
 1999              	.L166:
 127:Source/m3.c   ****       ++u8_case;
 2000              		.loc 3 127 7 view .LVU478
 2001 0106 0133     		adds	r3, r3, #1
 2002 0108 224A     		ldr	r2, .L182
 2003 010a 1370     		strb	r3, [r2]
 128:Source/m3.c   ****       ac_period[0] = c_toHandle;
 2004              		.loc 3 128 7 view .LVU479
 128:Source/m3.c   ****       ac_period[0] = c_toHandle;
 2005              		.loc 3 128 20 is_stmt 0 view .LVU480
 2006 010c 244B     		ldr	r3, .L182+12
 2007 010e 1970     		strb	r1, [r3]
 129:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 2008              		.loc 3 129 7 is_stmt 1 view .LVU481
 2009 0110 2448     		ldr	r0, .L182+16
 2010              	.LVL176:
 129:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 2011              		.loc 3 129 7 is_stmt 0 view .LVU482
 2012 0112 FFF7FEFF 		bl	fn_circBuffPut
ARM GAS  m3.s 			page 49


 2013              	.LVL177:
 130:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 2014              		.loc 3 130 7 is_stmt 1 view .LVU483
 2015 0116 2448     		ldr	r0, .L182+20
 2016 0118 FFF7FEFF 		bl	usart_enable_tx_interrupt
 2017              	.LVL178:
 131:Source/m3.c   ****       break;
 2018              		.loc 3 131 7 view .LVU484
 2019 011c BFE7     		b	.L151
 2020              	.LVL179:
 2021              	.L165:
 133:Source/m3.c   ****       ++u8_case;
 2022              		.loc 3 133 7 view .LVU485
 2023 011e 0133     		adds	r3, r3, #1
 2024 0120 1C4A     		ldr	r2, .L182
 2025 0122 1370     		strb	r3, [r2]
 134:Source/m3.c   ****       ac_period[1] = c_toHandle;
 2026              		.loc 3 134 7 view .LVU486
 134:Source/m3.c   ****       ac_period[1] = c_toHandle;
 2027              		.loc 3 134 20 is_stmt 0 view .LVU487
 2028 0124 1E4B     		ldr	r3, .L182+12
 2029 0126 5970     		strb	r1, [r3, #1]
 135:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 2030              		.loc 3 135 7 is_stmt 1 view .LVU488
 2031 0128 1E48     		ldr	r0, .L182+16
 2032              	.LVL180:
 135:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 2033              		.loc 3 135 7 is_stmt 0 view .LVU489
 2034 012a FFF7FEFF 		bl	fn_circBuffPut
 2035              	.LVL181:
 136:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 2036              		.loc 3 136 7 is_stmt 1 view .LVU490
 2037 012e 1E48     		ldr	r0, .L182+20
 2038 0130 FFF7FEFF 		bl	usart_enable_tx_interrupt
 2039              	.LVL182:
 137:Source/m3.c   ****       break;
 2040              		.loc 3 137 7 view .LVU491
 2041 0134 B3E7     		b	.L151
 2042              	.LVL183:
 2043              	.L164:
 139:Source/m3.c   ****       ++u8_case;
 2044              		.loc 3 139 7 view .LVU492
 2045 0136 0133     		adds	r3, r3, #1
 2046 0138 164A     		ldr	r2, .L182
 2047 013a 1370     		strb	r3, [r2]
 140:Source/m3.c   ****       ac_period[2] = c_toHandle;
 2048              		.loc 3 140 7 view .LVU493
 140:Source/m3.c   ****       ac_period[2] = c_toHandle;
 2049              		.loc 3 140 20 is_stmt 0 view .LVU494
 2050 013c 184B     		ldr	r3, .L182+12
 2051 013e 9970     		strb	r1, [r3, #2]
 141:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 2052              		.loc 3 141 7 is_stmt 1 view .LVU495
 2053 0140 1848     		ldr	r0, .L182+16
 2054              	.LVL184:
 141:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 2055              		.loc 3 141 7 is_stmt 0 view .LVU496
ARM GAS  m3.s 			page 50


 2056 0142 FFF7FEFF 		bl	fn_circBuffPut
 2057              	.LVL185:
 142:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 2058              		.loc 3 142 7 is_stmt 1 view .LVU497
 2059 0146 1848     		ldr	r0, .L182+20
 2060 0148 FFF7FEFF 		bl	usart_enable_tx_interrupt
 2061              	.LVL186:
 143:Source/m3.c   ****       break;
 2062              		.loc 3 143 7 view .LVU498
 2063 014c A7E7     		b	.L151
 2064              	.LVL187:
 2065              	.L163:
 145:Source/m3.c   ****       u8_case = 0;
 2066              		.loc 3 145 7 view .LVU499
 145:Source/m3.c   ****       u8_case = 0;
 2067              		.loc 3 145 15 is_stmt 0 view .LVU500
 2068 014e 0024     		movs	r4, #0
 2069 0150 104B     		ldr	r3, .L182
 2070 0152 1C70     		strb	r4, [r3]
 146:Source/m3.c   ****       ac_period[3] = c_toHandle;
 2071              		.loc 3 146 7 is_stmt 1 view .LVU501
 146:Source/m3.c   ****       ac_period[3] = c_toHandle;
 2072              		.loc 3 146 20 is_stmt 0 view .LVU502
 2073 0154 124D     		ldr	r5, .L182+12
 2074 0156 E970     		strb	r1, [r5, #3]
 147:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 2075              		.loc 3 147 7 is_stmt 1 view .LVU503
 2076 0158 1248     		ldr	r0, .L182+16
 2077              	.LVL188:
 147:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 2078              		.loc 3 147 7 is_stmt 0 view .LVU504
 2079 015a FFF7FEFF 		bl	fn_circBuffPut
 2080              	.LVL189:
 148:Source/m3.c   ****       fn_commitPeriod(ac_period);
 2081              		.loc 3 148 7 is_stmt 1 view .LVU505
 2082 015e 2846     		mov	r0, r5
 2083 0160 FFF7FEFF 		bl	fn_commitPeriod
 2084              	.LVL190:
 149:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 2085              		.loc 3 149 7 view .LVU506
 2086              	.LBB6:
 149:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 2087              		.loc 3 149 11 view .LVU507
 149:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 2088              		.loc 3 149 15 is_stmt 0 view .LVU508
 2089 0164 2346     		mov	r3, r4
 149:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 2090              		.loc 3 149 7 view .LVU509
 2091 0166 04E0     		b	.L175
 2092              	.LVL191:
 2093              	.L176:
 150:Source/m3.c   ****         ac_lastPeriod[i] = ac_period[i];
 2094              		.loc 3 150 9 is_stmt 1 discriminator 3 view .LVU510
 150:Source/m3.c   ****         ac_lastPeriod[i] = ac_period[i];
 2095              		.loc 3 150 37 is_stmt 0 discriminator 3 view .LVU511
 2096 0168 0D4A     		ldr	r2, .L182+12
 2097 016a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
ARM GAS  m3.s 			page 51


 150:Source/m3.c   ****         ac_lastPeriod[i] = ac_period[i];
 2098              		.loc 3 150 26 discriminator 3 view .LVU512
 2099 016c 0B4A     		ldr	r2, .L182+8
 2100 016e D154     		strb	r1, [r2, r3]
 149:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 2101              		.loc 3 149 29 is_stmt 1 discriminator 3 view .LVU513
 149:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 2102              		.loc 3 149 30 is_stmt 0 discriminator 3 view .LVU514
 2103 0170 0133     		adds	r3, r3, #1
 2104              	.LVL192:
 2105              	.L175:
 149:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 2106              		.loc 3 149 22 is_stmt 1 discriminator 1 view .LVU515
 149:Source/m3.c   ****       for(int i = 0; i < 4; i++)
 2107              		.loc 3 149 7 is_stmt 0 discriminator 1 view .LVU516
 2108 0172 032B     		cmp	r3, #3
 2109 0174 F8DD     		ble	.L176
 2110              	.LBE6:
 151:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 2111              		.loc 3 151 7 is_stmt 1 view .LVU517
 2112 0176 0C48     		ldr	r0, .L182+20
 2113 0178 FFF7FEFF 		bl	usart_enable_tx_interrupt
 2114              	.LVL193:
 152:Source/m3.c   ****       break;
 2115              		.loc 3 152 7 view .LVU518
 2116 017c 8FE7     		b	.L151
 2117              	.LVL194:
 2118              	.L161:
 154:Source/m3.c   ****       u8_case = 3;
 2119              		.loc 3 154 7 view .LVU519
 154:Source/m3.c   ****       u8_case = 3;
 2120              		.loc 3 154 15 is_stmt 0 view .LVU520
 2121 017e 054B     		ldr	r3, .L182
 2122 0180 0322     		movs	r2, #3
 2123 0182 1A70     		strb	r2, [r3]
 155:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 2124              		.loc 3 155 7 is_stmt 1 view .LVU521
 2125 0184 0748     		ldr	r0, .L182+16
 2126              	.LVL195:
 155:Source/m3.c   ****       fn_circBuffPut(&st_circularBufferOutput, c_toHandle);
 2127              		.loc 3 155 7 is_stmt 0 view .LVU522
 2128 0186 FFF7FEFF 		bl	fn_circBuffPut
 2129              	.LVL196:
 156:Source/m3.c   ****       usart_enable_tx_interrupt(USART_CONSOLE);
 2130              		.loc 3 156 7 is_stmt 1 view .LVU523
 2131 018a 0748     		ldr	r0, .L182+20
 2132 018c FFF7FEFF 		bl	usart_enable_tx_interrupt
 2133              	.LVL197:
 157:Source/m3.c   ****       break;
 2134              		.loc 3 157 7 view .LVU524
 2135 0190 85E7     		b	.L151
 2136              	.L183:
 2137 0192 00BF     		.align	2
 2138              	.L182:
 2139 0194 00000000 		.word	.LANCHOR17
 2140 0198 00000000 		.word	.LC9
 2141 019c 00000000 		.word	.LANCHOR18
ARM GAS  m3.s 			page 52


 2142 01a0 00000000 		.word	.LANCHOR19
 2143 01a4 00000000 		.word	.LANCHOR15
 2144 01a8 00440040 		.word	1073759232
 2145              		.cfi_endproc
 2146              	.LFE24:
 2148              		.section	.text.main,"ax",%progbits
 2149              		.align	1
 2150              		.global	main
 2151              		.syntax unified
 2152              		.thumb
 2153              		.thumb_func
 2155              	main:
 2156              	.LFB23:
  42:Source/m3.c   **** int main(void)  {
 2157              		.loc 3 42 16 view -0
 2158              		.cfi_startproc
 2159              		@ Volatile: function does not return.
 2160              		@ args = 0, pretend = 0, frame = 8
 2161              		@ frame_needed = 0, uses_anonymous_args = 0
 2162 0000 00B5     		push	{lr}
 2163              	.LCFI36:
 2164              		.cfi_def_cfa_offset 4
 2165              		.cfi_offset 14, -4
 2166 0002 83B0     		sub	sp, sp, #12
 2167              	.LCFI37:
 2168              		.cfi_def_cfa_offset 16
  44:Source/m3.c   ****   fn_circBuffInit(&st_circularBufferInput, bufferI, BUFFER_SIZE);
 2169              		.loc 3 44 3 view .LVU526
 2170 0004 4FF48072 		mov	r2, #256
 2171 0008 1A49     		ldr	r1, .L188
 2172 000a 1B48     		ldr	r0, .L188+4
 2173 000c FFF7FEFF 		bl	fn_circBuffInit
 2174              	.LVL198:
  45:Source/m3.c   ****   fn_circBuffInit(&st_circularBufferOutput, bufferO, BUFFER_SIZE);
 2175              		.loc 3 45 3 view .LVU527
 2176 0010 4FF48072 		mov	r2, #256
 2177 0014 1949     		ldr	r1, .L188+8
 2178 0016 1A48     		ldr	r0, .L188+12
 2179 0018 FFF7FEFF 		bl	fn_circBuffInit
 2180              	.LVL199:
  48:Source/m3.c   ****   fn_clock_setup();
 2181              		.loc 3 48 3 view .LVU528
 2182 001c FFF7FEFF 		bl	fn_clock_setup
 2183              	.LVL200:
  49:Source/m3.c   ****   fn_usart_setup(); 
 2184              		.loc 3 49 3 view .LVU529
 2185 0020 FFF7FEFF 		bl	fn_usart_setup
 2186              	.LVL201:
  50:Source/m3.c   ****   fn_setup_tim2();
 2187              		.loc 3 50 3 view .LVU530
 2188 0024 FFF7FEFF 		bl	fn_setup_tim2
 2189              	.LVL202:
  52:Source/m3.c   ****   gpio_mode_setup(LED2_GPIO_Port, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, LED2_Pin);
 2190              		.loc 3 52 3 view .LVU531
 2191 0028 2023     		movs	r3, #32
 2192 002a 0122     		movs	r2, #1
 2193 002c 1146     		mov	r1, r2
ARM GAS  m3.s 			page 53


 2194 002e 4FF09040 		mov	r0, #1207959552
 2195 0032 FFF7FEFF 		bl	gpio_mode_setup
 2196              	.LVL203:
  53:Source/m3.c   ****   gpio_mode_setup(BUT1_GPIO_Port, GPIO_MODE_INPUT, GPIO_PUPD_NONE, BUT1_Pin);
 2197              		.loc 3 53 3 view .LVU532
 2198 0036 4FF40053 		mov	r3, #8192
 2199 003a 0022     		movs	r2, #0
 2200 003c 1146     		mov	r1, r2
 2201 003e 1148     		ldr	r0, .L188+16
 2202 0040 FFF7FEFF 		bl	gpio_mode_setup
 2203              	.LVL204:
  55:Source/m3.c   ****   LED_OFF;
 2204              		.loc 3 55 3 view .LVU533
 2205 0044 2021     		movs	r1, #32
 2206 0046 4FF09040 		mov	r0, #1207959552
 2207 004a FFF7FEFF 		bl	gpio_clear
 2208              	.LVL205:
 2209              	.L185:
  57:Source/m3.c   ****   while(true){
 2210              		.loc 3 57 3 view .LVU534
  58:Source/m3.c   ****     if(!fn_circBuffEmpty(&st_circularBufferInput)){
 2211              		.loc 3 58 5 view .LVU535
  58:Source/m3.c   ****     if(!fn_circBuffEmpty(&st_circularBufferInput)){
 2212              		.loc 3 58 9 is_stmt 0 view .LVU536
 2213 004e 0A48     		ldr	r0, .L188+4
 2214 0050 FFF7FEFF 		bl	fn_circBuffEmpty
 2215              	.LVL206:
  58:Source/m3.c   ****     if(!fn_circBuffEmpty(&st_circularBufferInput)){
 2216              		.loc 3 58 7 view .LVU537
 2217 0054 0028     		cmp	r0, #0
 2218 0056 FAD1     		bne	.L185
 2219              	.LBB7:
  59:Source/m3.c   ****       char c_charToSend = '\0';
 2220              		.loc 3 59 7 is_stmt 1 view .LVU538
  59:Source/m3.c   ****       char c_charToSend = '\0';
 2221              		.loc 3 59 12 is_stmt 0 view .LVU539
 2222 0058 0023     		movs	r3, #0
 2223 005a 8DF80730 		strb	r3, [sp, #7]
  60:Source/m3.c   ****       fn_circBuffGet(&st_circularBufferInput, &c_charToSend);
 2224              		.loc 3 60 7 is_stmt 1 view .LVU540
 2225 005e 0DF10701 		add	r1, sp, #7
 2226 0062 0548     		ldr	r0, .L188+4
 2227 0064 FFF7FEFF 		bl	fn_circBuffGet
 2228              	.LVL207:
  61:Source/m3.c   ****       fn_handleChar(c_charToSend);
 2229              		.loc 3 61 7 view .LVU541
 2230 0068 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2231 006c FFF7FEFF 		bl	fn_handleChar
 2232              	.LVL208:
 2233 0070 EDE7     		b	.L185
 2234              	.L189:
 2235 0072 00BF     		.align	2
 2236              	.L188:
 2237 0074 00000000 		.word	.LANCHOR20
 2238 0078 00000000 		.word	.LANCHOR14
 2239 007c 00000000 		.word	.LANCHOR21
 2240 0080 00000000 		.word	.LANCHOR15
ARM GAS  m3.s 			page 54


 2241 0084 00080048 		.word	1207961600
 2242              	.LBE7:
 2243              		.cfi_endproc
 2244              	.LFE23:
 2246              		.global	u16_globalPeriod
 2247              		.global	bufferO
 2248              		.global	bufferI
 2249              		.global	st_circularBufferOutput
 2250              		.global	st_circularBufferInput
 2251              		.global	ac_CIPHER
 2252              		.section	.bss.bufferI,"aw",%nobits
 2253              		.align	2
 2254              		.set	.LANCHOR20,. + 0
 2257              	bufferI:
 2258 0000 00000000 		.space	256
 2258      00000000 
 2258      00000000 
 2258      00000000 
 2258      00000000 
 2259              		.section	.bss.bufferO,"aw",%nobits
 2260              		.align	2
 2261              		.set	.LANCHOR21,. + 0
 2264              	bufferO:
 2265 0000 00000000 		.space	256
 2265      00000000 
 2265      00000000 
 2265      00000000 
 2265      00000000 
 2266              		.section	.bss.st_circularBufferInput,"aw",%nobits
 2267              		.align	2
 2268              		.set	.LANCHOR14,. + 0
 2271              	st_circularBufferInput:
 2272 0000 00000000 		.space	20
 2272      00000000 
 2272      00000000 
 2272      00000000 
 2272      00000000 
 2273              		.section	.bss.st_circularBufferOutput,"aw",%nobits
 2274              		.align	2
 2275              		.set	.LANCHOR15,. + 0
 2278              	st_circularBufferOutput:
 2279 0000 00000000 		.space	20
 2279      00000000 
 2279      00000000 
 2279      00000000 
 2279      00000000 
 2280              		.section	.bss.u8_case.2,"aw",%nobits
 2281              		.set	.LANCHOR17,. + 0
 2284              	u8_case.2:
 2285 0000 00       		.space	1
 2286              		.section	.bss.u8_cipherDPosition.3,"aw",%nobits
 2287              		.set	.LANCHOR13,. + 0
 2290              	u8_cipherDPosition.3:
 2291 0000 00       		.space	1
 2292              		.section	.bss.u8_cipherEPosition.4,"aw",%nobits
 2293              		.set	.LANCHOR11,. + 0
 2296              	u8_cipherEPosition.4:
ARM GAS  m3.s 			page 55


 2297 0000 00       		.space	1
 2298              		.section	.data.ac_lastPeriod.1,"aw"
 2299              		.align	2
 2300              		.set	.LANCHOR18,. + 0
 2303              	ac_lastPeriod.1:
 2304 0000 31303030 		.ascii	"1000"
 2305              		.section	.data.ac_period.0,"aw"
 2306              		.align	2
 2307              		.set	.LANCHOR19,. + 0
 2310              	ac_period.0:
 2311 0000 31303030 		.ascii	"1000"
 2312              		.section	.data.u16_globalPeriod,"aw"
 2313              		.align	1
 2314              		.set	.LANCHOR16,. + 0
 2317              	u16_globalPeriod:
 2318 0000 E803     		.short	1000
 2319              		.section	.rodata.__func__.10,"a"
 2320              		.align	2
 2321              		.set	.LANCHOR7,. + 0
 2324              	__func__.10:
 2325 0000 666E5F63 		.ascii	"fn_circBuffSize\000"
 2325      69726342 
 2325      75666653 
 2325      697A6500 
 2326              		.section	.rodata.__func__.11,"a"
 2327              		.align	2
 2328              		.set	.LANCHOR6,. + 0
 2331              	__func__.11:
 2332 0000 666E5F63 		.ascii	"fn_circBuffCapacity\000"
 2332      69726342 
 2332      75666643 
 2332      61706163 
 2332      69747900 
 2333              		.section	.rodata.__func__.12,"a"
 2334              		.align	2
 2335              		.set	.LANCHOR5,. + 0
 2338              	__func__.12:
 2339 0000 666E5F63 		.ascii	"fn_circBuffFull\000"
 2339      69726342 
 2339      75666646 
 2339      756C6C00 
 2340              		.section	.rodata.__func__.13,"a"
 2341              		.align	2
 2342              		.set	.LANCHOR4,. + 0
 2345              	__func__.13:
 2346 0000 666E5F63 		.ascii	"fn_circBuffInit\000"
 2346      69726342 
 2346      75666649 
 2346      6E697400 
 2347              		.section	.rodata.__func__.14,"a"
 2348              		.align	2
 2349              		.set	.LANCHOR3,. + 0
 2352              	__func__.14:
 2353 0000 666E5F63 		.ascii	"fn_circBuffEmpty\000"
 2353      69726342 
 2353      75666645 
 2353      6D707479 
ARM GAS  m3.s 			page 56


 2353      00
 2354              		.section	.rodata.__func__.15,"a"
 2355              		.align	2
 2356              		.set	.LANCHOR2,. + 0
 2359              	__func__.15:
 2360 0000 666E5F63 		.ascii	"fn_circBuffReset\000"
 2360      69726342 
 2360      75666652 
 2360      65736574 
 2360      00
 2361              		.section	.rodata.__func__.5,"a"
 2362              		.align	2
 2363              		.set	.LANCHOR10,. + 0
 2366              	__func__.5:
 2367 0000 666E5F63 		.ascii	"fn_circBuffGetMostRecent\000"
 2367      69726342 
 2367      75666647 
 2367      65744D6F 
 2367      73745265 
 2368              		.section	.rodata.__func__.6,"a"
 2369              		.align	2
 2370              		.set	.LANCHOR1,. + 0
 2373              	__func__.6:
 2374 0000 666E5F72 		.ascii	"fn_retreatPointer\000"
 2374      65747265 
 2374      6174506F 
 2374      696E7465 
 2374      7200
 2375              		.section	.rodata.__func__.7,"a"
 2376              		.align	2
 2377              		.set	.LANCHOR9,. + 0
 2380              	__func__.7:
 2381 0000 666E5F63 		.ascii	"fn_circBuffGet\000"
 2381      69726342 
 2381      75666647 
 2381      657400
 2382              		.section	.rodata.__func__.8,"a"
 2383              		.align	2
 2384              		.set	.LANCHOR0,. + 0
 2387              	__func__.8:
 2388 0000 666E5F61 		.ascii	"fn_advancePointer\000"
 2388      6476616E 
 2388      6365506F 
 2388      696E7465 
 2388      7200
 2389              		.section	.rodata.__func__.9,"a"
 2390              		.align	2
 2391              		.set	.LANCHOR8,. + 0
 2394              	__func__.9:
 2395 0000 666E5F63 		.ascii	"fn_circBuffPut\000"
 2395      69726342 
 2395      75666650 
 2395      757400
 2396              		.section	.rodata.ac_CIPHER,"a"
 2397              		.align	2
 2398              		.set	.LANCHOR12,. + 0
 2401              	ac_CIPHER:
ARM GAS  m3.s 			page 57


 2402 0000 54454E4E 		.ascii	"TENNESSEETECH"
 2402      45535345 
 2402      45544543 
 2402      48
 2403              		.text
 2404              	.Letext0:
 2405              		.file 4 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eabi
 2406              		.file 5 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eabi
 2407              		.file 6 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/li
 2408              		.file 7 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eabi
 2409              		.file 8 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eabi
 2410              		.file 9 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/li
 2411              		.file 10 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/l
 2412              		.file 11 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/l
 2413              		.file 12 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eab
 2414              		.file 13 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/l
 2415              		.file 14 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/l
 2416              		.file 15 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/l
 2417              		.file 16 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eab
 2418              		.file 17 "<built-in>"
ARM GAS  m3.s 			page 58


DEFINED SYMBOLS
                            *ABS*:0000000000000000 m3.c
                m3.s:20     .rodata.fn_advancePointer.str1.4:0000000000000000 $d
                m3.s:27     .text.fn_advancePointer:0000000000000000 $t
                m3.s:32     .text.fn_advancePointer:0000000000000000 fn_advancePointer
                m3.s:120    .text.fn_advancePointer:000000000000004c $d
                m3.s:127    .text.fn_retreatPointer:0000000000000000 $t
                m3.s:132    .text.fn_retreatPointer:0000000000000000 fn_retreatPointer
                m3.s:187    .text.fn_retreatPointer:0000000000000028 $d
                m3.s:194    .text.fn_circBuffReset:0000000000000000 $t
                m3.s:200    .text.fn_circBuffReset:0000000000000000 fn_circBuffReset
                m3.s:241    .text.fn_circBuffReset:000000000000001c $d
                m3.s:248    .text.fn_circBuffEmpty:0000000000000000 $t
                m3.s:254    .text.fn_circBuffEmpty:0000000000000000 fn_circBuffEmpty
                m3.s:315    .text.fn_circBuffEmpty:0000000000000028 $d
                m3.s:322    .rodata.fn_circBuffInit.str1.4:0000000000000000 $d
                m3.s:329    .text.fn_circBuffInit:0000000000000000 $t
                m3.s:335    .text.fn_circBuffInit:0000000000000000 fn_circBuffInit
                m3.s:400    .text.fn_circBuffInit:0000000000000034 $d
                m3.s:408    .text.fn_circBuffFull:0000000000000000 $t
                m3.s:414    .text.fn_circBuffFull:0000000000000000 fn_circBuffFull
                m3.s:450    .text.fn_circBuffFull:0000000000000014 $d
                m3.s:457    .text.fn_circBuffCapacity:0000000000000000 $t
                m3.s:463    .text.fn_circBuffCapacity:0000000000000000 fn_circBuffCapacity
                m3.s:499    .text.fn_circBuffCapacity:0000000000000014 $d
                m3.s:506    .text.fn_circBuffSize:0000000000000000 $t
                m3.s:512    .text.fn_circBuffSize:0000000000000000 fn_circBuffSize
                m3.s:579    .text.fn_circBuffSize:000000000000002c $d
                m3.s:586    .rodata.fn_circBuffPut.str1.4:0000000000000000 $d
                m3.s:590    .text.fn_circBuffPut:0000000000000000 $t
                m3.s:596    .text.fn_circBuffPut:0000000000000000 fn_circBuffPut
                m3.s:645    .text.fn_circBuffPut:0000000000000024 $d
                m3.s:652    .rodata.fn_circBuffGet.str1.4:0000000000000000 $d
                m3.s:659    .text.fn_circBuffGet:0000000000000000 $t
                m3.s:665    .text.fn_circBuffGet:0000000000000000 fn_circBuffGet
                m3.s:764    .text.fn_circBuffGet:000000000000004c $d
                m3.s:773    .rodata.fn_circBuffGetMostRecent.str1.4:0000000000000000 $d
                m3.s:777    .text.fn_circBuffGetMostRecent:0000000000000000 $t
                m3.s:783    .text.fn_circBuffGetMostRecent:0000000000000000 fn_circBuffGetMostRecent
                m3.s:881    .text.fn_circBuffGetMostRecent:0000000000000044 $d
                m3.s:888    .text.fn_convertToCaps:0000000000000000 $t
                m3.s:894    .text.fn_convertToCaps:0000000000000000 fn_convertToCaps
                m3.s:924    .text.fn_encryptText:0000000000000000 $t
                m3.s:930    .text.fn_encryptText:0000000000000000 fn_encryptText
                m3.s:999    .text.fn_encryptText:0000000000000040 $d
                m3.s:1006   .text.fn_decryptText:0000000000000000 $t
                m3.s:1012   .text.fn_decryptText:0000000000000000 fn_decryptText
                m3.s:1080   .text.fn_decryptText:0000000000000040 $d
                m3.s:1087   .text.fn_clock_setup:0000000000000000 $t
                m3.s:1093   .text.fn_clock_setup:0000000000000000 fn_clock_setup
                m3.s:1152   .text.fn_usart_setup:0000000000000000 $t
                m3.s:1158   .text.fn_usart_setup:0000000000000000 fn_usart_setup
                m3.s:1230   .text.fn_usart_setup:0000000000000064 $d
                m3.s:1235   .text.usart2_isr:0000000000000000 $t
                m3.s:1241   .text.usart2_isr:0000000000000000 usart2_isr
                m3.s:1343   .text.usart2_isr:000000000000007c $d
                m3.s:1350   .text.fn_setup_tim2:0000000000000000 $t
ARM GAS  m3.s 			page 59


                m3.s:1356   .text.fn_setup_tim2:0000000000000000 fn_setup_tim2
                m3.s:1400   .text.tim2_isr:0000000000000000 $t
                m3.s:1406   .text.tim2_isr:0000000000000000 tim2_isr
                m3.s:1450   .text.tim2_isr:0000000000000034 $d
                m3.s:1455   .text._write:0000000000000000 $t
                m3.s:1461   .text._write:0000000000000000 _write
                m3.s:1540   .text._write:0000000000000040 $d
                m3.s:1545   .text.fn_encDecChar:0000000000000000 $t
                m3.s:1551   .text.fn_encDecChar:0000000000000000 fn_encDecChar
                m3.s:1620   .text.fn_encDecChar:0000000000000050 $d
                m3.s:1627   .rodata.fn_commitPeriod.str1.4:0000000000000000 $d
                m3.s:1631   .text.fn_commitPeriod:0000000000000000 $t
                m3.s:1637   .text.fn_commitPeriod:0000000000000000 fn_commitPeriod
                m3.s:1706   .text.fn_commitPeriod:000000000000003c $d
                m3.s:1712   .rodata.fn_handleChar.str1.4:0000000000000000 $d
                m3.s:1716   .text.fn_handleChar:0000000000000000 $t
                m3.s:1722   .text.fn_handleChar:0000000000000000 fn_handleChar
                m3.s:1781   .text.fn_handleChar:000000000000002e $d
                m3.s:2139   .text.fn_handleChar:0000000000000194 $d
                m3.s:2149   .text.main:0000000000000000 $t
                m3.s:2155   .text.main:0000000000000000 main
                m3.s:2237   .text.main:0000000000000074 $d
                m3.s:2317   .data.u16_globalPeriod:0000000000000000 u16_globalPeriod
                m3.s:2264   .bss.bufferO:0000000000000000 bufferO
                m3.s:2257   .bss.bufferI:0000000000000000 bufferI
                m3.s:2278   .bss.st_circularBufferOutput:0000000000000000 st_circularBufferOutput
                m3.s:2271   .bss.st_circularBufferInput:0000000000000000 st_circularBufferInput
                m3.s:2401   .rodata.ac_CIPHER:0000000000000000 ac_CIPHER
                m3.s:2253   .bss.bufferI:0000000000000000 $d
                m3.s:2260   .bss.bufferO:0000000000000000 $d
                m3.s:2267   .bss.st_circularBufferInput:0000000000000000 $d
                m3.s:2274   .bss.st_circularBufferOutput:0000000000000000 $d
                m3.s:2284   .bss.u8_case.2:0000000000000000 u8_case.2
                m3.s:2285   .bss.u8_case.2:0000000000000000 $d
                m3.s:2290   .bss.u8_cipherDPosition.3:0000000000000000 u8_cipherDPosition.3
                m3.s:2291   .bss.u8_cipherDPosition.3:0000000000000000 $d
                m3.s:2296   .bss.u8_cipherEPosition.4:0000000000000000 u8_cipherEPosition.4
                m3.s:2297   .bss.u8_cipherEPosition.4:0000000000000000 $d
                m3.s:2299   .data.ac_lastPeriod.1:0000000000000000 $d
                m3.s:2303   .data.ac_lastPeriod.1:0000000000000000 ac_lastPeriod.1
                m3.s:2306   .data.ac_period.0:0000000000000000 $d
                m3.s:2310   .data.ac_period.0:0000000000000000 ac_period.0
                m3.s:2313   .data.u16_globalPeriod:0000000000000000 $d
                m3.s:2320   .rodata.__func__.10:0000000000000000 $d
                m3.s:2324   .rodata.__func__.10:0000000000000000 __func__.10
                m3.s:2327   .rodata.__func__.11:0000000000000000 $d
                m3.s:2331   .rodata.__func__.11:0000000000000000 __func__.11
                m3.s:2334   .rodata.__func__.12:0000000000000000 $d
                m3.s:2338   .rodata.__func__.12:0000000000000000 __func__.12
                m3.s:2341   .rodata.__func__.13:0000000000000000 $d
                m3.s:2345   .rodata.__func__.13:0000000000000000 __func__.13
                m3.s:2348   .rodata.__func__.14:0000000000000000 $d
                m3.s:2352   .rodata.__func__.14:0000000000000000 __func__.14
                m3.s:2355   .rodata.__func__.15:0000000000000000 $d
                m3.s:2359   .rodata.__func__.15:0000000000000000 __func__.15
                m3.s:2362   .rodata.__func__.5:0000000000000000 $d
                m3.s:2366   .rodata.__func__.5:0000000000000000 __func__.5
ARM GAS  m3.s 			page 60


                m3.s:2369   .rodata.__func__.6:0000000000000000 $d
                m3.s:2373   .rodata.__func__.6:0000000000000000 __func__.6
                m3.s:2376   .rodata.__func__.7:0000000000000000 $d
                m3.s:2380   .rodata.__func__.7:0000000000000000 __func__.7
                m3.s:2383   .rodata.__func__.8:0000000000000000 $d
                m3.s:2387   .rodata.__func__.8:0000000000000000 __func__.8
                m3.s:2390   .rodata.__func__.9:0000000000000000 $d
                m3.s:2394   .rodata.__func__.9:0000000000000000 __func__.9
                m3.s:2397   .rodata.ac_CIPHER:0000000000000000 $d
                m3.s:1792   .text.fn_handleChar:0000000000000039 $d
                m3.s:1792   .text.fn_handleChar:000000000000003a $t

UNDEFINED SYMBOLS
__assert_func
rcc_osc_on
rcc_set_main_pll
rcc_periph_clock_enable
nvic_enable_irq
gpio_mode_setup
gpio_set_af
usart_set_baudrate
usart_set_databits
usart_set_stopbits
usart_set_mode
usart_set_parity
usart_set_flow_control
usart_enable_rx_interrupt
usart_enable
usart_get_flag
usart_recv
usart_send
usart_disable_tx_interrupt
rcc_periph_reset_pulse
timer_set_prescaler
timer_set_period
timer_enable_counter
timer_enable_irq
timer_get_flag
timer_clear_flag
gpio_toggle
usart_send_blocking
__errno
gpio_get
usart_enable_tx_interrupt
atoi
puts
gpio_clear
