ARM GAS  m2a.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"m2a.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.fn_advancePointer.str1.4,"aMS",%progbits,1
  20              		.align	2
  21              	.LC0:
  22 0000 7073745F 		.ascii	"pst_me\000"
  22      6D6500
  23 0007 00       		.align	2
  24              	.LC1:
  25 0008 536F7572 		.ascii	"Source/circularBuffer.h\000"
  25      63652F63 
  25      69726375 
  25      6C617242 
  25      75666665 
  26              		.section	.text.fn_advancePointer,"ax",%progbits
  27              		.align	1
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	fn_advancePointer:
  33              	.LVL0:
  34              	.LFB11:
  35              		.file 1 "Source/circularBuffer.h"
   1:Source/circularBuffer.h **** /* Ryan Colon
   2:Source/circularBuffer.h ****  * 02.15.22
   3:Source/circularBuffer.h ****  * Circular Buffer library for use in embedded systems
   4:Source/circularBuffer.h ****  * Modeled after standard c circular buffer library Embedded Artistry article
   5:Source/circularBuffer.h ****  */ 
   6:Source/circularBuffer.h **** 
   7:Source/circularBuffer.h **** #ifndef CIRCULARBUFFER_H
   8:Source/circularBuffer.h ****     #define CIRCULARBUFFER_H
   9:Source/circularBuffer.h **** 
  10:Source/circularBuffer.h ****     #include <assert.h>
  11:Source/circularBuffer.h **** 
  12:Source/circularBuffer.h ****     //This struct is the actual circular buffer
  13:Source/circularBuffer.h ****     typedef struct st_circBuff{
  14:Source/circularBuffer.h ****         char* pc_buffer;
  15:Source/circularBuffer.h **** 	    size_t u_head;
  16:Source/circularBuffer.h **** 	    size_t u_tail;
  17:Source/circularBuffer.h **** 	    size_t u_max;
  18:Source/circularBuffer.h **** 	    bool b_full;
ARM GAS  m2a.s 			page 2


  19:Source/circularBuffer.h ****     }st_circBuff;
  20:Source/circularBuffer.h **** 
  21:Source/circularBuffer.h ****     //"Empties" the buffer
  22:Source/circularBuffer.h ****     void fn_circBuffReset(st_circBuff* pst_me){
  23:Source/circularBuffer.h ****         assert(pst_me);
  24:Source/circularBuffer.h **** 
  25:Source/circularBuffer.h **** 	    pst_me->u_head = 0;
  26:Source/circularBuffer.h **** 	    pst_me->u_tail = 0;
  27:Source/circularBuffer.h **** 	    pst_me->b_full = false;
  28:Source/circularBuffer.h ****     }
  29:Source/circularBuffer.h ****     
  30:Source/circularBuffer.h ****     //Checks if the buffer is empty
  31:Source/circularBuffer.h ****     bool fn_circBuffEmpty(st_circBuff* pst_me){
  32:Source/circularBuffer.h ****         assert(pst_me);
  33:Source/circularBuffer.h **** 
  34:Source/circularBuffer.h **** 	    return (!pst_me->b_full && (pst_me->u_head == pst_me->u_tail));
  35:Source/circularBuffer.h ****     }
  36:Source/circularBuffer.h **** 
  37:Source/circularBuffer.h ****     //Initialize the buffer struct, user must provide the structure and buffer to maintain static a
  38:Source/circularBuffer.h ****     void fn_circBuffInit(st_circBuff* pst_me, char* pc_buff, size_t u_size){
  39:Source/circularBuffer.h ****         assert(pst_me && pc_buff && u_size);
  40:Source/circularBuffer.h ****     
  41:Source/circularBuffer.h ****         pst_me->pc_buffer = pc_buff;
  42:Source/circularBuffer.h ****         pst_me->u_max = u_size;
  43:Source/circularBuffer.h ****         fn_circBuffReset(pst_me);
  44:Source/circularBuffer.h **** 
  45:Source/circularBuffer.h ****         assert(fn_circBuffEmpty(pst_me));
  46:Source/circularBuffer.h ****     }
  47:Source/circularBuffer.h **** 
  48:Source/circularBuffer.h ****     //Checks if the buffer is full
  49:Source/circularBuffer.h ****     bool fn_circBuffFull(st_circBuff* pst_me){
  50:Source/circularBuffer.h ****         assert(pst_me);
  51:Source/circularBuffer.h **** 
  52:Source/circularBuffer.h **** 	return pst_me->b_full;
  53:Source/circularBuffer.h ****     }
  54:Source/circularBuffer.h **** 
  55:Source/circularBuffer.h ****     //Returns the maximum capacity of the buffer
  56:Source/circularBuffer.h ****     size_t fn_circBuffCapacity(st_circBuff* pst_me){
  57:Source/circularBuffer.h ****         assert(pst_me);
  58:Source/circularBuffer.h **** 
  59:Source/circularBuffer.h **** 	return pst_me->u_max;
  60:Source/circularBuffer.h ****     }
  61:Source/circularBuffer.h **** 
  62:Source/circularBuffer.h ****     //Returns the current amount of data in the buffer in (number of data types) NOT BITS/BYTES
  63:Source/circularBuffer.h ****     size_t fn_circBuffSize(st_circBuff* pst_me){
  64:Source/circularBuffer.h ****         assert(pst_me);
  65:Source/circularBuffer.h **** 
  66:Source/circularBuffer.h **** 	size_t u_size = pst_me->u_max;
  67:Source/circularBuffer.h **** 
  68:Source/circularBuffer.h **** 	if(!pst_me->b_full){
  69:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
  70:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
  71:Source/circularBuffer.h **** 		else
  72:Source/circularBuffer.h **** 			u_size = pst_me->u_max + pst_me->u_head - pst_me->u_tail;
  73:Source/circularBuffer.h **** 	}
  74:Source/circularBuffer.h **** 	
  75:Source/circularBuffer.h **** 	return u_size;
ARM GAS  m2a.s 			page 3


  76:Source/circularBuffer.h ****     }
  77:Source/circularBuffer.h **** 
  78:Source/circularBuffer.h ****     //Called by Put, moves the head and tail appropriately
  79:Source/circularBuffer.h ****     static void fn_advancePointer(st_circBuff* pst_me){
  36              		.loc 1 79 55 view -0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 0
  39              		@ frame_needed = 0, uses_anonymous_args = 0
  40              		.loc 1 79 55 is_stmt 0 view .LVU1
  41 0000 08B5     		push	{r3, lr}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 3, -8
  45              		.cfi_offset 14, -4
  80:Source/circularBuffer.h ****         assert(pst_me);
  46              		.loc 1 80 8 is_stmt 1 view .LVU2
  47              		.loc 1 80 20 is_stmt 0 view .LVU3
  48 0002 B0B1     		cbz	r0, .L6
  49 0004 0346     		mov	r3, r0
  81:Source/circularBuffer.h **** 
  82:Source/circularBuffer.h **** 	if(pst_me->b_full){
  50              		.loc 1 82 2 is_stmt 1 view .LVU4
  51              		.loc 1 82 11 is_stmt 0 view .LVU5
  52 0006 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
  53              		.loc 1 82 4 view .LVU6
  54 0008 2AB1     		cbz	r2, .L3
  83:Source/circularBuffer.h ****             if(++(pst_me->u_tail) == pst_me->u_max)
  55              		.loc 1 83 13 is_stmt 1 view .LVU7
  56              		.loc 1 83 25 is_stmt 0 view .LVU8
  57 000a 8268     		ldr	r2, [r0, #8]
  58              		.loc 1 83 16 view .LVU9
  59 000c 0132     		adds	r2, r2, #1
  60              		.loc 1 83 15 view .LVU10
  61 000e 8260     		str	r2, [r0, #8]
  62              		.loc 1 83 44 view .LVU11
  63 0010 C168     		ldr	r1, [r0, #12]
  64              		.loc 1 83 15 view .LVU12
  65 0012 8A42     		cmp	r2, r1
  66 0014 13D0     		beq	.L7
  67              	.L3:
  84:Source/circularBuffer.h **** 	        pst_me->u_tail = 0;
  85:Source/circularBuffer.h **** 	}
  86:Source/circularBuffer.h **** 
  87:Source/circularBuffer.h **** 	if(++(pst_me->u_head) == pst_me->u_max)
  68              		.loc 1 87 2 is_stmt 1 view .LVU13
  69              		.loc 1 87 14 is_stmt 0 view .LVU14
  70 0016 5A68     		ldr	r2, [r3, #4]
  71              		.loc 1 87 5 view .LVU15
  72 0018 0132     		adds	r2, r2, #1
  73              		.loc 1 87 4 view .LVU16
  74 001a 5A60     		str	r2, [r3, #4]
  75              		.loc 1 87 33 view .LVU17
  76 001c D968     		ldr	r1, [r3, #12]
  77              		.loc 1 87 4 view .LVU18
  78 001e 8A42     		cmp	r2, r1
  79 0020 10D0     		beq	.L8
  80              	.L4:
ARM GAS  m2a.s 			page 4


  88:Source/circularBuffer.h **** 	    pst_me->u_head = 0;
  89:Source/circularBuffer.h **** 
  90:Source/circularBuffer.h **** 	pst_me->b_full = (pst_me->u_head == pst_me->u_tail);
  81              		.loc 1 90 2 is_stmt 1 view .LVU19
  82              		.loc 1 90 26 is_stmt 0 view .LVU20
  83 0022 5A68     		ldr	r2, [r3, #4]
  84              		.loc 1 90 44 view .LVU21
  85 0024 9968     		ldr	r1, [r3, #8]
  86              		.loc 1 90 35 view .LVU22
  87 0026 8A42     		cmp	r2, r1
  88 0028 14BF     		ite	ne
  89 002a 0022     		movne	r2, #0
  90 002c 0122     		moveq	r2, #1
  91              		.loc 1 90 17 view .LVU23
  92 002e 1A74     		strb	r2, [r3, #16]
  91:Source/circularBuffer.h ****     }
  93              		.loc 1 91 5 view .LVU24
  94 0030 08BD     		pop	{r3, pc}
  95              	.L6:
  80:Source/circularBuffer.h **** 
  96              		.loc 1 80 22 discriminator 1 view .LVU25
  97 0032 064B     		ldr	r3, .L9
  98 0034 064A     		ldr	r2, .L9+4
  99 0036 5021     		movs	r1, #80
 100 0038 0648     		ldr	r0, .L9+8
 101              	.LVL1:
  80:Source/circularBuffer.h **** 
 102              		.loc 1 80 22 discriminator 1 view .LVU26
 103 003a FFF7FEFF 		bl	__assert_func
 104              	.LVL2:
 105              	.L7:
  84:Source/circularBuffer.h **** 	}
 106              		.loc 1 84 10 is_stmt 1 view .LVU27
  84:Source/circularBuffer.h **** 	}
 107              		.loc 1 84 25 is_stmt 0 view .LVU28
 108 003e 0022     		movs	r2, #0
 109 0040 8260     		str	r2, [r0, #8]
 110 0042 E8E7     		b	.L3
 111              	.L8:
  88:Source/circularBuffer.h **** 
 112              		.loc 1 88 6 is_stmt 1 view .LVU29
  88:Source/circularBuffer.h **** 
 113              		.loc 1 88 21 is_stmt 0 view .LVU30
 114 0044 0022     		movs	r2, #0
 115 0046 5A60     		str	r2, [r3, #4]
 116 0048 EBE7     		b	.L4
 117              	.L10:
 118 004a 00BF     		.align	2
 119              	.L9:
 120 004c 00000000 		.word	.LC0
 121 0050 00000000 		.word	.LANCHOR0
 122 0054 08000000 		.word	.LC1
 123              		.cfi_endproc
 124              	.LFE11:
 126              		.section	.text.fn_retreatPointer,"ax",%progbits
 127              		.align	1
 128              		.syntax unified
ARM GAS  m2a.s 			page 5


 129              		.thumb
 130              		.thumb_func
 132              	fn_retreatPointer:
 133              	.LVL3:
 134              	.LFB12:
  92:Source/circularBuffer.h **** 
  93:Source/circularBuffer.h ****     //Called by Get, moves the tail appropriately
  94:Source/circularBuffer.h ****     static void fn_retreatPointer(st_circBuff* pst_me){
 135              		.loc 1 94 55 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		.loc 1 94 55 is_stmt 0 view .LVU32
 140 0000 08B5     		push	{r3, lr}
 141              	.LCFI1:
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 3, -8
 144              		.cfi_offset 14, -4
  95:Source/circularBuffer.h ****         assert(pst_me);
 145              		.loc 1 95 8 is_stmt 1 view .LVU33
 146              		.loc 1 95 20 is_stmt 0 view .LVU34
 147 0002 40B1     		cbz	r0, .L15
  96:Source/circularBuffer.h **** 
  97:Source/circularBuffer.h **** 	pst_me->b_full = false;
 148              		.loc 1 97 2 is_stmt 1 view .LVU35
 149              		.loc 1 97 17 is_stmt 0 view .LVU36
 150 0004 0022     		movs	r2, #0
 151 0006 0274     		strb	r2, [r0, #16]
  98:Source/circularBuffer.h **** 
  99:Source/circularBuffer.h **** 	if(++(pst_me->u_tail) == pst_me->u_max)
 152              		.loc 1 99 2 is_stmt 1 view .LVU37
 153              		.loc 1 99 14 is_stmt 0 view .LVU38
 154 0008 8268     		ldr	r2, [r0, #8]
 155              		.loc 1 99 5 view .LVU39
 156 000a 0132     		adds	r2, r2, #1
 157              		.loc 1 99 4 view .LVU40
 158 000c 8260     		str	r2, [r0, #8]
 159              		.loc 1 99 33 view .LVU41
 160 000e C168     		ldr	r1, [r0, #12]
 161              		.loc 1 99 4 view .LVU42
 162 0010 8A42     		cmp	r2, r1
 163 0012 06D0     		beq	.L16
 164              	.L11:
 100:Source/circularBuffer.h **** 		pst_me->u_tail = 0;
 101:Source/circularBuffer.h **** 
 102:Source/circularBuffer.h ****     }
 165              		.loc 1 102 5 view .LVU43
 166 0014 08BD     		pop	{r3, pc}
 167              	.L15:
  95:Source/circularBuffer.h **** 
 168              		.loc 1 95 22 discriminator 1 view .LVU44
 169 0016 044B     		ldr	r3, .L17
 170 0018 044A     		ldr	r2, .L17+4
 171 001a 5F21     		movs	r1, #95
 172 001c 0448     		ldr	r0, .L17+8
 173              	.LVL4:
  95:Source/circularBuffer.h **** 
ARM GAS  m2a.s 			page 6


 174              		.loc 1 95 22 discriminator 1 view .LVU45
 175 001e FFF7FEFF 		bl	__assert_func
 176              	.LVL5:
 177              	.L16:
 100:Source/circularBuffer.h **** 		pst_me->u_tail = 0;
 178              		.loc 1 100 3 is_stmt 1 view .LVU46
 100:Source/circularBuffer.h **** 		pst_me->u_tail = 0;
 179              		.loc 1 100 18 is_stmt 0 view .LVU47
 180 0022 0022     		movs	r2, #0
 181 0024 8260     		str	r2, [r0, #8]
 182              		.loc 1 102 5 view .LVU48
 183 0026 F5E7     		b	.L11
 184              	.L18:
 185              		.align	2
 186              	.L17:
 187 0028 00000000 		.word	.LC0
 188 002c 00000000 		.word	.LANCHOR1
 189 0030 08000000 		.word	.LC1
 190              		.cfi_endproc
 191              	.LFE12:
 193              		.section	.text.clock_setup,"ax",%progbits
 194              		.align	1
 195              		.global	clock_setup
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 200              	clock_setup:
 201              	.LFB0:
 202              		.file 2 "Source/embsysS20.h"
   1:Source/embsysS20.h **** #ifndef embsysS20_H
   2:Source/embsysS20.h ****     #define embsysS20_H
   3:Source/embsysS20.h **** 
   4:Source/embsysS20.h ****     #ifndef STM32L4
   5:Source/embsysS20.h ****         #define STM32L4
   6:Source/embsysS20.h ****     #endif
   7:Source/embsysS20.h **** 
   8:Source/embsysS20.h ****     #include <libopencm3/stm32/rcc.h>
   9:Source/embsysS20.h ****     #include <libopencm3/stm32/gpio.h>
  10:Source/embsysS20.h ****     #include <libopencm3/stm32/usart.h>
  11:Source/embsysS20.h ****     #include <libopencm3/cm3/nvic.h>
  12:Source/embsysS20.h ****     #include <libopencm3/stm32/timer.h>
  13:Source/embsysS20.h **** 
  14:Source/embsysS20.h ****     #define LED2_Pin GPIO5  //Pin number for PA5, the LED2 pin, can be found in nucleo board 64 use
  15:Source/embsysS20.h ****     #define LED2_GPIO_Port GPIOA  //PORTA address, can be found in libopencm3 docs
  16:Source/embsysS20.h ****     #define BUT1_GPIO_Port GPIOC  //PORTC address, can be found in libopencm3 docs
  17:Source/embsysS20.h ****     #define BUT1_Pin GPIO13  //Pin number for PC2, the B1 pin, can be found in the nucleo board 64 
  18:Source/embsysS20.h **** 
  19:Source/embsysS20.h ****     #define USART_CONSOLE USART2 //PA2 (tx) and PA3 (rx), STM32-L452RE Reference Manual
  20:Source/embsysS20.h ****     #define USART_GPIO_Port GPIOA
  21:Source/embsysS20.h ****     #define USART_GPIO_TXPin GPIO2
  22:Source/embsysS20.h ****     #define USART_GPIO_RXPin GPIO3
  23:Source/embsysS20.h **** 
  24:Source/embsysS20.h ****     #define TOGGLE_LED gpio_toggle(LED2_GPIO_Port,LED2_Pin)
  25:Source/embsysS20.h ****     #define LED_ON gpio_set(LED2_GPIO_Port,LED2_Pin)
  26:Source/embsysS20.h ****     #define LED_OFF gpio_clear(LED2_GPIO_Port,LED2_Pin)
  27:Source/embsysS20.h ****     #define IS_LD2_SET  (gpio_get(LED2_GPIO_Port,LED2_Pin))
  28:Source/embsysS20.h ****     #define IS_LD2_RESET  ((IS_LD2_SET)^LED2_Pin)
ARM GAS  m2a.s 			page 7


  29:Source/embsysS20.h ****     #define IS_B1_RELEASED (gpio_get(BUT1_GPIO_Port,BUT1_Pin))
  30:Source/embsysS20.h ****     #define IS_B1_PRESSED ((IS_B1_RELEASED)^BUT1_Pin)
  31:Source/embsysS20.h ****     
  32:Source/embsysS20.h ****     void clock_setup(void){
 203              		.loc 2 32 27 is_stmt 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 10B5     		push	{r4, lr}
 208              	.LCFI2:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 4, -8
 211              		.cfi_offset 14, -4
 212 0002 82B0     		sub	sp, sp, #8
 213              	.LCFI3:
 214              		.cfi_def_cfa_offset 16
  33:Source/embsysS20.h ****         rcc_osc_on(RCC_HSI16);
 215              		.loc 2 33 9 view .LVU50
 216 0004 0220     		movs	r0, #2
 217 0006 FFF7FEFF 		bl	rcc_osc_on
 218              	.LVL6:
  34:Source/embsysS20.h **** 
  35:Source/embsysS20.h ****         //16 MHz / 4 => 4 * 20 = 80 MHz / 2 = 40 MHz
  36:Source/embsysS20.h ****         rcc_set_main_pll(RCC_PLLCFGR_PLLSRC_HSI16, 4, 20, 0, 0, RCC_PLLCFGR_PLLR_DIV2);
 219              		.loc 2 36 9 view .LVU51
 220 000a 0024     		movs	r4, #0
 221 000c 0194     		str	r4, [sp, #4]
 222 000e 0094     		str	r4, [sp]
 223 0010 2346     		mov	r3, r4
 224 0012 1422     		movs	r2, #20
 225 0014 0421     		movs	r1, #4
 226 0016 0220     		movs	r0, #2
 227 0018 FFF7FEFF 		bl	rcc_set_main_pll
 228              	.LVL7:
  37:Source/embsysS20.h **** 
  38:Source/embsysS20.h ****         rcc_osc_on(RCC_PLL);
 229              		.loc 2 38 9 view .LVU52
 230 001c 2046     		mov	r0, r4
 231 001e FFF7FEFF 		bl	rcc_osc_on
 232              	.LVL8:
  39:Source/embsysS20.h **** 
  40:Source/embsysS20.h ****         rcc_periph_clock_enable(RCC_TIM3);
 233              		.loc 2 40 9 view .LVU53
 234 0022 40F60130 		movw	r0, #2817
 235 0026 FFF7FEFF 		bl	rcc_periph_clock_enable
 236              	.LVL9:
  41:Source/embsysS20.h ****         rcc_periph_clock_enable(RCC_GPIOA);
 237              		.loc 2 41 9 view .LVU54
 238 002a 4FF41860 		mov	r0, #2432
 239 002e FFF7FEFF 		bl	rcc_periph_clock_enable
 240              	.LVL10:
  42:Source/embsysS20.h **** 	    rcc_periph_clock_enable(RCC_GPIOC);
 241              		.loc 2 42 6 view .LVU55
 242 0032 40F68210 		movw	r0, #2434
 243 0036 FFF7FEFF 		bl	rcc_periph_clock_enable
 244              	.LVL11:
  43:Source/embsysS20.h **** 	    rcc_periph_clock_enable(RCC_USART2);
ARM GAS  m2a.s 			page 8


 245              		.loc 2 43 6 view .LVU56
 246 003a 40F61130 		movw	r0, #2833
 247 003e FFF7FEFF 		bl	rcc_periph_clock_enable
 248              	.LVL12:
  44:Source/embsysS20.h **** 	    return;
 249              		.loc 2 44 6 view .LVU57
  45:Source/embsysS20.h ****     }
 250              		.loc 2 45 5 is_stmt 0 view .LVU58
 251 0042 02B0     		add	sp, sp, #8
 252              	.LCFI4:
 253              		.cfi_def_cfa_offset 8
 254              		@ sp needed
 255 0044 10BD     		pop	{r4, pc}
 256              		.cfi_endproc
 257              	.LFE0:
 259              		.section	.text.usart_setup,"ax",%progbits
 260              		.align	1
 261              		.global	usart_setup
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 266              	usart_setup:
 267              	.LFB1:
  46:Source/embsysS20.h **** 
  47:Source/embsysS20.h ****     void usart_setup(void){
 268              		.loc 2 47 27 is_stmt 1 view -0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272 0000 10B5     		push	{r4, lr}
 273              	.LCFI5:
 274              		.cfi_def_cfa_offset 8
 275              		.cfi_offset 4, -8
 276              		.cfi_offset 14, -4
  48:Source/embsysS20.h ****         /* Setup GPIO pins for USART */
  49:Source/embsysS20.h ****          gpio_mode_setup(USART_GPIO_Port, GPIO_MODE_AF, GPIO_PUPD_NONE, USART_GPIO_TXPin | USART_GP
 277              		.loc 2 49 10 view .LVU60
 278 0002 0C23     		movs	r3, #12
 279 0004 0022     		movs	r2, #0
 280 0006 0221     		movs	r1, #2
 281 0008 4FF09040 		mov	r0, #1207959552
 282 000c FFF7FEFF 		bl	gpio_mode_setup
 283              	.LVL13:
  50:Source/embsysS20.h ****         
  51:Source/embsysS20.h ****          /* Setup USART pins as alternate function. */
  52:Source/embsysS20.h ****          gpio_set_af(USART_GPIO_Port, GPIO_AF7, USART_GPIO_TXPin | USART_GPIO_RXPin); //AF7 = USART
 284              		.loc 2 52 10 view .LVU61
 285 0010 0C22     		movs	r2, #12
 286 0012 0721     		movs	r1, #7
 287 0014 4FF09040 		mov	r0, #1207959552
 288 0018 FFF7FEFF 		bl	gpio_set_af
 289              	.LVL14:
  53:Source/embsysS20.h **** 
  54:Source/embsysS20.h ****          /* Setup UART parameters. */
  55:Source/embsysS20.h ****          usart_set_baudrate(USART_CONSOLE, 57600);
 290              		.loc 2 55 10 view .LVU62
 291 001c 0F4C     		ldr	r4, .L23
ARM GAS  m2a.s 			page 9


 292 001e 4FF46141 		mov	r1, #57600
 293 0022 2046     		mov	r0, r4
 294 0024 FFF7FEFF 		bl	usart_set_baudrate
 295              	.LVL15:
  56:Source/embsysS20.h ****          usart_set_databits(USART_CONSOLE, 9);  // check the effect of parity on this fcn.
 296              		.loc 2 56 10 view .LVU63
 297 0028 0921     		movs	r1, #9
 298 002a 2046     		mov	r0, r4
 299 002c FFF7FEFF 		bl	usart_set_databits
 300              	.LVL16:
  57:Source/embsysS20.h ****          usart_set_stopbits(USART_CONSOLE, USART_STOPBITS_1);
 301              		.loc 2 57 10 view .LVU64
 302 0030 0021     		movs	r1, #0
 303 0032 2046     		mov	r0, r4
 304 0034 FFF7FEFF 		bl	usart_set_stopbits
 305              	.LVL17:
  58:Source/embsysS20.h ****          usart_set_mode(USART_CONSOLE, USART_MODE_TX_RX);
 306              		.loc 2 58 10 view .LVU65
 307 0038 0C21     		movs	r1, #12
 308 003a 2046     		mov	r0, r4
 309 003c FFF7FEFF 		bl	usart_set_mode
 310              	.LVL18:
  59:Source/embsysS20.h ****          usart_set_parity(USART_CONSOLE, USART_PARITY_ODD);
 311              		.loc 2 59 10 view .LVU66
 312 0040 4FF4C061 		mov	r1, #1536
 313 0044 2046     		mov	r0, r4
 314 0046 FFF7FEFF 		bl	usart_set_parity
 315              	.LVL19:
  60:Source/embsysS20.h ****          usart_set_flow_control(USART_CONSOLE, USART_FLOWCONTROL_NONE);
 316              		.loc 2 60 10 view .LVU67
 317 004a 0021     		movs	r1, #0
 318 004c 2046     		mov	r0, r4
 319 004e FFF7FEFF 		bl	usart_set_flow_control
 320              	.LVL20:
  61:Source/embsysS20.h **** 
  62:Source/embsysS20.h ****          /* everything is setup, so turn UART on */  
  63:Source/embsysS20.h ****          usart_enable(USART_CONSOLE);
 321              		.loc 2 63 10 view .LVU68
 322 0052 2046     		mov	r0, r4
 323 0054 FFF7FEFF 		bl	usart_enable
 324              	.LVL21:
  64:Source/embsysS20.h ****     }
 325              		.loc 2 64 5 is_stmt 0 view .LVU69
 326 0058 10BD     		pop	{r4, pc}
 327              	.L24:
 328 005a 00BF     		.align	2
 329              	.L23:
 330 005c 00440040 		.word	1073759232
 331              		.cfi_endproc
 332              	.LFE1:
 334              		.section	.text.fn_circBuffReset,"ax",%progbits
 335              		.align	1
 336              		.global	fn_circBuffReset
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 341              	fn_circBuffReset:
ARM GAS  m2a.s 			page 10


 342              	.LVL22:
 343              	.LFB5:
  22:Source/circularBuffer.h ****         assert(pst_me);
 344              		.loc 1 22 47 is_stmt 1 view -0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
  22:Source/circularBuffer.h ****         assert(pst_me);
 348              		.loc 1 22 47 is_stmt 0 view .LVU71
 349 0000 08B5     		push	{r3, lr}
 350              	.LCFI6:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 3, -8
 353              		.cfi_offset 14, -4
  23:Source/circularBuffer.h **** 
 354              		.loc 1 23 8 is_stmt 1 view .LVU72
  23:Source/circularBuffer.h **** 
 355              		.loc 1 23 20 is_stmt 0 view .LVU73
 356 0002 20B1     		cbz	r0, .L28
  25:Source/circularBuffer.h **** 	    pst_me->u_tail = 0;
 357              		.loc 1 25 6 is_stmt 1 view .LVU74
  25:Source/circularBuffer.h **** 	    pst_me->u_tail = 0;
 358              		.loc 1 25 21 is_stmt 0 view .LVU75
 359 0004 0022     		movs	r2, #0
 360 0006 4260     		str	r2, [r0, #4]
  26:Source/circularBuffer.h **** 	    pst_me->b_full = false;
 361              		.loc 1 26 6 is_stmt 1 view .LVU76
  26:Source/circularBuffer.h **** 	    pst_me->b_full = false;
 362              		.loc 1 26 21 is_stmt 0 view .LVU77
 363 0008 8260     		str	r2, [r0, #8]
  27:Source/circularBuffer.h ****     }
 364              		.loc 1 27 6 is_stmt 1 view .LVU78
  27:Source/circularBuffer.h ****     }
 365              		.loc 1 27 21 is_stmt 0 view .LVU79
 366 000a 0274     		strb	r2, [r0, #16]
  28:Source/circularBuffer.h ****     
 367              		.loc 1 28 5 view .LVU80
 368 000c 08BD     		pop	{r3, pc}
 369              	.L28:
  23:Source/circularBuffer.h **** 
 370              		.loc 1 23 22 discriminator 1 view .LVU81
 371 000e 034B     		ldr	r3, .L29
 372 0010 034A     		ldr	r2, .L29+4
 373 0012 1721     		movs	r1, #23
 374 0014 0348     		ldr	r0, .L29+8
 375              	.LVL23:
  23:Source/circularBuffer.h **** 
 376              		.loc 1 23 22 discriminator 1 view .LVU82
 377 0016 FFF7FEFF 		bl	__assert_func
 378              	.LVL24:
 379              	.L30:
 380 001a 00BF     		.align	2
 381              	.L29:
 382 001c 00000000 		.word	.LC0
 383 0020 00000000 		.word	.LANCHOR2
 384 0024 08000000 		.word	.LC1
 385              		.cfi_endproc
ARM GAS  m2a.s 			page 11


 386              	.LFE5:
 388              		.section	.text.fn_circBuffEmpty,"ax",%progbits
 389              		.align	1
 390              		.global	fn_circBuffEmpty
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 395              	fn_circBuffEmpty:
 396              	.LVL25:
 397              	.LFB6:
  31:Source/circularBuffer.h ****         assert(pst_me);
 398              		.loc 1 31 46 is_stmt 1 view -0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
  31:Source/circularBuffer.h ****         assert(pst_me);
 402              		.loc 1 31 46 is_stmt 0 view .LVU84
 403 0000 08B5     		push	{r3, lr}
 404              	.LCFI7:
 405              		.cfi_def_cfa_offset 8
 406              		.cfi_offset 3, -8
 407              		.cfi_offset 14, -4
  32:Source/circularBuffer.h **** 
 408              		.loc 1 32 8 is_stmt 1 view .LVU85
  32:Source/circularBuffer.h **** 
 409              		.loc 1 32 20 is_stmt 0 view .LVU86
 410 0002 38B1     		cbz	r0, .L37
  34:Source/circularBuffer.h ****     }
 411              		.loc 1 34 6 is_stmt 1 view .LVU87
  34:Source/circularBuffer.h ****     }
 412              		.loc 1 34 21 is_stmt 0 view .LVU88
 413 0004 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
  34:Source/circularBuffer.h ****     }
 414              		.loc 1 34 30 view .LVU89
 415 0006 5AB9     		cbnz	r2, .L34
  34:Source/circularBuffer.h ****     }
 416              		.loc 1 34 40 discriminator 1 view .LVU90
 417 0008 4268     		ldr	r2, [r0, #4]
  34:Source/circularBuffer.h ****     }
 418              		.loc 1 34 58 discriminator 1 view .LVU91
 419 000a 8368     		ldr	r3, [r0, #8]
  34:Source/circularBuffer.h ****     }
 420              		.loc 1 34 30 discriminator 1 view .LVU92
 421 000c 9A42     		cmp	r2, r3
 422 000e 09D0     		beq	.L35
  34:Source/circularBuffer.h ****     }
 423              		.loc 1 34 30 view .LVU93
 424 0010 0020     		movs	r0, #0
 425              	.LVL26:
  34:Source/circularBuffer.h ****     }
 426              		.loc 1 34 30 view .LVU94
 427 0012 06E0     		b	.L33
 428              	.LVL27:
 429              	.L37:
  32:Source/circularBuffer.h **** 
 430              		.loc 1 32 22 discriminator 1 view .LVU95
 431 0014 044B     		ldr	r3, .L38
ARM GAS  m2a.s 			page 12


 432 0016 054A     		ldr	r2, .L38+4
 433 0018 2021     		movs	r1, #32
 434 001a 0548     		ldr	r0, .L38+8
 435              	.LVL28:
  32:Source/circularBuffer.h **** 
 436              		.loc 1 32 22 discriminator 1 view .LVU96
 437 001c FFF7FEFF 		bl	__assert_func
 438              	.LVL29:
 439              	.L34:
  34:Source/circularBuffer.h ****     }
 440              		.loc 1 34 30 view .LVU97
 441 0020 0020     		movs	r0, #0
 442              	.LVL30:
 443              	.L33:
  35:Source/circularBuffer.h **** 
 444              		.loc 1 35 5 discriminator 6 view .LVU98
 445 0022 08BD     		pop	{r3, pc}
 446              	.LVL31:
 447              	.L35:
  34:Source/circularBuffer.h ****     }
 448              		.loc 1 34 30 view .LVU99
 449 0024 0120     		movs	r0, #1
 450              	.LVL32:
  34:Source/circularBuffer.h ****     }
 451              		.loc 1 34 30 view .LVU100
 452 0026 FCE7     		b	.L33
 453              	.L39:
 454              		.align	2
 455              	.L38:
 456 0028 00000000 		.word	.LC0
 457 002c 00000000 		.word	.LANCHOR3
 458 0030 08000000 		.word	.LC1
 459              		.cfi_endproc
 460              	.LFE6:
 462              		.section	.rodata.fn_circBuffInit.str1.4,"aMS",%progbits,1
 463              		.align	2
 464              	.LC2:
 465 0000 7073745F 		.ascii	"pst_me && pc_buff && u_size\000"
 465      6D652026 
 465      26207063 
 465      5F627566 
 465      66202626 
 466              		.align	2
 467              	.LC3:
 468 001c 666E5F63 		.ascii	"fn_circBuffEmpty(pst_me)\000"
 468      69726342 
 468      75666645 
 468      6D707479 
 468      28707374 
 469              		.section	.text.fn_circBuffInit,"ax",%progbits
 470              		.align	1
 471              		.global	fn_circBuffInit
 472              		.syntax unified
 473              		.thumb
 474              		.thumb_func
 476              	fn_circBuffInit:
 477              	.LVL33:
ARM GAS  m2a.s 			page 13


 478              	.LFB7:
  38:Source/circularBuffer.h ****         assert(pst_me && pc_buff && u_size);
 479              		.loc 1 38 76 is_stmt 1 view -0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
  38:Source/circularBuffer.h ****         assert(pst_me && pc_buff && u_size);
 483              		.loc 1 38 76 is_stmt 0 view .LVU102
 484 0000 10B5     		push	{r4, lr}
 485              	.LCFI8:
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 4, -8
 488              		.cfi_offset 14, -4
  39:Source/circularBuffer.h ****     
 489              		.loc 1 39 8 is_stmt 1 view .LVU103
  39:Source/circularBuffer.h ****     
 490              		.loc 1 39 20 is_stmt 0 view .LVU104
 491 0002 58B1     		cbz	r0, .L41
 492 0004 0446     		mov	r4, r0
  39:Source/circularBuffer.h ****     
 493              		.loc 1 39 15 discriminator 2 view .LVU105
 494 0006 49B1     		cbz	r1, .L41
  39:Source/circularBuffer.h ****     
 495              		.loc 1 39 26 discriminator 4 view .LVU106
 496 0008 42B1     		cbz	r2, .L41
  41:Source/circularBuffer.h ****         pst_me->u_max = u_size;
 497              		.loc 1 41 9 is_stmt 1 view .LVU107
  41:Source/circularBuffer.h ****         pst_me->u_max = u_size;
 498              		.loc 1 41 27 is_stmt 0 view .LVU108
 499 000a 0160     		str	r1, [r0]
  42:Source/circularBuffer.h ****         fn_circBuffReset(pst_me);
 500              		.loc 1 42 9 is_stmt 1 view .LVU109
  42:Source/circularBuffer.h ****         fn_circBuffReset(pst_me);
 501              		.loc 1 42 23 is_stmt 0 view .LVU110
 502 000c C260     		str	r2, [r0, #12]
  43:Source/circularBuffer.h **** 
 503              		.loc 1 43 9 is_stmt 1 view .LVU111
 504 000e FFF7FEFF 		bl	fn_circBuffReset
 505              	.LVL34:
  45:Source/circularBuffer.h ****     }
 506              		.loc 1 45 8 view .LVU112
  45:Source/circularBuffer.h ****     }
 507              		.loc 1 45 8 is_stmt 0 view .LVU113
 508 0012 2046     		mov	r0, r4
 509 0014 FFF7FEFF 		bl	fn_circBuffEmpty
 510              	.LVL35:
  45:Source/circularBuffer.h ****     }
 511              		.loc 1 45 20 view .LVU114
 512 0018 30B1     		cbz	r0, .L45
  46:Source/circularBuffer.h **** 
 513              		.loc 1 46 5 view .LVU115
 514 001a 10BD     		pop	{r4, pc}
 515              	.LVL36:
 516              	.L41:
  39:Source/circularBuffer.h ****     
 517              		.loc 1 39 22 discriminator 5 view .LVU116
 518 001c 054B     		ldr	r3, .L46
ARM GAS  m2a.s 			page 14


 519 001e 064A     		ldr	r2, .L46+4
 520              	.LVL37:
  39:Source/circularBuffer.h ****     
 521              		.loc 1 39 22 discriminator 5 view .LVU117
 522 0020 2721     		movs	r1, #39
 523              	.LVL38:
  39:Source/circularBuffer.h ****     
 524              		.loc 1 39 22 discriminator 5 view .LVU118
 525 0022 0648     		ldr	r0, .L46+8
 526              	.LVL39:
  39:Source/circularBuffer.h ****     
 527              		.loc 1 39 22 discriminator 5 view .LVU119
 528 0024 FFF7FEFF 		bl	__assert_func
 529              	.LVL40:
 530              	.L45:
  45:Source/circularBuffer.h ****     }
 531              		.loc 1 45 22 discriminator 1 view .LVU120
 532 0028 054B     		ldr	r3, .L46+12
 533 002a 034A     		ldr	r2, .L46+4
 534 002c 2D21     		movs	r1, #45
 535 002e 0348     		ldr	r0, .L46+8
 536 0030 FFF7FEFF 		bl	__assert_func
 537              	.LVL41:
 538              	.L47:
 539              		.align	2
 540              	.L46:
 541 0034 00000000 		.word	.LC2
 542 0038 00000000 		.word	.LANCHOR4
 543 003c 08000000 		.word	.LC1
 544 0040 1C000000 		.word	.LC3
 545              		.cfi_endproc
 546              	.LFE7:
 548              		.section	.text.fn_circBuffFull,"ax",%progbits
 549              		.align	1
 550              		.global	fn_circBuffFull
 551              		.syntax unified
 552              		.thumb
 553              		.thumb_func
 555              	fn_circBuffFull:
 556              	.LVL42:
 557              	.LFB8:
  49:Source/circularBuffer.h ****         assert(pst_me);
 558              		.loc 1 49 45 is_stmt 1 view -0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 0, uses_anonymous_args = 0
  49:Source/circularBuffer.h ****         assert(pst_me);
 562              		.loc 1 49 45 is_stmt 0 view .LVU122
 563 0000 08B5     		push	{r3, lr}
 564              	.LCFI9:
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 3, -8
 567              		.cfi_offset 14, -4
  50:Source/circularBuffer.h **** 
 568              		.loc 1 50 8 is_stmt 1 view .LVU123
  50:Source/circularBuffer.h **** 
 569              		.loc 1 50 20 is_stmt 0 view .LVU124
ARM GAS  m2a.s 			page 15


 570 0002 08B1     		cbz	r0, .L51
  52:Source/circularBuffer.h ****     }
 571              		.loc 1 52 2 is_stmt 1 view .LVU125
  53:Source/circularBuffer.h **** 
 572              		.loc 1 53 5 is_stmt 0 view .LVU126
 573 0004 007C     		ldrb	r0, [r0, #16]	@ zero_extendqisi2
 574              	.LVL43:
  53:Source/circularBuffer.h **** 
 575              		.loc 1 53 5 view .LVU127
 576 0006 08BD     		pop	{r3, pc}
 577              	.LVL44:
 578              	.L51:
  50:Source/circularBuffer.h **** 
 579              		.loc 1 50 22 discriminator 1 view .LVU128
 580 0008 024B     		ldr	r3, .L52
 581 000a 034A     		ldr	r2, .L52+4
 582 000c 3221     		movs	r1, #50
 583 000e 0348     		ldr	r0, .L52+8
 584              	.LVL45:
  50:Source/circularBuffer.h **** 
 585              		.loc 1 50 22 discriminator 1 view .LVU129
 586 0010 FFF7FEFF 		bl	__assert_func
 587              	.LVL46:
 588              	.L53:
 589              		.align	2
 590              	.L52:
 591 0014 00000000 		.word	.LC0
 592 0018 00000000 		.word	.LANCHOR5
 593 001c 08000000 		.word	.LC1
 594              		.cfi_endproc
 595              	.LFE8:
 597              		.section	.text.fn_circBuffCapacity,"ax",%progbits
 598              		.align	1
 599              		.global	fn_circBuffCapacity
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 604              	fn_circBuffCapacity:
 605              	.LVL47:
 606              	.LFB9:
  56:Source/circularBuffer.h ****         assert(pst_me);
 607              		.loc 1 56 52 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
  56:Source/circularBuffer.h ****         assert(pst_me);
 611              		.loc 1 56 52 is_stmt 0 view .LVU131
 612 0000 08B5     		push	{r3, lr}
 613              	.LCFI10:
 614              		.cfi_def_cfa_offset 8
 615              		.cfi_offset 3, -8
 616              		.cfi_offset 14, -4
  57:Source/circularBuffer.h **** 
 617              		.loc 1 57 8 is_stmt 1 view .LVU132
  57:Source/circularBuffer.h **** 
 618              		.loc 1 57 20 is_stmt 0 view .LVU133
 619 0002 08B1     		cbz	r0, .L57
ARM GAS  m2a.s 			page 16


  59:Source/circularBuffer.h ****     }
 620              		.loc 1 59 2 is_stmt 1 view .LVU134
  60:Source/circularBuffer.h **** 
 621              		.loc 1 60 5 is_stmt 0 view .LVU135
 622 0004 C068     		ldr	r0, [r0, #12]
 623              	.LVL48:
  60:Source/circularBuffer.h **** 
 624              		.loc 1 60 5 view .LVU136
 625 0006 08BD     		pop	{r3, pc}
 626              	.LVL49:
 627              	.L57:
  57:Source/circularBuffer.h **** 
 628              		.loc 1 57 22 discriminator 1 view .LVU137
 629 0008 024B     		ldr	r3, .L58
 630 000a 034A     		ldr	r2, .L58+4
 631 000c 3921     		movs	r1, #57
 632 000e 0348     		ldr	r0, .L58+8
 633              	.LVL50:
  57:Source/circularBuffer.h **** 
 634              		.loc 1 57 22 discriminator 1 view .LVU138
 635 0010 FFF7FEFF 		bl	__assert_func
 636              	.LVL51:
 637              	.L59:
 638              		.align	2
 639              	.L58:
 640 0014 00000000 		.word	.LC0
 641 0018 00000000 		.word	.LANCHOR6
 642 001c 08000000 		.word	.LC1
 643              		.cfi_endproc
 644              	.LFE9:
 646              		.section	.text.fn_circBuffSize,"ax",%progbits
 647              		.align	1
 648              		.global	fn_circBuffSize
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 653              	fn_circBuffSize:
 654              	.LVL52:
 655              	.LFB10:
  63:Source/circularBuffer.h ****         assert(pst_me);
 656              		.loc 1 63 48 is_stmt 1 view -0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
  63:Source/circularBuffer.h ****         assert(pst_me);
 660              		.loc 1 63 48 is_stmt 0 view .LVU140
 661 0000 08B5     		push	{r3, lr}
 662              	.LCFI11:
 663              		.cfi_def_cfa_offset 8
 664              		.cfi_offset 3, -8
 665              		.cfi_offset 14, -4
  64:Source/circularBuffer.h **** 
 666              		.loc 1 64 8 is_stmt 1 view .LVU141
  64:Source/circularBuffer.h **** 
 667              		.loc 1 64 20 is_stmt 0 view .LVU142
 668 0002 48B1     		cbz	r0, .L65
 669 0004 0346     		mov	r3, r0
ARM GAS  m2a.s 			page 17


  66:Source/circularBuffer.h **** 
 670              		.loc 1 66 2 is_stmt 1 view .LVU143
  66:Source/circularBuffer.h **** 
 671              		.loc 1 66 9 is_stmt 0 view .LVU144
 672 0006 C068     		ldr	r0, [r0, #12]
 673              	.LVL53:
  68:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
 674              		.loc 1 68 2 is_stmt 1 view .LVU145
  68:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
 675              		.loc 1 68 12 is_stmt 0 view .LVU146
 676 0008 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
  68:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
 677              		.loc 1 68 4 view .LVU147
 678 000a 22B9     		cbnz	r2, .L60
  69:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 679              		.loc 1 69 3 is_stmt 1 view .LVU148
  69:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 680              		.loc 1 69 12 is_stmt 0 view .LVU149
 681 000c 5A68     		ldr	r2, [r3, #4]
  69:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 682              		.loc 1 69 30 view .LVU150
 683 000e 9B68     		ldr	r3, [r3, #8]
 684              	.LVL54:
  69:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 685              		.loc 1 69 5 view .LVU151
 686 0010 9A42     		cmp	r2, r3
 687 0012 07D3     		bcc	.L63
  70:Source/circularBuffer.h **** 		else
 688              		.loc 1 70 4 is_stmt 1 view .LVU152
  70:Source/circularBuffer.h **** 		else
 689              		.loc 1 70 11 is_stmt 0 view .LVU153
 690 0014 D01A     		subs	r0, r2, r3
 691              	.LVL55:
 692              	.L60:
  76:Source/circularBuffer.h **** 
 693              		.loc 1 76 5 view .LVU154
 694 0016 08BD     		pop	{r3, pc}
 695              	.LVL56:
 696              	.L65:
  64:Source/circularBuffer.h **** 
 697              		.loc 1 64 22 discriminator 1 view .LVU155
 698 0018 044B     		ldr	r3, .L66
 699 001a 054A     		ldr	r2, .L66+4
 700 001c 4021     		movs	r1, #64
 701 001e 0548     		ldr	r0, .L66+8
 702              	.LVL57:
  64:Source/circularBuffer.h **** 
 703              		.loc 1 64 22 discriminator 1 view .LVU156
 704 0020 FFF7FEFF 		bl	__assert_func
 705              	.LVL58:
 706              	.L63:
  72:Source/circularBuffer.h **** 	}
 707              		.loc 1 72 4 is_stmt 1 view .LVU157
  72:Source/circularBuffer.h **** 	}
 708              		.loc 1 72 27 is_stmt 0 view .LVU158
 709 0024 1044     		add	r0, r0, r2
 710              	.LVL59:
ARM GAS  m2a.s 			page 18


  72:Source/circularBuffer.h **** 	}
 711              		.loc 1 72 11 view .LVU159
 712 0026 C01A     		subs	r0, r0, r3
 713              	.LVL60:
  75:Source/circularBuffer.h ****     }
 714              		.loc 1 75 2 is_stmt 1 view .LVU160
  75:Source/circularBuffer.h ****     }
 715              		.loc 1 75 9 is_stmt 0 view .LVU161
 716 0028 F5E7     		b	.L60
 717              	.L67:
 718 002a 00BF     		.align	2
 719              	.L66:
 720 002c 00000000 		.word	.LC0
 721 0030 00000000 		.word	.LANCHOR7
 722 0034 08000000 		.word	.LC1
 723              		.cfi_endproc
 724              	.LFE10:
 726              		.section	.rodata.fn_circBuffPut.str1.4,"aMS",%progbits,1
 727              		.align	2
 728              	.LC4:
 729 0000 7073745F 		.ascii	"pst_me && pst_me->pc_buffer\000"
 729      6D652026 
 729      26207073 
 729      745F6D65 
 729      2D3E7063 
 730              		.section	.text.fn_circBuffPut,"ax",%progbits
 731              		.align	1
 732              		.global	fn_circBuffPut
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 737              	fn_circBuffPut:
 738              	.LVL61:
 739              	.LFB13:
 103:Source/circularBuffer.h **** 
 104:Source/circularBuffer.h ****     //Puts data in the buffer
 105:Source/circularBuffer.h ****     void fn_circBuffPut(st_circBuff* pst_me, char c_data){
 740              		.loc 1 105 58 is_stmt 1 view -0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              		.loc 1 105 58 is_stmt 0 view .LVU163
 745 0000 08B5     		push	{r3, lr}
 746              	.LCFI12:
 747              		.cfi_def_cfa_offset 8
 748              		.cfi_offset 3, -8
 749              		.cfi_offset 14, -4
 106:Source/circularBuffer.h ****         assert(pst_me && pst_me->pc_buffer);
 750              		.loc 1 106 8 is_stmt 1 view .LVU164
 751              		.loc 1 106 20 is_stmt 0 view .LVU165
 752 0002 40B1     		cbz	r0, .L69
 753 0004 0346     		mov	r3, r0
 754              		.loc 1 106 24 discriminator 2 view .LVU166
 755 0006 0268     		ldr	r2, [r0]
 756              		.loc 1 106 15 discriminator 2 view .LVU167
 757 0008 2AB1     		cbz	r2, .L69
 107:Source/circularBuffer.h **** 
ARM GAS  m2a.s 			page 19


 108:Source/circularBuffer.h **** 	pst_me->pc_buffer[pst_me->u_head] = c_data;
 758              		.loc 1 108 2 is_stmt 1 view .LVU168
 759              		.loc 1 108 26 is_stmt 0 view .LVU169
 760 000a 4068     		ldr	r0, [r0, #4]
 761              	.LVL62:
 762              		.loc 1 108 36 view .LVU170
 763 000c 1154     		strb	r1, [r2, r0]
 109:Source/circularBuffer.h **** 
 110:Source/circularBuffer.h **** 	fn_advancePointer(pst_me);
 764              		.loc 1 110 2 is_stmt 1 view .LVU171
 765 000e 1846     		mov	r0, r3
 766 0010 FFF7FEFF 		bl	fn_advancePointer
 767              	.LVL63:
 111:Source/circularBuffer.h ****     }
 768              		.loc 1 111 5 is_stmt 0 view .LVU172
 769 0014 08BD     		pop	{r3, pc}
 770              	.LVL64:
 771              	.L69:
 106:Source/circularBuffer.h **** 
 772              		.loc 1 106 22 discriminator 3 view .LVU173
 773 0016 034B     		ldr	r3, .L72
 774 0018 034A     		ldr	r2, .L72+4
 775 001a 6A21     		movs	r1, #106
 776              	.LVL65:
 106:Source/circularBuffer.h **** 
 777              		.loc 1 106 22 discriminator 3 view .LVU174
 778 001c 0348     		ldr	r0, .L72+8
 779              	.LVL66:
 106:Source/circularBuffer.h **** 
 780              		.loc 1 106 22 discriminator 3 view .LVU175
 781 001e FFF7FEFF 		bl	__assert_func
 782              	.LVL67:
 783              	.L73:
 784 0022 00BF     		.align	2
 785              	.L72:
 786 0024 00000000 		.word	.LC4
 787 0028 00000000 		.word	.LANCHOR8
 788 002c 08000000 		.word	.LC1
 789              		.cfi_endproc
 790              	.LFE13:
 792              		.section	.rodata.fn_circBuffGet.str1.4,"aMS",%progbits,1
 793              		.align	2
 794              	.LC5:
 795 0000 70635F64 		.ascii	"pc_data\000"
 795      61746100 
 796              		.align	2
 797              	.LC6:
 798 0008 7073745F 		.ascii	"pst_me->pc_buffer\000"
 798      6D652D3E 
 798      70635F62 
 798      75666665 
 798      7200
 799              		.section	.text.fn_circBuffGet,"ax",%progbits
 800              		.align	1
 801              		.global	fn_circBuffGet
 802              		.syntax unified
 803              		.thumb
ARM GAS  m2a.s 			page 20


 804              		.thumb_func
 806              	fn_circBuffGet:
 807              	.LVL68:
 808              	.LFB14:
 112:Source/circularBuffer.h **** 
 113:Source/circularBuffer.h ****     //Removes data from the buffer, returns pass/fail (need to supply storage for data in parameter
 114:Source/circularBuffer.h ****     bool fn_circBuffGet(st_circBuff* pst_me, char* pc_data){
 809              		.loc 1 114 59 is_stmt 1 view -0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              		.loc 1 114 59 is_stmt 0 view .LVU177
 814 0000 70B5     		push	{r4, r5, r6, lr}
 815              	.LCFI13:
 816              		.cfi_def_cfa_offset 16
 817              		.cfi_offset 4, -16
 818              		.cfi_offset 5, -12
 819              		.cfi_offset 6, -8
 820              		.cfi_offset 14, -4
 115:Source/circularBuffer.h ****         //assert(pst_me && pc_data && pst_me->pc_buffer);
 116:Source/circularBuffer.h ****         assert(pst_me);
 821              		.loc 1 116 8 is_stmt 1 view .LVU178
 822              		.loc 1 116 20 is_stmt 0 view .LVU179
 823 0002 48B1     		cbz	r0, .L81
 824 0004 0C46     		mov	r4, r1
 825 0006 0546     		mov	r5, r0
 117:Source/circularBuffer.h ****         assert(pc_data);
 826              		.loc 1 117 8 is_stmt 1 view .LVU180
 827              		.loc 1 117 20 is_stmt 0 view .LVU181
 828 0008 61B1     		cbz	r1, .L82
 118:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 829              		.loc 1 118 8 is_stmt 1 view .LVU182
 830              		.loc 1 118 14 is_stmt 0 view .LVU183
 831 000a 0668     		ldr	r6, [r0]
 832              		.loc 1 118 20 view .LVU184
 833 000c 86B1     		cbz	r6, .L83
 119:Source/circularBuffer.h **** 
 120:Source/circularBuffer.h **** 	bool r = false;
 834              		.loc 1 120 1 is_stmt 1 view .LVU185
 835              	.LVL69:
 121:Source/circularBuffer.h **** 
 122:Source/circularBuffer.h **** 	if(!fn_circBuffEmpty(pst_me)){
 836              		.loc 1 122 2 view .LVU186
 837              		.loc 1 122 6 is_stmt 0 view .LVU187
 838 000e FFF7FEFF 		bl	fn_circBuffEmpty
 839              	.LVL70:
 840              		.loc 1 122 4 view .LVU188
 841 0012 98B1     		cbz	r0, .L84
 120:Source/circularBuffer.h **** 
 842              		.loc 1 120 6 view .LVU189
 843 0014 0020     		movs	r0, #0
 844              	.LVL71:
 845              	.L78:
 123:Source/circularBuffer.h ****         *pc_data = pst_me->pc_buffer[pst_me->u_tail];
 124:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 125:Source/circularBuffer.h **** 
 126:Source/circularBuffer.h **** 	   r = true; 
ARM GAS  m2a.s 			page 21


 127:Source/circularBuffer.h **** 	}
 128:Source/circularBuffer.h **** 
 129:Source/circularBuffer.h ****         return r;
 846              		.loc 1 129 9 is_stmt 1 view .LVU190
 130:Source/circularBuffer.h ****     }
 847              		.loc 1 130 5 is_stmt 0 view .LVU191
 848 0016 70BD     		pop	{r4, r5, r6, pc}
 849              	.LVL72:
 850              	.L81:
 116:Source/circularBuffer.h ****         assert(pc_data);
 851              		.loc 1 116 22 discriminator 1 view .LVU192
 852 0018 0C4B     		ldr	r3, .L85
 853 001a 0D4A     		ldr	r2, .L85+4
 854 001c 7421     		movs	r1, #116
 855              	.LVL73:
 116:Source/circularBuffer.h ****         assert(pc_data);
 856              		.loc 1 116 22 discriminator 1 view .LVU193
 857 001e 0D48     		ldr	r0, .L85+8
 858              	.LVL74:
 116:Source/circularBuffer.h ****         assert(pc_data);
 859              		.loc 1 116 22 discriminator 1 view .LVU194
 860 0020 FFF7FEFF 		bl	__assert_func
 861              	.LVL75:
 862              	.L82:
 117:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 863              		.loc 1 117 22 discriminator 1 view .LVU195
 864 0024 0C4B     		ldr	r3, .L85+12
 865 0026 0A4A     		ldr	r2, .L85+4
 866 0028 7521     		movs	r1, #117
 867              	.LVL76:
 117:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 868              		.loc 1 117 22 discriminator 1 view .LVU196
 869 002a 0A48     		ldr	r0, .L85+8
 870              	.LVL77:
 117:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 871              		.loc 1 117 22 discriminator 1 view .LVU197
 872 002c FFF7FEFF 		bl	__assert_func
 873              	.LVL78:
 874              	.L83:
 118:Source/circularBuffer.h **** 
 875              		.loc 1 118 22 discriminator 1 view .LVU198
 876 0030 0A4B     		ldr	r3, .L85+16
 877 0032 074A     		ldr	r2, .L85+4
 878 0034 7621     		movs	r1, #118
 879              	.LVL79:
 118:Source/circularBuffer.h **** 
 880              		.loc 1 118 22 discriminator 1 view .LVU199
 881 0036 0748     		ldr	r0, .L85+8
 882              	.LVL80:
 118:Source/circularBuffer.h **** 
 883              		.loc 1 118 22 discriminator 1 view .LVU200
 884 0038 FFF7FEFF 		bl	__assert_func
 885              	.LVL81:
 886              	.L84:
 123:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 887              		.loc 1 123 9 is_stmt 1 view .LVU201
 123:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
ARM GAS  m2a.s 			page 22


 888              		.loc 1 123 44 is_stmt 0 view .LVU202
 889 003c AB68     		ldr	r3, [r5, #8]
 123:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 890              		.loc 1 123 37 view .LVU203
 891 003e F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 123:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 892              		.loc 1 123 18 view .LVU204
 893 0040 2370     		strb	r3, [r4]
 124:Source/circularBuffer.h **** 
 894              		.loc 1 124 6 is_stmt 1 view .LVU205
 895 0042 2846     		mov	r0, r5
 896 0044 FFF7FEFF 		bl	fn_retreatPointer
 897              	.LVL82:
 126:Source/circularBuffer.h **** 	}
 898              		.loc 1 126 5 view .LVU206
 126:Source/circularBuffer.h **** 	}
 899              		.loc 1 126 7 is_stmt 0 view .LVU207
 900 0048 0120     		movs	r0, #1
 901 004a E4E7     		b	.L78
 902              	.L86:
 903              		.align	2
 904              	.L85:
 905 004c 00000000 		.word	.LC0
 906 0050 00000000 		.word	.LANCHOR9
 907 0054 08000000 		.word	.LC1
 908 0058 00000000 		.word	.LC5
 909 005c 08000000 		.word	.LC6
 910              		.cfi_endproc
 911              	.LFE14:
 913              		.section	.rodata.fn_circBuffGetMostRecent.str1.4,"aMS",%progbits,1
 914              		.align	2
 915              	.LC7:
 916 0000 7073745F 		.ascii	"pst_me && pc_data && pst_me->pc_buffer\000"
 916      6D652026 
 916      26207063 
 916      5F646174 
 916      61202626 
 917              		.section	.text.fn_circBuffGetMostRecent,"ax",%progbits
 918              		.align	1
 919              		.global	fn_circBuffGetMostRecent
 920              		.syntax unified
 921              		.thumb
 922              		.thumb_func
 924              	fn_circBuffGetMostRecent:
 925              	.LVL83:
 926              	.LFB15:
 131:Source/circularBuffer.h **** 
 132:Source/circularBuffer.h ****     bool fn_circBuffGetMostRecent(st_circBuff* pst_me, char* pc_data){
 927              		.loc 1 132 69 is_stmt 1 view -0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              		.loc 1 132 69 is_stmt 0 view .LVU209
 932 0000 70B5     		push	{r4, r5, r6, lr}
 933              	.LCFI14:
 934              		.cfi_def_cfa_offset 16
 935              		.cfi_offset 4, -16
ARM GAS  m2a.s 			page 23


 936              		.cfi_offset 5, -12
 937              		.cfi_offset 6, -8
 938              		.cfi_offset 14, -4
 133:Source/circularBuffer.h ****         assert(pst_me && pc_data && pst_me->pc_buffer);
 939              		.loc 1 133 8 is_stmt 1 view .LVU210
 940              		.loc 1 133 20 is_stmt 0 view .LVU211
 941 0002 80B1     		cbz	r0, .L88
 942 0004 0C46     		mov	r4, r1
 943 0006 0646     		mov	r6, r0
 944              		.loc 1 133 15 discriminator 2 view .LVU212
 945 0008 69B1     		cbz	r1, .L88
 946              		.loc 1 133 35 discriminator 4 view .LVU213
 947 000a 0568     		ldr	r5, [r0]
 948              		.loc 1 133 26 discriminator 4 view .LVU214
 949 000c 5DB1     		cbz	r5, .L88
 134:Source/circularBuffer.h **** 
 135:Source/circularBuffer.h ****         bool r = false;
 950              		.loc 1 135 8 is_stmt 1 view .LVU215
 951              	.LVL84:
 136:Source/circularBuffer.h **** 
 137:Source/circularBuffer.h ****         if(!fn_circBuffEmpty(pst_me)){
 952              		.loc 1 137 9 view .LVU216
 953              		.loc 1 137 13 is_stmt 0 view .LVU217
 954 000e FFF7FEFF 		bl	fn_circBuffEmpty
 955              	.LVL85:
 956              		.loc 1 137 11 view .LVU218
 957 0012 A0B9     		cbnz	r0, .L92
 138:Source/circularBuffer.h ****                 if(pst_me->u_head == 0){
 958              		.loc 1 138 17 is_stmt 1 view .LVU219
 959              		.loc 1 138 26 is_stmt 0 view .LVU220
 960 0014 7368     		ldr	r3, [r6, #4]
 961              		.loc 1 138 19 view .LVU221
 962 0016 63B9     		cbnz	r3, .L91
 139:Source/circularBuffer.h ****                     pst_me->u_head = (pst_me->u_max) - 1;
 963              		.loc 1 139 21 is_stmt 1 view .LVU222
 964              		.loc 1 139 45 is_stmt 0 view .LVU223
 965 0018 F368     		ldr	r3, [r6, #12]
 966              		.loc 1 139 54 view .LVU224
 967 001a 013B     		subs	r3, r3, #1
 968              		.loc 1 139 36 view .LVU225
 969 001c 7360     		str	r3, [r6, #4]
 140:Source/circularBuffer.h ****                 *pc_data = pst_me->pc_buffer[pst_me->u_head];
 970              		.loc 1 140 17 is_stmt 1 view .LVU226
 971              		.loc 1 140 45 is_stmt 0 view .LVU227
 972 001e EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 973              		.loc 1 140 26 view .LVU228
 974 0020 2370     		strb	r3, [r4]
 141:Source/circularBuffer.h ****                 r = true;	
 975              		.loc 1 141 17 is_stmt 1 view .LVU229
 976              	.LVL86:
 977              		.loc 1 141 19 is_stmt 0 view .LVU230
 978 0022 0120     		movs	r0, #1
 979 0024 0CE0     		b	.L90
 980              	.LVL87:
 981              	.L88:
 133:Source/circularBuffer.h **** 
 982              		.loc 1 133 22 discriminator 5 view .LVU231
ARM GAS  m2a.s 			page 24


 983 0026 074B     		ldr	r3, .L94
 984 0028 074A     		ldr	r2, .L94+4
 985 002a 8521     		movs	r1, #133
 986              	.LVL88:
 133:Source/circularBuffer.h **** 
 987              		.loc 1 133 22 discriminator 5 view .LVU232
 988 002c 0748     		ldr	r0, .L94+8
 989              	.LVL89:
 133:Source/circularBuffer.h **** 
 990              		.loc 1 133 22 discriminator 5 view .LVU233
 991 002e FFF7FEFF 		bl	__assert_func
 992              	.LVL90:
 993              	.L91:
 142:Source/circularBuffer.h ****             }   
 143:Source/circularBuffer.h ****             else{
 144:Source/circularBuffer.h ****                 *pc_data = pst_me->pc_buffer[--(pst_me->u_head)];
 994              		.loc 1 144 17 is_stmt 1 view .LVU234
 995              		.loc 1 144 46 is_stmt 0 view .LVU235
 996 0032 013B     		subs	r3, r3, #1
 997              		.loc 1 144 26 view .LVU236
 998 0034 7360     		str	r3, [r6, #4]
 999              		.loc 1 144 45 view .LVU237
 1000 0036 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1001              		.loc 1 144 26 view .LVU238
 1002 0038 2370     		strb	r3, [r4]
 145:Source/circularBuffer.h ****             r = true;
 1003              		.loc 1 145 13 is_stmt 1 view .LVU239
 1004              	.LVL91:
 1005              		.loc 1 145 15 is_stmt 0 view .LVU240
 1006 003a 0120     		movs	r0, #1
 1007 003c 00E0     		b	.L90
 1008              	.LVL92:
 1009              	.L92:
 135:Source/circularBuffer.h **** 
 1010              		.loc 1 135 13 view .LVU241
 1011 003e 0020     		movs	r0, #0
 1012              	.LVL93:
 1013              	.L90:
 146:Source/circularBuffer.h ****             }
 147:Source/circularBuffer.h ****         }
 148:Source/circularBuffer.h **** 
 149:Source/circularBuffer.h ****         return r;
 1014              		.loc 1 149 9 is_stmt 1 view .LVU242
 150:Source/circularBuffer.h ****     }
 1015              		.loc 1 150 5 is_stmt 0 view .LVU243
 1016 0040 70BD     		pop	{r4, r5, r6, pc}
 1017              	.LVL94:
 1018              	.L95:
 1019              		.loc 1 150 5 view .LVU244
 1020 0042 00BF     		.align	2
 1021              	.L94:
 1022 0044 00000000 		.word	.LC7
 1023 0048 00000000 		.word	.LANCHOR10
 1024 004c 08000000 		.word	.LC1
 1025              		.cfi_endproc
 1026              	.LFE15:
 1028              		.section	.text._write,"ax",%progbits
ARM GAS  m2a.s 			page 25


 1029              		.align	1
 1030              		.global	_write
 1031              		.syntax unified
 1032              		.thumb
 1033              		.thumb_func
 1035              	_write:
 1036              	.LVL95:
 1037              	.LFB16:
 1038              		.file 3 "Source/m2a.c"
   1:Source/m2a.c  **** /*
   2:Source/m2a.c  ****  * Ryan Colon
   3:Source/m2a.c  ****  * Embedded Systems Milestone 2
   4:Source/m2a.c  ****  * 02.15.22
   5:Source/m2a.c  ****  * Program takes user input from the serial monitor and encrypts the text
   6:Source/m2a.c  ****  * While running, if the user holds B1, the output will switch to decrypt from encrypt
   7:Source/m2a.c  ****  */
   8:Source/m2a.c  **** 
   9:Source/m2a.c  **** #include "embsysS20.h"
  10:Source/m2a.c  **** #include <stdio.h>
  11:Source/m2a.c  **** #include <errno.h>
  12:Source/m2a.c  **** #include <unistd.h>
  13:Source/m2a.c  **** #include "circularBuffer.h"
  14:Source/m2a.c  **** 
  15:Source/m2a.c  **** #define BUFFER_SIZE 256
  16:Source/m2a.c  **** #define CIPHER_SIZE 13
  17:Source/m2a.c  **** 
  18:Source/m2a.c  **** char fn_encryptText(char c_toEncrypt);
  19:Source/m2a.c  **** char fn_decryptText(char c_toDecrypt);
  20:Source/m2a.c  **** void fn_convertToCaps(char* pc_Convert);
  21:Source/m2a.c  **** void setup_tim3();
  22:Source/m2a.c  **** 
  23:Source/m2a.c  **** const char ac_CIPHER[CIPHER_SIZE] = {'T','E','N','N','E','S','S','E','E','T','E','C','H'};
  24:Source/m2a.c  **** 
  25:Source/m2a.c  **** //Available on the libopencm3 github example page
  26:Source/m2a.c  **** //Essentially makes the USART2 port the STDOUT stream
  27:Source/m2a.c  **** int _write(int file, char* ptr, int len){
 1039              		.loc 3 27 41 is_stmt 1 view -0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 0
 1042              		@ frame_needed = 0, uses_anonymous_args = 0
 1043              		.loc 3 27 41 is_stmt 0 view .LVU246
 1044 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1045              	.LCFI15:
 1046              		.cfi_def_cfa_offset 24
 1047              		.cfi_offset 3, -24
 1048              		.cfi_offset 4, -20
 1049              		.cfi_offset 5, -16
 1050              		.cfi_offset 6, -12
 1051              		.cfi_offset 7, -8
 1052              		.cfi_offset 14, -4
  28:Source/m2a.c  ****     int i;
 1053              		.loc 3 28 5 is_stmt 1 view .LVU247
  29:Source/m2a.c  **** 
  30:Source/m2a.c  ****     if (file == STDOUT_FILENO || file == STDERR_FILENO){
 1054              		.loc 3 30 5 view .LVU248
 1055              		.loc 3 30 30 is_stmt 0 view .LVU249
 1056 0002 0138     		subs	r0, r0, #1
ARM GAS  m2a.s 			page 26


 1057              	.LVL96:
 1058              		.loc 3 30 8 view .LVU250
 1059 0004 0128     		cmp	r0, #1
 1060 0006 13D8     		bhi	.L105
 1061 0008 0D46     		mov	r5, r1
 1062 000a 1746     		mov	r7, r2
  31:Source/m2a.c  **** 	    for(i = 0; i < len; i++){
 1063              		.loc 3 31 12 view .LVU251
 1064 000c 0024     		movs	r4, #0
 1065 000e 04E0     		b	.L97
 1066              	.LVL97:
 1067              	.L99:
  32:Source/m2a.c  **** 		    if(ptr[i] == '\n')
  33:Source/m2a.c  **** 			    usart_send_blocking(USART_CONSOLE, '\r');
  34:Source/m2a.c  **** 
  35:Source/m2a.c  **** 		    usart_send_blocking(USART_CONSOLE, ptr[i]);
 1068              		.loc 3 35 7 is_stmt 1 discriminator 2 view .LVU252
 1069 0010 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 1070 0012 0B48     		ldr	r0, .L106
 1071 0014 FFF7FEFF 		bl	usart_send_blocking
 1072              	.LVL98:
  31:Source/m2a.c  **** 	    for(i = 0; i < len; i++){
 1073              		.loc 3 31 26 discriminator 2 view .LVU253
  31:Source/m2a.c  **** 	    for(i = 0; i < len; i++){
 1074              		.loc 3 31 27 is_stmt 0 discriminator 2 view .LVU254
 1075 0018 0134     		adds	r4, r4, #1
 1076              	.LVL99:
 1077              	.L97:
  31:Source/m2a.c  **** 	    for(i = 0; i < len; i++){
 1078              		.loc 3 31 17 is_stmt 1 discriminator 1 view .LVU255
  31:Source/m2a.c  **** 	    for(i = 0; i < len; i++){
 1079              		.loc 3 31 6 is_stmt 0 discriminator 1 view .LVU256
 1080 001a BC42     		cmp	r4, r7
 1081 001c 0EDA     		bge	.L96
  32:Source/m2a.c  **** 		    if(ptr[i] == '\n')
 1082              		.loc 3 32 7 is_stmt 1 view .LVU257
  32:Source/m2a.c  **** 		    if(ptr[i] == '\n')
 1083              		.loc 3 32 13 is_stmt 0 view .LVU258
 1084 001e 2E19     		adds	r6, r5, r4
 1085 0020 2B5D     		ldrb	r3, [r5, r4]	@ zero_extendqisi2
  32:Source/m2a.c  **** 		    if(ptr[i] == '\n')
 1086              		.loc 3 32 9 view .LVU259
 1087 0022 0A2B     		cmp	r3, #10
 1088 0024 F4D1     		bne	.L99
  33:Source/m2a.c  **** 
 1089              		.loc 3 33 8 is_stmt 1 view .LVU260
 1090 0026 0D21     		movs	r1, #13
 1091 0028 0548     		ldr	r0, .L106
 1092 002a FFF7FEFF 		bl	usart_send_blocking
 1093              	.LVL100:
 1094 002e EFE7     		b	.L99
 1095              	.LVL101:
 1096              	.L105:
  36:Source/m2a.c  **** 	    }
  37:Source/m2a.c  **** 
  38:Source/m2a.c  **** 	    return i;
  39:Source/m2a.c  ****     }
ARM GAS  m2a.s 			page 27


  40:Source/m2a.c  **** 
  41:Source/m2a.c  ****     errno = EIO;
 1097              		.loc 3 41 4 view .LVU261
 1098              		.loc 3 41 6 is_stmt 0 view .LVU262
 1099 0030 FFF7FEFF 		bl	__errno
 1100              	.LVL102:
 1101              		.loc 3 41 10 view .LVU263
 1102 0034 0523     		movs	r3, #5
 1103 0036 0360     		str	r3, [r0]
  42:Source/m2a.c  ****     return -1;
 1104              		.loc 3 42 5 is_stmt 1 view .LVU264
 1105              		.loc 3 42 12 is_stmt 0 view .LVU265
 1106 0038 4FF0FF34 		mov	r4, #-1
 1107              	.L96:
  43:Source/m2a.c  **** }
 1108              		.loc 3 43 1 view .LVU266
 1109 003c 2046     		mov	r0, r4
 1110 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1111              	.L107:
 1112              		.align	2
 1113              	.L106:
 1114 0040 00440040 		.word	1073759232
 1115              		.cfi_endproc
 1116              	.LFE16:
 1118              		.section	.text.fn_convertToCaps,"ax",%progbits
 1119              		.align	1
 1120              		.global	fn_convertToCaps
 1121              		.syntax unified
 1122              		.thumb
 1123              		.thumb_func
 1125              	fn_convertToCaps:
 1126              	.LVL103:
 1127              	.LFB18:
  44:Source/m2a.c  **** 
  45:Source/m2a.c  **** // Below is a standard template for just about any embedded
  46:Source/m2a.c  **** //  system main() loop. 
  47:Source/m2a.c  **** int main(void)  {
  48:Source/m2a.c  ****    
  49:Source/m2a.c  ****   // setup software structures need for application
  50:Source/m2a.c  ****   static struct st_circBuff st_circularBuffer;
  51:Source/m2a.c  ****   static char buffer[BUFFER_SIZE];
  52:Source/m2a.c  ****   fn_circBuffInit(&st_circularBuffer, buffer, BUFFER_SIZE);
  53:Source/m2a.c  **** 
  54:Source/m2a.c  ****   char c_charToSend = '\0';
  55:Source/m2a.c  **** 
  56:Source/m2a.c  ****   // initialize the hardware
  57:Source/m2a.c  ****   clock_setup();
  58:Source/m2a.c  ****   usart_setup(); 
  59:Source/m2a.c  ****   setup_tim3();
  60:Source/m2a.c  **** 
  61:Source/m2a.c  ****   gpio_mode_setup(LED2_GPIO_Port, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, LED2_Pin);
  62:Source/m2a.c  ****   gpio_mode_setup(BUT1_GPIO_Port, GPIO_MODE_INPUT, GPIO_PUPD_NONE, BUT1_Pin);
  63:Source/m2a.c  **** 
  64:Source/m2a.c  ****   LED_OFF;
  65:Source/m2a.c  **** 
  66:Source/m2a.c  ****   while(true){
  67:Source/m2a.c  **** 
ARM GAS  m2a.s 			page 28


  68:Source/m2a.c  ****     //First, check if we need to get data from USART and get it
  69:Source/m2a.c  ****     if(usart_get_flag(USART_CONSOLE, USART_ISR_RXNE))
  70:Source/m2a.c  ****       fn_circBuffPut(&st_circularBuffer, usart_recv_blocking(USART_CONSOLE));
  71:Source/m2a.c  **** 
  72:Source/m2a.c  ****     //Before doing anything else, check we have data
  73:Source/m2a.c  ****     if(!fn_circBuffEmpty(&st_circularBuffer)){
  74:Source/m2a.c  ****       fn_circBuffGet(&st_circularBuffer, &c_charToSend);
  75:Source/m2a.c  ****       fn_convertToCaps(&c_charToSend);
  76:Source/m2a.c  **** 
  77:Source/m2a.c  ****       if(IS_B1_PRESSED) //DECRYPT
  78:Source/m2a.c  ****         c_charToSend = fn_decryptText(c_charToSend);
  79:Source/m2a.c  **** 
  80:Source/m2a.c  ****       else if(IS_B1_RELEASED) //ENCRYPT
  81:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
  82:Source/m2a.c  ****       
  83:Source/m2a.c  ****       else{ //ENCRYPT
  84:Source/m2a.c  ****         printf("Indeterminate button state!... Defaulting to Encrypt!");
  85:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
  86:Source/m2a.c  ****       }
  87:Source/m2a.c  **** 
  88:Source/m2a.c  ****       //Spit it back to the console
  89:Source/m2a.c  ****       if(usart_get_flag(USART_CONSOLE, USART_ISR_TXE))
  90:Source/m2a.c  ****         usart_send_blocking(USART_CONSOLE, c_charToSend);
  91:Source/m2a.c  ****     }
  92:Source/m2a.c  **** 
  93:Source/m2a.c  ****     //Toggle Led
  94:Source/m2a.c  ****     if(timer_get_flag(TIM3,TIM_SR_CC1IF)){
  95:Source/m2a.c  ****       timer_clear_flag(TIM3, TIM_SR_CC1IF);
  96:Source/m2a.c  **** 
  97:Source/m2a.c  ****       if(IS_B1_PRESSED)
  98:Source/m2a.c  ****         timer_set_period(TIM3, 2500);
  99:Source/m2a.c  ****       else
 100:Source/m2a.c  ****         timer_set_period(TIM3, 10000);
 101:Source/m2a.c  ****         
 102:Source/m2a.c  ****       TOGGLE_LED;
 103:Source/m2a.c  ****     }
 104:Source/m2a.c  ****   }
 105:Source/m2a.c  ****   return 0;    // NEVER EXECUTES
 106:Source/m2a.c  **** } 
 107:Source/m2a.c  **** 
 108:Source/m2a.c  **** //Will only convert a character to caps if it is in the alphabet and lowercase, stores in the param
 109:Source/m2a.c  **** void fn_convertToCaps(char* pc_Convert){
 1128              		.loc 3 109 40 is_stmt 1 view -0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 0, uses_anonymous_args = 0
 1132              		@ link register save eliminated.
 110:Source/m2a.c  ****   if(*pc_Convert >= 'a' && *pc_Convert <= 'z')
 1133              		.loc 3 110 3 view .LVU268
 1134              		.loc 3 110 6 is_stmt 0 view .LVU269
 1135 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1136              		.loc 3 110 25 view .LVU270
 1137 0002 A2F16103 		sub	r3, r2, #97
 1138 0006 DBB2     		uxtb	r3, r3
 1139              		.loc 3 110 5 view .LVU271
 1140 0008 192B     		cmp	r3, #25
 1141 000a 01D8     		bhi	.L108
ARM GAS  m2a.s 			page 29


 111:Source/m2a.c  ****     *pc_Convert = (*pc_Convert - 'a') + 'A';  
 1142              		.loc 3 111 5 is_stmt 1 view .LVU272
 1143              		.loc 3 111 39 is_stmt 0 view .LVU273
 1144 000c 203A     		subs	r2, r2, #32
 1145              		.loc 3 111 17 view .LVU274
 1146 000e 0270     		strb	r2, [r0]
 1147              	.L108:
 112:Source/m2a.c  **** }
 1148              		.loc 3 112 1 view .LVU275
 1149 0010 7047     		bx	lr
 1150              		.cfi_endproc
 1151              	.LFE18:
 1153              		.section	.text.fn_encryptText,"ax",%progbits
 1154              		.align	1
 1155              		.global	fn_encryptText
 1156              		.syntax unified
 1157              		.thumb
 1158              		.thumb_func
 1160              	fn_encryptText:
 1161              	.LVL104:
 1162              	.LFB19:
 113:Source/m2a.c  **** 
 114:Source/m2a.c  **** //Encrypt using the cipher and return the encrypted key
 115:Source/m2a.c  **** char fn_encryptText(char c_toEncrypt){
 1163              		.loc 3 115 38 is_stmt 1 view -0
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 0
 1166              		@ frame_needed = 0, uses_anonymous_args = 0
 1167              		@ link register save eliminated.
 1168              		.loc 3 115 38 is_stmt 0 view .LVU277
 1169 0000 10B4     		push	{r4}
 1170              	.LCFI16:
 1171              		.cfi_def_cfa_offset 4
 1172              		.cfi_offset 4, -4
 116:Source/m2a.c  ****   static uint8_t u8_cipherEPosition = 0;
 1173              		.loc 3 116 3 is_stmt 1 view .LVU278
 117:Source/m2a.c  **** 
 118:Source/m2a.c  ****   c_toEncrypt = (((c_toEncrypt - 'A') + (ac_CIPHER[u8_cipherEPosition] - 'A')) % 26) + 'A';
 1174              		.loc 3 118 3 view .LVU279
 1175              		.loc 3 118 32 is_stmt 0 view .LVU280
 1176 0002 4138     		subs	r0, r0, #65
 1177              	.LVL105:
 1178              		.loc 3 118 51 view .LVU281
 1179 0004 0E4C     		ldr	r4, .L114
 1180 0006 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1181 0008 0E4A     		ldr	r2, .L114+4
 1182 000a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1183              		.loc 3 118 72 view .LVU282
 1184 000c 413A     		subs	r2, r2, #65
 1185              		.loc 3 118 39 view .LVU283
 1186 000e 0244     		add	r2, r2, r0
 1187              		.loc 3 118 80 view .LVU284
 1188 0010 0D49     		ldr	r1, .L114+8
 1189 0012 81FB0201 		smull	r0, r1, r1, r2
 1190 0016 D017     		asrs	r0, r2, #31
 1191 0018 C0EBE100 		rsb	r0, r0, r1, asr #3
 1192 001c 1A21     		movs	r1, #26
ARM GAS  m2a.s 			page 30


 1193 001e 01FB1020 		mls	r0, r1, r0, r2
 1194              		.loc 3 118 86 view .LVU285
 1195 0022 C0B2     		uxtb	r0, r0
 1196              		.loc 3 118 15 view .LVU286
 1197 0024 4130     		adds	r0, r0, #65
 1198 0026 C0B2     		uxtb	r0, r0
 1199              	.LVL106:
 119:Source/m2a.c  ****   ++u8_cipherEPosition;
 1200              		.loc 3 119 3 is_stmt 1 view .LVU287
 1201 0028 0133     		adds	r3, r3, #1
 1202 002a DBB2     		uxtb	r3, r3
 1203 002c 2370     		strb	r3, [r4]
 120:Source/m2a.c  **** 
 121:Source/m2a.c  ****   u8_cipherEPosition = (u8_cipherEPosition == CIPHER_SIZE) ? 0 : u8_cipherEPosition;
 1204              		.loc 3 121 3 view .LVU288
 1205              		.loc 3 121 22 is_stmt 0 view .LVU289
 1206 002e 0D2B     		cmp	r3, #13
 1207 0030 04D0     		beq	.L113
 1208              	.L111:
 1209              		.loc 3 121 22 discriminator 4 view .LVU290
 1210 0032 034A     		ldr	r2, .L114
 1211 0034 1370     		strb	r3, [r2]
 122:Source/m2a.c  **** 
 123:Source/m2a.c  ****   return c_toEncrypt;
 1212              		.loc 3 123 3 is_stmt 1 discriminator 4 view .LVU291
 124:Source/m2a.c  **** }
 1213              		.loc 3 124 1 is_stmt 0 discriminator 4 view .LVU292
 1214 0036 5DF8044B 		ldr	r4, [sp], #4
 1215              	.LCFI17:
 1216              		.cfi_remember_state
 1217              		.cfi_restore 4
 1218              		.cfi_def_cfa_offset 0
 1219 003a 7047     		bx	lr
 1220              	.L113:
 1221              	.LCFI18:
 1222              		.cfi_restore_state
 121:Source/m2a.c  **** 
 1223              		.loc 3 121 22 view .LVU293
 1224 003c 0023     		movs	r3, #0
 1225 003e F8E7     		b	.L111
 1226              	.L115:
 1227              		.align	2
 1228              	.L114:
 1229 0040 00000000 		.word	.LANCHOR11
 1230 0044 00000000 		.word	.LANCHOR12
 1231 0048 4FECC44E 		.word	1321528399
 1232              		.cfi_endproc
 1233              	.LFE19:
 1235              		.section	.text.fn_decryptText,"ax",%progbits
 1236              		.align	1
 1237              		.global	fn_decryptText
 1238              		.syntax unified
 1239              		.thumb
 1240              		.thumb_func
 1242              	fn_decryptText:
 1243              	.LVL107:
 1244              	.LFB20:
ARM GAS  m2a.s 			page 31


 125:Source/m2a.c  **** 
 126:Source/m2a.c  **** //Decrypt using the cipher and return the decrypted key
 127:Source/m2a.c  **** char fn_decryptText(char c_toDecrypt){
 1245              		.loc 3 127 38 is_stmt 1 view -0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 0
 1248              		@ frame_needed = 0, uses_anonymous_args = 0
 1249              		@ link register save eliminated.
 1250              		.loc 3 127 38 is_stmt 0 view .LVU295
 1251 0000 10B4     		push	{r4}
 1252              	.LCFI19:
 1253              		.cfi_def_cfa_offset 4
 1254              		.cfi_offset 4, -4
 128:Source/m2a.c  ****   static uint8_t u8_cipherDPosition = 0;
 1255              		.loc 3 128 3 is_stmt 1 view .LVU296
 129:Source/m2a.c  **** 
 130:Source/m2a.c  ****   c_toDecrypt = ((c_toDecrypt - ac_CIPHER[u8_cipherDPosition] + 26) % 26) + 'A';
 1256              		.loc 3 130 3 view .LVU297
 1257              		.loc 3 130 42 is_stmt 0 view .LVU298
 1258 0002 0F4C     		ldr	r4, .L120
 1259 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1260 0006 0F4A     		ldr	r2, .L120+4
 1261 0008 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1262              		.loc 3 130 31 view .LVU299
 1263 000a 821A     		subs	r2, r0, r2
 1264              		.loc 3 130 63 view .LVU300
 1265 000c 1A32     		adds	r2, r2, #26
 1266              		.loc 3 130 69 view .LVU301
 1267 000e 0E49     		ldr	r1, .L120+8
 1268 0010 81FB0201 		smull	r0, r1, r1, r2
 1269              	.LVL108:
 1270              		.loc 3 130 69 view .LVU302
 1271 0014 D017     		asrs	r0, r2, #31
 1272 0016 C0EBE100 		rsb	r0, r0, r1, asr #3
 1273 001a 1A21     		movs	r1, #26
 1274 001c 01FB1020 		mls	r0, r1, r0, r2
 1275              		.loc 3 130 75 view .LVU303
 1276 0020 C0B2     		uxtb	r0, r0
 1277              		.loc 3 130 15 view .LVU304
 1278 0022 4130     		adds	r0, r0, #65
 1279 0024 C0B2     		uxtb	r0, r0
 1280              	.LVL109:
 131:Source/m2a.c  **** 
 132:Source/m2a.c  ****   ++u8_cipherDPosition;
 1281              		.loc 3 132 3 is_stmt 1 view .LVU305
 1282 0026 0133     		adds	r3, r3, #1
 1283 0028 DBB2     		uxtb	r3, r3
 1284 002a 2370     		strb	r3, [r4]
 133:Source/m2a.c  **** 
 134:Source/m2a.c  ****   u8_cipherDPosition = (u8_cipherDPosition == CIPHER_SIZE) ? 0 : u8_cipherDPosition;
 1285              		.loc 3 134 3 view .LVU306
 1286              		.loc 3 134 22 is_stmt 0 view .LVU307
 1287 002c 0D2B     		cmp	r3, #13
 1288 002e 04D0     		beq	.L119
 1289              	.L117:
 1290              		.loc 3 134 22 discriminator 4 view .LVU308
 1291 0030 034A     		ldr	r2, .L120
ARM GAS  m2a.s 			page 32


 1292 0032 1370     		strb	r3, [r2]
 135:Source/m2a.c  ****   
 136:Source/m2a.c  ****   return c_toDecrypt;
 1293              		.loc 3 136 3 is_stmt 1 discriminator 4 view .LVU309
 137:Source/m2a.c  **** }
 1294              		.loc 3 137 1 is_stmt 0 discriminator 4 view .LVU310
 1295 0034 5DF8044B 		ldr	r4, [sp], #4
 1296              	.LCFI20:
 1297              		.cfi_remember_state
 1298              		.cfi_restore 4
 1299              		.cfi_def_cfa_offset 0
 1300 0038 7047     		bx	lr
 1301              	.L119:
 1302              	.LCFI21:
 1303              		.cfi_restore_state
 134:Source/m2a.c  ****   
 1304              		.loc 3 134 22 view .LVU311
 1305 003a 0023     		movs	r3, #0
 1306 003c F8E7     		b	.L117
 1307              	.L121:
 1308 003e 00BF     		.align	2
 1309              	.L120:
 1310 0040 00000000 		.word	.LANCHOR13
 1311 0044 00000000 		.word	.LANCHOR12
 1312 0048 4FECC44E 		.word	1321528399
 1313              		.cfi_endproc
 1314              	.LFE20:
 1316              		.section	.text.setup_tim3,"ax",%progbits
 1317              		.align	1
 1318              		.global	setup_tim3
 1319              		.syntax unified
 1320              		.thumb
 1321              		.thumb_func
 1323              	setup_tim3:
 1324              	.LFB21:
 138:Source/m2a.c  **** 
 139:Source/m2a.c  **** void setup_tim3(){
 1325              		.loc 3 139 18 is_stmt 1 view -0
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 0
 1328              		@ frame_needed = 0, uses_anonymous_args = 0
 1329 0000 10B5     		push	{r4, lr}
 1330              	.LCFI22:
 1331              		.cfi_def_cfa_offset 8
 1332              		.cfi_offset 4, -8
 1333              		.cfi_offset 14, -4
 140:Source/m2a.c  ****   rcc_periph_reset_pulse(RST_TIM3);
 1334              		.loc 3 140 3 view .LVU313
 1335 0002 40F20170 		movw	r0, #1793
 1336 0006 FFF7FEFF 		bl	rcc_periph_reset_pulse
 1337              	.LVL110:
 141:Source/m2a.c  **** 	timer_set_prescaler(TIM3, 200);
 1338              		.loc 3 141 2 view .LVU314
 1339 000a 094C     		ldr	r4, .L124
 1340 000c C821     		movs	r1, #200
 1341 000e 2046     		mov	r0, r4
 1342 0010 FFF7FEFF 		bl	timer_set_prescaler
ARM GAS  m2a.s 			page 33


 1343              	.LVL111:
 142:Source/m2a.c  ****   //printf("%d\n", rcc_apb1_frequency);
 143:Source/m2a.c  ****   timer_set_period(TIM3, 10000);
 1344              		.loc 3 143 3 view .LVU315
 1345 0014 42F21071 		movw	r1, #10000
 1346 0018 2046     		mov	r0, r4
 1347 001a FFF7FEFF 		bl	timer_set_period
 1348              	.LVL112:
 144:Source/m2a.c  **** 	timer_enable_counter(TIM3);
 1349              		.loc 3 144 2 view .LVU316
 1350 001e 2046     		mov	r0, r4
 1351 0020 FFF7FEFF 		bl	timer_enable_counter
 1352              	.LVL113:
 145:Source/m2a.c  **** 	timer_enable_irq(TIM3, TIM_DIER_CC1IE);
 1353              		.loc 3 145 2 view .LVU317
 1354 0024 0221     		movs	r1, #2
 1355 0026 2046     		mov	r0, r4
 1356 0028 FFF7FEFF 		bl	timer_enable_irq
 1357              	.LVL114:
 146:Source/m2a.c  **** }...
 1358              		.loc 3 146 1 is_stmt 0 view .LVU318
 1359 002c 10BD     		pop	{r4, pc}
 1360              	.L125:
 1361 002e 00BF     		.align	2
 1362              	.L124:
 1363 0030 00040040 		.word	1073742848
 1364              		.cfi_endproc
 1365              	.LFE21:
 1367              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1368              		.align	2
 1369              	.LC8:
 1370 0000 496E6465 		.ascii	"Indeterminate button state!... Defaulting to Encryp"
 1370      7465726D 
 1370      696E6174 
 1370      65206275 
 1370      74746F6E 
 1371 0033 742100   		.ascii	"t!\000"
 1372              		.section	.text.main,"ax",%progbits
 1373              		.align	1
 1374              		.global	main
 1375              		.syntax unified
 1376              		.thumb
 1377              		.thumb_func
 1379              	main:
 1380              	.LFB17:
  47:Source/m2a.c  **** int main(void)  {
 1381              		.loc 3 47 16 is_stmt 1 view -0
 1382              		.cfi_startproc
 1383              		@ Volatile: function does not return.
 1384              		@ args = 0, pretend = 0, frame = 8
 1385              		@ frame_needed = 0, uses_anonymous_args = 0
 1386 0000 00B5     		push	{lr}
 1387              	.LCFI23:
 1388              		.cfi_def_cfa_offset 4
 1389              		.cfi_offset 14, -4
 1390 0002 83B0     		sub	sp, sp, #12
 1391              	.LCFI24:
ARM GAS  m2a.s 			page 34


 1392              		.cfi_def_cfa_offset 16
  50:Source/m2a.c  ****   static struct st_circBuff st_circularBuffer;
 1393              		.loc 3 50 3 view .LVU320
  51:Source/m2a.c  ****   static char buffer[BUFFER_SIZE];
 1394              		.loc 3 51 3 view .LVU321
  52:Source/m2a.c  ****   fn_circBuffInit(&st_circularBuffer, buffer, BUFFER_SIZE);
 1395              		.loc 3 52 3 view .LVU322
 1396 0004 4FF48072 		mov	r2, #256
 1397 0008 4749     		ldr	r1, .L140
 1398 000a 4848     		ldr	r0, .L140+4
 1399 000c FFF7FEFF 		bl	fn_circBuffInit
 1400              	.LVL115:
  54:Source/m2a.c  ****   char c_charToSend = '\0';
 1401              		.loc 3 54 3 view .LVU323
  54:Source/m2a.c  ****   char c_charToSend = '\0';
 1402              		.loc 3 54 8 is_stmt 0 view .LVU324
 1403 0010 0024     		movs	r4, #0
 1404 0012 8DF80740 		strb	r4, [sp, #7]
  57:Source/m2a.c  ****   clock_setup();
 1405              		.loc 3 57 3 is_stmt 1 view .LVU325
 1406 0016 FFF7FEFF 		bl	clock_setup
 1407              	.LVL116:
  58:Source/m2a.c  ****   usart_setup(); 
 1408              		.loc 3 58 3 view .LVU326
 1409 001a FFF7FEFF 		bl	usart_setup
 1410              	.LVL117:
  59:Source/m2a.c  ****   setup_tim3();
 1411              		.loc 3 59 3 view .LVU327
 1412 001e FFF7FEFF 		bl	setup_tim3
 1413              	.LVL118:
  61:Source/m2a.c  ****   gpio_mode_setup(LED2_GPIO_Port, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, LED2_Pin);
 1414              		.loc 3 61 3 view .LVU328
 1415 0022 2023     		movs	r3, #32
 1416 0024 0122     		movs	r2, #1
 1417 0026 1146     		mov	r1, r2
 1418 0028 4FF09040 		mov	r0, #1207959552
 1419 002c FFF7FEFF 		bl	gpio_mode_setup
 1420              	.LVL119:
  62:Source/m2a.c  ****   gpio_mode_setup(BUT1_GPIO_Port, GPIO_MODE_INPUT, GPIO_PUPD_NONE, BUT1_Pin);
 1421              		.loc 3 62 3 view .LVU329
 1422 0030 4FF40053 		mov	r3, #8192
 1423 0034 2246     		mov	r2, r4
 1424 0036 2146     		mov	r1, r4
 1425 0038 3D48     		ldr	r0, .L140+8
 1426 003a FFF7FEFF 		bl	gpio_mode_setup
 1427              	.LVL120:
  64:Source/m2a.c  ****   LED_OFF;
 1428              		.loc 3 64 3 view .LVU330
 1429 003e 2021     		movs	r1, #32
 1430 0040 4FF09040 		mov	r0, #1207959552
 1431 0044 FFF7FEFF 		bl	gpio_clear
 1432              	.LVL121:
 1433 0048 1DE0     		b	.L132
 1434              	.L139:
  70:Source/m2a.c  ****       fn_circBuffPut(&st_circularBuffer, usart_recv_blocking(USART_CONSOLE));
 1435              		.loc 3 70 7 view .LVU331
  70:Source/m2a.c  ****       fn_circBuffPut(&st_circularBuffer, usart_recv_blocking(USART_CONSOLE));
ARM GAS  m2a.s 			page 35


 1436              		.loc 3 70 42 is_stmt 0 view .LVU332
 1437 004a 3A48     		ldr	r0, .L140+12
 1438 004c FFF7FEFF 		bl	usart_recv_blocking
 1439              	.LVL122:
  70:Source/m2a.c  ****       fn_circBuffPut(&st_circularBuffer, usart_recv_blocking(USART_CONSOLE));
 1440              		.loc 3 70 7 view .LVU333
 1441 0050 C1B2     		uxtb	r1, r0
 1442 0052 3648     		ldr	r0, .L140+4
 1443 0054 FFF7FEFF 		bl	fn_circBuffPut
 1444              	.LVL123:
 1445 0058 1BE0     		b	.L127
 1446              	.L129:
  80:Source/m2a.c  ****       else if(IS_B1_RELEASED) //ENCRYPT
 1447              		.loc 3 80 12 is_stmt 1 view .LVU334
  80:Source/m2a.c  ****       else if(IS_B1_RELEASED) //ENCRYPT
 1448              		.loc 3 80 16 is_stmt 0 view .LVU335
 1449 005a 4FF40051 		mov	r1, #8192
 1450 005e 3448     		ldr	r0, .L140+8
 1451 0060 FFF7FEFF 		bl	gpio_get
 1452              	.LVL124:
  80:Source/m2a.c  ****       else if(IS_B1_RELEASED) //ENCRYPT
 1453              		.loc 3 80 14 view .LVU336
 1454 0064 90B3     		cbz	r0, .L131
  81:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1455              		.loc 3 81 9 is_stmt 1 view .LVU337
  81:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1456              		.loc 3 81 24 is_stmt 0 view .LVU338
 1457 0066 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1458 006a FFF7FEFF 		bl	fn_encryptText
 1459              	.LVL125:
  81:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1460              		.loc 3 81 22 view .LVU339
 1461 006e 8DF80700 		strb	r0, [sp, #7]
 1462              	.L130:
  89:Source/m2a.c  ****       if(usart_get_flag(USART_CONSOLE, USART_ISR_TXE))
 1463              		.loc 3 89 7 is_stmt 1 view .LVU340
  89:Source/m2a.c  ****       if(usart_get_flag(USART_CONSOLE, USART_ISR_TXE))
 1464              		.loc 3 89 10 is_stmt 0 view .LVU341
 1465 0072 8021     		movs	r1, #128
 1466 0074 2F48     		ldr	r0, .L140+12
 1467 0076 FFF7FEFF 		bl	usart_get_flag
 1468              	.LVL126:
  89:Source/m2a.c  ****       if(usart_get_flag(USART_CONSOLE, USART_ISR_TXE))
 1469              		.loc 3 89 9 view .LVU342
 1470 007a 88BB     		cbnz	r0, .L137
 1471              	.L128:
  94:Source/m2a.c  ****     if(timer_get_flag(TIM3,TIM_SR_CC1IF)){
 1472              		.loc 3 94 5 is_stmt 1 view .LVU343
  94:Source/m2a.c  ****     if(timer_get_flag(TIM3,TIM_SR_CC1IF)){
 1473              		.loc 3 94 8 is_stmt 0 view .LVU344
 1474 007c 0221     		movs	r1, #2
 1475 007e 2E48     		ldr	r0, .L140+16
 1476 0080 FFF7FEFF 		bl	timer_get_flag
 1477              	.LVL127:
  94:Source/m2a.c  ****     if(timer_get_flag(TIM3,TIM_SR_CC1IF)){
 1478              		.loc 3 94 7 view .LVU345
 1479 0084 90BB     		cbnz	r0, .L138
ARM GAS  m2a.s 			page 36


 1480              	.L132:
  66:Source/m2a.c  ****   while(true){
 1481              		.loc 3 66 3 is_stmt 1 view .LVU346
  69:Source/m2a.c  ****     if(usart_get_flag(USART_CONSOLE, USART_ISR_RXNE))
 1482              		.loc 3 69 5 view .LVU347
  69:Source/m2a.c  ****     if(usart_get_flag(USART_CONSOLE, USART_ISR_RXNE))
 1483              		.loc 3 69 8 is_stmt 0 view .LVU348
 1484 0086 2021     		movs	r1, #32
 1485 0088 2A48     		ldr	r0, .L140+12
 1486 008a FFF7FEFF 		bl	usart_get_flag
 1487              	.LVL128:
  69:Source/m2a.c  ****     if(usart_get_flag(USART_CONSOLE, USART_ISR_RXNE))
 1488              		.loc 3 69 7 view .LVU349
 1489 008e 0028     		cmp	r0, #0
 1490 0090 DBD1     		bne	.L139
 1491              	.L127:
  73:Source/m2a.c  ****     if(!fn_circBuffEmpty(&st_circularBuffer)){
 1492              		.loc 3 73 5 is_stmt 1 view .LVU350
  73:Source/m2a.c  ****     if(!fn_circBuffEmpty(&st_circularBuffer)){
 1493              		.loc 3 73 9 is_stmt 0 view .LVU351
 1494 0092 2648     		ldr	r0, .L140+4
 1495 0094 FFF7FEFF 		bl	fn_circBuffEmpty
 1496              	.LVL129:
  73:Source/m2a.c  ****     if(!fn_circBuffEmpty(&st_circularBuffer)){
 1497              		.loc 3 73 7 view .LVU352
 1498 0098 0028     		cmp	r0, #0
 1499 009a EFD1     		bne	.L128
  74:Source/m2a.c  ****       fn_circBuffGet(&st_circularBuffer, &c_charToSend);
 1500              		.loc 3 74 7 is_stmt 1 view .LVU353
 1501 009c 0DF10701 		add	r1, sp, #7
 1502 00a0 2248     		ldr	r0, .L140+4
 1503 00a2 FFF7FEFF 		bl	fn_circBuffGet
 1504              	.LVL130:
  75:Source/m2a.c  ****       fn_convertToCaps(&c_charToSend);
 1505              		.loc 3 75 7 view .LVU354
 1506 00a6 0DF10700 		add	r0, sp, #7
 1507 00aa FFF7FEFF 		bl	fn_convertToCaps
 1508              	.LVL131:
  77:Source/m2a.c  ****       if(IS_B1_PRESSED) //DECRYPT
 1509              		.loc 3 77 7 view .LVU355
  77:Source/m2a.c  ****       if(IS_B1_PRESSED) //DECRYPT
 1510              		.loc 3 77 13 is_stmt 0 view .LVU356
 1511 00ae 4FF40051 		mov	r1, #8192
 1512 00b2 1F48     		ldr	r0, .L140+8
 1513 00b4 FFF7FEFF 		bl	gpio_get
 1514              	.LVL132:
  77:Source/m2a.c  ****       if(IS_B1_PRESSED) //DECRYPT
 1515              		.loc 3 77 9 view .LVU357
 1516 00b8 B0F5005F 		cmp	r0, #8192
 1517 00bc CDD0     		beq	.L129
  78:Source/m2a.c  ****         c_charToSend = fn_decryptText(c_charToSend);
 1518              		.loc 3 78 9 is_stmt 1 view .LVU358
  78:Source/m2a.c  ****         c_charToSend = fn_decryptText(c_charToSend);
 1519              		.loc 3 78 24 is_stmt 0 view .LVU359
 1520 00be 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1521 00c2 FFF7FEFF 		bl	fn_decryptText
 1522              	.LVL133:
ARM GAS  m2a.s 			page 37


  78:Source/m2a.c  ****         c_charToSend = fn_decryptText(c_charToSend);
 1523              		.loc 3 78 22 view .LVU360
 1524 00c6 8DF80700 		strb	r0, [sp, #7]
 1525 00ca D2E7     		b	.L130
 1526              	.L131:
  84:Source/m2a.c  ****         printf("Indeterminate button state!... Defaulting to Encrypt!");
 1527              		.loc 3 84 9 is_stmt 1 view .LVU361
 1528 00cc 1B48     		ldr	r0, .L140+20
 1529 00ce FFF7FEFF 		bl	printf
 1530              	.LVL134:
  85:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1531              		.loc 3 85 9 view .LVU362
  85:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1532              		.loc 3 85 24 is_stmt 0 view .LVU363
 1533 00d2 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1534 00d6 FFF7FEFF 		bl	fn_encryptText
 1535              	.LVL135:
  85:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1536              		.loc 3 85 22 view .LVU364
 1537 00da 8DF80700 		strb	r0, [sp, #7]
 1538 00de C8E7     		b	.L130
 1539              	.L137:
  90:Source/m2a.c  ****         usart_send_blocking(USART_CONSOLE, c_charToSend);
 1540              		.loc 3 90 9 is_stmt 1 view .LVU365
 1541 00e0 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 1542 00e4 1348     		ldr	r0, .L140+12
 1543 00e6 FFF7FEFF 		bl	usart_send_blocking
 1544              	.LVL136:
 1545 00ea C7E7     		b	.L128
 1546              	.L138:
  95:Source/m2a.c  ****       timer_clear_flag(TIM3, TIM_SR_CC1IF);
 1547              		.loc 3 95 7 view .LVU366
 1548 00ec 0221     		movs	r1, #2
 1549 00ee 1248     		ldr	r0, .L140+16
 1550 00f0 FFF7FEFF 		bl	timer_clear_flag
 1551              	.LVL137:
  97:Source/m2a.c  ****       if(IS_B1_PRESSED)
 1552              		.loc 3 97 7 view .LVU367
  97:Source/m2a.c  ****       if(IS_B1_PRESSED)
 1553              		.loc 3 97 13 is_stmt 0 view .LVU368
 1554 00f4 4FF40051 		mov	r1, #8192
 1555 00f8 0D48     		ldr	r0, .L140+8
 1556 00fa FFF7FEFF 		bl	gpio_get
 1557              	.LVL138:
  97:Source/m2a.c  ****       if(IS_B1_PRESSED)
 1558              		.loc 3 97 9 view .LVU369
 1559 00fe B0F5005F 		cmp	r0, #8192
 1560 0102 0AD0     		beq	.L133
  98:Source/m2a.c  ****         timer_set_period(TIM3, 2500);
 1561              		.loc 3 98 9 is_stmt 1 view .LVU370
 1562 0104 40F6C411 		movw	r1, #2500
 1563 0108 0B48     		ldr	r0, .L140+16
 1564 010a FFF7FEFF 		bl	timer_set_period
 1565              	.LVL139:
 1566              	.L134:
 102:Source/m2a.c  ****       TOGGLE_LED;
 1567              		.loc 3 102 7 view .LVU371
ARM GAS  m2a.s 			page 38


 1568 010e 2021     		movs	r1, #32
 1569 0110 4FF09040 		mov	r0, #1207959552
 1570 0114 FFF7FEFF 		bl	gpio_toggle
 1571              	.LVL140:
 1572 0118 B5E7     		b	.L132
 1573              	.L133:
 100:Source/m2a.c  ****         timer_set_period(TIM3, 10000);
 1574              		.loc 3 100 9 view .LVU372
 1575 011a 42F21071 		movw	r1, #10000
 1576 011e 0648     		ldr	r0, .L140+16
 1577 0120 FFF7FEFF 		bl	timer_set_period
 1578              	.LVL141:
 1579 0124 F3E7     		b	.L134
 1580              	.L141:
 1581 0126 00BF     		.align	2
 1582              	.L140:
 1583 0128 00000000 		.word	.LANCHOR14
 1584 012c 00000000 		.word	.LANCHOR15
 1585 0130 00080048 		.word	1207961600
 1586 0134 00440040 		.word	1073759232
 1587 0138 00040040 		.word	1073742848
 1588 013c 00000000 		.word	.LC8
 1589              		.cfi_endproc
 1590              	.LFE17:
 1592              		.global	ac_CIPHER
 1593              		.section	.bss.buffer.2,"aw",%nobits
 1594              		.align	2
 1595              		.set	.LANCHOR14,. + 0
 1598              	buffer.2:
 1599 0000 00000000 		.space	256
 1599      00000000 
 1599      00000000 
 1599      00000000 
 1599      00000000 
 1600              		.section	.bss.st_circularBuffer.3,"aw",%nobits
 1601              		.align	2
 1602              		.set	.LANCHOR15,. + 0
 1605              	st_circularBuffer.3:
 1606 0000 00000000 		.space	20
 1606      00000000 
 1606      00000000 
 1606      00000000 
 1606      00000000 
 1607              		.section	.bss.u8_cipherDPosition.0,"aw",%nobits
 1608              		.set	.LANCHOR13,. + 0
 1611              	u8_cipherDPosition.0:
 1612 0000 00       		.space	1
 1613              		.section	.bss.u8_cipherEPosition.1,"aw",%nobits
 1614              		.set	.LANCHOR11,. + 0
 1617              	u8_cipherEPosition.1:
 1618 0000 00       		.space	1
 1619              		.section	.rodata.__func__.10,"a"
 1620              		.align	2
 1621              		.set	.LANCHOR6,. + 0
 1624              	__func__.10:
 1625 0000 666E5F63 		.ascii	"fn_circBuffCapacity\000"
 1625      69726342 
ARM GAS  m2a.s 			page 39


 1625      75666643 
 1625      61706163 
 1625      69747900 
 1626              		.section	.rodata.__func__.11,"a"
 1627              		.align	2
 1628              		.set	.LANCHOR5,. + 0
 1631              	__func__.11:
 1632 0000 666E5F63 		.ascii	"fn_circBuffFull\000"
 1632      69726342 
 1632      75666646 
 1632      756C6C00 
 1633              		.section	.rodata.__func__.12,"a"
 1634              		.align	2
 1635              		.set	.LANCHOR4,. + 0
 1638              	__func__.12:
 1639 0000 666E5F63 		.ascii	"fn_circBuffInit\000"
 1639      69726342 
 1639      75666649 
 1639      6E697400 
 1640              		.section	.rodata.__func__.13,"a"
 1641              		.align	2
 1642              		.set	.LANCHOR3,. + 0
 1645              	__func__.13:
 1646 0000 666E5F63 		.ascii	"fn_circBuffEmpty\000"
 1646      69726342 
 1646      75666645 
 1646      6D707479 
 1646      00
 1647              		.section	.rodata.__func__.14,"a"
 1648              		.align	2
 1649              		.set	.LANCHOR2,. + 0
 1652              	__func__.14:
 1653 0000 666E5F63 		.ascii	"fn_circBuffReset\000"
 1653      69726342 
 1653      75666652 
 1653      65736574 
 1653      00
 1654              		.section	.rodata.__func__.4,"a"
 1655              		.align	2
 1656              		.set	.LANCHOR10,. + 0
 1659              	__func__.4:
 1660 0000 666E5F63 		.ascii	"fn_circBuffGetMostRecent\000"
 1660      69726342 
 1660      75666647 
 1660      65744D6F 
 1660      73745265 
 1661              		.section	.rodata.__func__.5,"a"
 1662              		.align	2
 1663              		.set	.LANCHOR1,. + 0
 1666              	__func__.5:
 1667 0000 666E5F72 		.ascii	"fn_retreatPointer\000"
 1667      65747265 
 1667      6174506F 
 1667      696E7465 
 1667      7200
 1668              		.section	.rodata.__func__.6,"a"
 1669              		.align	2
ARM GAS  m2a.s 			page 40


 1670              		.set	.LANCHOR9,. + 0
 1673              	__func__.6:
 1674 0000 666E5F63 		.ascii	"fn_circBuffGet\000"
 1674      69726342 
 1674      75666647 
 1674      657400
 1675              		.section	.rodata.__func__.7,"a"
 1676              		.align	2
 1677              		.set	.LANCHOR0,. + 0
 1680              	__func__.7:
 1681 0000 666E5F61 		.ascii	"fn_advancePointer\000"
 1681      6476616E 
 1681      6365506F 
 1681      696E7465 
 1681      7200
 1682              		.section	.rodata.__func__.8,"a"
 1683              		.align	2
 1684              		.set	.LANCHOR8,. + 0
 1687              	__func__.8:
 1688 0000 666E5F63 		.ascii	"fn_circBuffPut\000"
 1688      69726342 
 1688      75666650 
 1688      757400
 1689              		.section	.rodata.__func__.9,"a"
 1690              		.align	2
 1691              		.set	.LANCHOR7,. + 0
 1694              	__func__.9:
 1695 0000 666E5F63 		.ascii	"fn_circBuffSize\000"
 1695      69726342 
 1695      75666653 
 1695      697A6500 
 1696              		.section	.rodata.ac_CIPHER,"a"
 1697              		.align	2
 1698              		.set	.LANCHOR12,. + 0
 1701              	ac_CIPHER:
 1702 0000 54454E4E 		.ascii	"TENNESSEETECH"
 1702      45535345 
 1702      45544543 
 1702      48
 1703              		.text
 1704              	.Letext0:
 1705              		.file 4 "/home/lubuntu/Documents/ARMToolchain/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include
 1706              		.file 5 "/home/lubuntu/Documents/ARMToolchain/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include
 1707              		.file 6 "/home/lubuntu/Documents/libOpenCM3/libopencm3/include/libopencm3/stm32/l4/rcc.h"
 1708              		.file 7 "/home/lubuntu/Documents/ARMToolchain/gcc-arm-none-eabi-10.3-2021.10/lib/gcc/arm-none-eabi
 1709              		.file 8 "/home/lubuntu/Documents/libOpenCM3/libopencm3/include/libopencm3/stm32/common/rcc_common_
 1710              		.file 9 "/home/lubuntu/Documents/libOpenCM3/libopencm3/include/libopencm3/stm32/common/timer_commo
 1711              		.file 10 "/home/lubuntu/Documents/libOpenCM3/libopencm3/include/libopencm3/stm32/common/gpio_commo
 1712              		.file 11 "/home/lubuntu/Documents/libOpenCM3/libopencm3/include/libopencm3/stm32/common/gpio_commo
 1713              		.file 12 "/home/lubuntu/Documents/libOpenCM3/libopencm3/include/libopencm3/stm32/common/usart_comm
 1714              		.file 13 "/home/lubuntu/Documents/ARMToolchain/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/includ
 1715              		.file 14 "/home/lubuntu/Documents/ARMToolchain/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/includ
 1716              		.file 15 "/home/lubuntu/Documents/ARMToolchain/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/includ
ARM GAS  m2a.s 			page 41


DEFINED SYMBOLS
                            *ABS*:0000000000000000 m2a.c
               m2a.s:20     .rodata.fn_advancePointer.str1.4:0000000000000000 $d
               m2a.s:27     .text.fn_advancePointer:0000000000000000 $t
               m2a.s:32     .text.fn_advancePointer:0000000000000000 fn_advancePointer
               m2a.s:120    .text.fn_advancePointer:000000000000004c $d
               m2a.s:127    .text.fn_retreatPointer:0000000000000000 $t
               m2a.s:132    .text.fn_retreatPointer:0000000000000000 fn_retreatPointer
               m2a.s:187    .text.fn_retreatPointer:0000000000000028 $d
               m2a.s:194    .text.clock_setup:0000000000000000 $t
               m2a.s:200    .text.clock_setup:0000000000000000 clock_setup
               m2a.s:260    .text.usart_setup:0000000000000000 $t
               m2a.s:266    .text.usart_setup:0000000000000000 usart_setup
               m2a.s:330    .text.usart_setup:000000000000005c $d
               m2a.s:335    .text.fn_circBuffReset:0000000000000000 $t
               m2a.s:341    .text.fn_circBuffReset:0000000000000000 fn_circBuffReset
               m2a.s:382    .text.fn_circBuffReset:000000000000001c $d
               m2a.s:389    .text.fn_circBuffEmpty:0000000000000000 $t
               m2a.s:395    .text.fn_circBuffEmpty:0000000000000000 fn_circBuffEmpty
               m2a.s:456    .text.fn_circBuffEmpty:0000000000000028 $d
               m2a.s:463    .rodata.fn_circBuffInit.str1.4:0000000000000000 $d
               m2a.s:470    .text.fn_circBuffInit:0000000000000000 $t
               m2a.s:476    .text.fn_circBuffInit:0000000000000000 fn_circBuffInit
               m2a.s:541    .text.fn_circBuffInit:0000000000000034 $d
               m2a.s:549    .text.fn_circBuffFull:0000000000000000 $t
               m2a.s:555    .text.fn_circBuffFull:0000000000000000 fn_circBuffFull
               m2a.s:591    .text.fn_circBuffFull:0000000000000014 $d
               m2a.s:598    .text.fn_circBuffCapacity:0000000000000000 $t
               m2a.s:604    .text.fn_circBuffCapacity:0000000000000000 fn_circBuffCapacity
               m2a.s:640    .text.fn_circBuffCapacity:0000000000000014 $d
               m2a.s:647    .text.fn_circBuffSize:0000000000000000 $t
               m2a.s:653    .text.fn_circBuffSize:0000000000000000 fn_circBuffSize
               m2a.s:720    .text.fn_circBuffSize:000000000000002c $d
               m2a.s:727    .rodata.fn_circBuffPut.str1.4:0000000000000000 $d
               m2a.s:731    .text.fn_circBuffPut:0000000000000000 $t
               m2a.s:737    .text.fn_circBuffPut:0000000000000000 fn_circBuffPut
               m2a.s:786    .text.fn_circBuffPut:0000000000000024 $d
               m2a.s:793    .rodata.fn_circBuffGet.str1.4:0000000000000000 $d
               m2a.s:800    .text.fn_circBuffGet:0000000000000000 $t
               m2a.s:806    .text.fn_circBuffGet:0000000000000000 fn_circBuffGet
               m2a.s:905    .text.fn_circBuffGet:000000000000004c $d
               m2a.s:914    .rodata.fn_circBuffGetMostRecent.str1.4:0000000000000000 $d
               m2a.s:918    .text.fn_circBuffGetMostRecent:0000000000000000 $t
               m2a.s:924    .text.fn_circBuffGetMostRecent:0000000000000000 fn_circBuffGetMostRecent
               m2a.s:1022   .text.fn_circBuffGetMostRecent:0000000000000044 $d
               m2a.s:1029   .text._write:0000000000000000 $t
               m2a.s:1035   .text._write:0000000000000000 _write
               m2a.s:1114   .text._write:0000000000000040 $d
               m2a.s:1119   .text.fn_convertToCaps:0000000000000000 $t
               m2a.s:1125   .text.fn_convertToCaps:0000000000000000 fn_convertToCaps
               m2a.s:1154   .text.fn_encryptText:0000000000000000 $t
               m2a.s:1160   .text.fn_encryptText:0000000000000000 fn_encryptText
               m2a.s:1229   .text.fn_encryptText:0000000000000040 $d
               m2a.s:1236   .text.fn_decryptText:0000000000000000 $t
               m2a.s:1242   .text.fn_decryptText:0000000000000000 fn_decryptText
               m2a.s:1310   .text.fn_decryptText:0000000000000040 $d
               m2a.s:1317   .text.setup_tim3:0000000000000000 $t
ARM GAS  m2a.s 			page 42


               m2a.s:1323   .text.setup_tim3:0000000000000000 setup_tim3
               m2a.s:1363   .text.setup_tim3:0000000000000030 $d
               m2a.s:1368   .rodata.main.str1.4:0000000000000000 $d
               m2a.s:1373   .text.main:0000000000000000 $t
               m2a.s:1379   .text.main:0000000000000000 main
               m2a.s:1583   .text.main:0000000000000128 $d
               m2a.s:1701   .rodata.ac_CIPHER:0000000000000000 ac_CIPHER
               m2a.s:1594   .bss.buffer.2:0000000000000000 $d
               m2a.s:1598   .bss.buffer.2:0000000000000000 buffer.2
               m2a.s:1601   .bss.st_circularBuffer.3:0000000000000000 $d
               m2a.s:1605   .bss.st_circularBuffer.3:0000000000000000 st_circularBuffer.3
               m2a.s:1611   .bss.u8_cipherDPosition.0:0000000000000000 u8_cipherDPosition.0
               m2a.s:1612   .bss.u8_cipherDPosition.0:0000000000000000 $d
               m2a.s:1617   .bss.u8_cipherEPosition.1:0000000000000000 u8_cipherEPosition.1
               m2a.s:1618   .bss.u8_cipherEPosition.1:0000000000000000 $d
               m2a.s:1620   .rodata.__func__.10:0000000000000000 $d
               m2a.s:1624   .rodata.__func__.10:0000000000000000 __func__.10
               m2a.s:1627   .rodata.__func__.11:0000000000000000 $d
               m2a.s:1631   .rodata.__func__.11:0000000000000000 __func__.11
               m2a.s:1634   .rodata.__func__.12:0000000000000000 $d
               m2a.s:1638   .rodata.__func__.12:0000000000000000 __func__.12
               m2a.s:1641   .rodata.__func__.13:0000000000000000 $d
               m2a.s:1645   .rodata.__func__.13:0000000000000000 __func__.13
               m2a.s:1648   .rodata.__func__.14:0000000000000000 $d
               m2a.s:1652   .rodata.__func__.14:0000000000000000 __func__.14
               m2a.s:1655   .rodata.__func__.4:0000000000000000 $d
               m2a.s:1659   .rodata.__func__.4:0000000000000000 __func__.4
               m2a.s:1662   .rodata.__func__.5:0000000000000000 $d
               m2a.s:1666   .rodata.__func__.5:0000000000000000 __func__.5
               m2a.s:1669   .rodata.__func__.6:0000000000000000 $d
               m2a.s:1673   .rodata.__func__.6:0000000000000000 __func__.6
               m2a.s:1676   .rodata.__func__.7:0000000000000000 $d
               m2a.s:1680   .rodata.__func__.7:0000000000000000 __func__.7
               m2a.s:1683   .rodata.__func__.8:0000000000000000 $d
               m2a.s:1687   .rodata.__func__.8:0000000000000000 __func__.8
               m2a.s:1690   .rodata.__func__.9:0000000000000000 $d
               m2a.s:1694   .rodata.__func__.9:0000000000000000 __func__.9
               m2a.s:1697   .rodata.ac_CIPHER:0000000000000000 $d

UNDEFINED SYMBOLS
__assert_func
rcc_osc_on
rcc_set_main_pll
rcc_periph_clock_enable
gpio_mode_setup
gpio_set_af
usart_set_baudrate
usart_set_databits
usart_set_stopbits
usart_set_mode
usart_set_parity
usart_set_flow_control
usart_enable
usart_send_blocking
__errno
rcc_periph_reset_pulse
timer_set_prescaler
ARM GAS  m2a.s 			page 43


timer_set_period
timer_enable_counter
timer_enable_irq
gpio_clear
usart_recv_blocking
gpio_get
usart_get_flag
timer_get_flag
printf
timer_clear_flag
gpio_toggle
