ARM GAS  m2a.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"m2a.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.fn_advancePointer.str1.4,"aMS",%progbits,1
  20              		.align	2
  21              	.LC0:
  22 0000 7073745F 		.ascii	"pst_me\000"
  22      6D6500
  23 0007 00       		.align	2
  24              	.LC1:
  25 0008 536F7572 		.ascii	"Source/circularBuffer.h\000"
  25      63652F63 
  25      69726375 
  25      6C617242 
  25      75666665 
  26              		.section	.text.fn_advancePointer,"ax",%progbits
  27              		.align	1
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	fn_advancePointer:
  33              	.LVL0:
  34              	.LFB12:
  35              		.file 1 "Source/circularBuffer.h"
   1:Source/circularBuffer.h **** /* Ryan Colon
   2:Source/circularBuffer.h ****  * 02.15.22
   3:Source/circularBuffer.h ****  * Circular Buffer library for use in embedded systems
   4:Source/circularBuffer.h ****  * Modeled after standard c circular buffer library Embedded Artistry article
   5:Source/circularBuffer.h ****  */ 
   6:Source/circularBuffer.h **** 
   7:Source/circularBuffer.h **** #ifndef CIRCULARBUFFER_H
   8:Source/circularBuffer.h ****     #define CIRCULARBUFFER_H
   9:Source/circularBuffer.h **** 
  10:Source/circularBuffer.h ****     #include <assert.h>
  11:Source/circularBuffer.h **** 
  12:Source/circularBuffer.h ****     //This struct is the actual circular buffer
  13:Source/circularBuffer.h ****     typedef struct st_circBuff{
  14:Source/circularBuffer.h ****         char* pc_buffer;
  15:Source/circularBuffer.h **** 	    size_t u_head;
  16:Source/circularBuffer.h **** 	    size_t u_tail;
  17:Source/circularBuffer.h **** 	    size_t u_max;
  18:Source/circularBuffer.h **** 	    bool b_full;
ARM GAS  m2a.s 			page 2


  19:Source/circularBuffer.h ****     }st_circBuff;
  20:Source/circularBuffer.h **** 
  21:Source/circularBuffer.h ****     //"Empties" the buffer
  22:Source/circularBuffer.h ****     void fn_circBuffReset(st_circBuff* pst_me){
  23:Source/circularBuffer.h ****         assert(pst_me);
  24:Source/circularBuffer.h **** 
  25:Source/circularBuffer.h **** 	    pst_me->u_head = 0;
  26:Source/circularBuffer.h **** 	    pst_me->u_tail = 0;
  27:Source/circularBuffer.h **** 	    pst_me->b_full = false;
  28:Source/circularBuffer.h ****     }
  29:Source/circularBuffer.h ****     
  30:Source/circularBuffer.h ****     //Checks if the buffer is empty
  31:Source/circularBuffer.h ****     bool fn_circBuffEmpty(st_circBuff* pst_me){
  32:Source/circularBuffer.h ****         assert(pst_me);
  33:Source/circularBuffer.h **** 
  34:Source/circularBuffer.h **** 	    return (!pst_me->b_full && (pst_me->u_head == pst_me->u_tail));
  35:Source/circularBuffer.h ****     }
  36:Source/circularBuffer.h **** 
  37:Source/circularBuffer.h ****     //Initialize the buffer struct, user must provide the structure and buffer to maintain static a
  38:Source/circularBuffer.h ****     void fn_circBuffInit(st_circBuff* pst_me, char* pc_buff, size_t u_size){
  39:Source/circularBuffer.h ****         assert(pst_me && pc_buff && u_size);
  40:Source/circularBuffer.h ****     
  41:Source/circularBuffer.h ****         pst_me->pc_buffer = pc_buff;
  42:Source/circularBuffer.h ****         pst_me->u_max = u_size;
  43:Source/circularBuffer.h ****         fn_circBuffReset(pst_me);
  44:Source/circularBuffer.h **** 
  45:Source/circularBuffer.h ****         assert(fn_circBuffEmpty(pst_me));
  46:Source/circularBuffer.h ****     }
  47:Source/circularBuffer.h **** 
  48:Source/circularBuffer.h ****     //Checks if the buffer is full
  49:Source/circularBuffer.h ****     bool fn_circBuffFull(st_circBuff* pst_me){
  50:Source/circularBuffer.h ****         assert(pst_me);
  51:Source/circularBuffer.h **** 
  52:Source/circularBuffer.h **** 	return pst_me->b_full;
  53:Source/circularBuffer.h ****     }
  54:Source/circularBuffer.h **** 
  55:Source/circularBuffer.h ****     //Returns the maximum capacity of the buffer
  56:Source/circularBuffer.h ****     size_t fn_circBuffCapacity(st_circBuff* pst_me){
  57:Source/circularBuffer.h ****         assert(pst_me);
  58:Source/circularBuffer.h **** 
  59:Source/circularBuffer.h **** 	return pst_me->u_max;
  60:Source/circularBuffer.h ****     }
  61:Source/circularBuffer.h **** 
  62:Source/circularBuffer.h ****     //Returns the current amount of data in the buffer in (number of data types) NOT BITS/BYTES
  63:Source/circularBuffer.h ****     size_t fn_circBuffSize(st_circBuff* pst_me){
  64:Source/circularBuffer.h ****         assert(pst_me);
  65:Source/circularBuffer.h **** 
  66:Source/circularBuffer.h **** 	size_t u_size = pst_me->u_max;
  67:Source/circularBuffer.h **** 
  68:Source/circularBuffer.h **** 	if(!pst_me->b_full){
  69:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
  70:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
  71:Source/circularBuffer.h **** 		else
  72:Source/circularBuffer.h **** 			u_size = pst_me->u_max + pst_me->u_head - pst_me->u_tail;
  73:Source/circularBuffer.h **** 	}
  74:Source/circularBuffer.h **** 	
  75:Source/circularBuffer.h **** 	return u_size;
ARM GAS  m2a.s 			page 3


  76:Source/circularBuffer.h ****     }
  77:Source/circularBuffer.h **** 
  78:Source/circularBuffer.h ****     //Called by Put, moves the head and tail appropriately
  79:Source/circularBuffer.h ****     static void fn_advancePointer(st_circBuff* pst_me){
  36              		.loc 1 79 55 view -0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 0
  39              		@ frame_needed = 0, uses_anonymous_args = 0
  40              		.loc 1 79 55 is_stmt 0 view .LVU1
  41 0000 08B5     		push	{r3, lr}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 3, -8
  45              		.cfi_offset 14, -4
  80:Source/circularBuffer.h ****         assert(pst_me);
  46              		.loc 1 80 8 is_stmt 1 view .LVU2
  47              		.loc 1 80 20 is_stmt 0 view .LVU3
  48 0002 B0B1     		cbz	r0, .L6
  49 0004 0346     		mov	r3, r0
  81:Source/circularBuffer.h **** 
  82:Source/circularBuffer.h **** 	if(pst_me->b_full){
  50              		.loc 1 82 2 is_stmt 1 view .LVU4
  51              		.loc 1 82 11 is_stmt 0 view .LVU5
  52 0006 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
  53              		.loc 1 82 4 view .LVU6
  54 0008 2AB1     		cbz	r2, .L3
  83:Source/circularBuffer.h ****             if(++(pst_me->u_tail) == pst_me->u_max)
  55              		.loc 1 83 13 is_stmt 1 view .LVU7
  56              		.loc 1 83 25 is_stmt 0 view .LVU8
  57 000a 8268     		ldr	r2, [r0, #8]
  58              		.loc 1 83 16 view .LVU9
  59 000c 0132     		adds	r2, r2, #1
  60              		.loc 1 83 15 view .LVU10
  61 000e 8260     		str	r2, [r0, #8]
  62              		.loc 1 83 44 view .LVU11
  63 0010 C168     		ldr	r1, [r0, #12]
  64              		.loc 1 83 15 view .LVU12
  65 0012 8A42     		cmp	r2, r1
  66 0014 13D0     		beq	.L7
  67              	.L3:
  84:Source/circularBuffer.h **** 	        pst_me->u_tail = 0;
  85:Source/circularBuffer.h **** 	}
  86:Source/circularBuffer.h **** 
  87:Source/circularBuffer.h **** 	if(++(pst_me->u_head) == pst_me->u_max)
  68              		.loc 1 87 2 is_stmt 1 view .LVU13
  69              		.loc 1 87 14 is_stmt 0 view .LVU14
  70 0016 5A68     		ldr	r2, [r3, #4]
  71              		.loc 1 87 5 view .LVU15
  72 0018 0132     		adds	r2, r2, #1
  73              		.loc 1 87 4 view .LVU16
  74 001a 5A60     		str	r2, [r3, #4]
  75              		.loc 1 87 33 view .LVU17
  76 001c D968     		ldr	r1, [r3, #12]
  77              		.loc 1 87 4 view .LVU18
  78 001e 8A42     		cmp	r2, r1
  79 0020 10D0     		beq	.L8
  80              	.L4:
ARM GAS  m2a.s 			page 4


  88:Source/circularBuffer.h **** 	    pst_me->u_head = 0;
  89:Source/circularBuffer.h **** 
  90:Source/circularBuffer.h **** 	pst_me->b_full = (pst_me->u_head == pst_me->u_tail);
  81              		.loc 1 90 2 is_stmt 1 view .LVU19
  82              		.loc 1 90 26 is_stmt 0 view .LVU20
  83 0022 5A68     		ldr	r2, [r3, #4]
  84              		.loc 1 90 44 view .LVU21
  85 0024 9968     		ldr	r1, [r3, #8]
  86              		.loc 1 90 35 view .LVU22
  87 0026 8A42     		cmp	r2, r1
  88 0028 14BF     		ite	ne
  89 002a 0022     		movne	r2, #0
  90 002c 0122     		moveq	r2, #1
  91              		.loc 1 90 17 view .LVU23
  92 002e 1A74     		strb	r2, [r3, #16]
  91:Source/circularBuffer.h ****     }
  93              		.loc 1 91 5 view .LVU24
  94 0030 08BD     		pop	{r3, pc}
  95              	.L6:
  80:Source/circularBuffer.h **** 
  96              		.loc 1 80 22 discriminator 1 view .LVU25
  97 0032 064B     		ldr	r3, .L9
  98 0034 064A     		ldr	r2, .L9+4
  99 0036 5021     		movs	r1, #80
 100 0038 0648     		ldr	r0, .L9+8
 101              	.LVL1:
  80:Source/circularBuffer.h **** 
 102              		.loc 1 80 22 discriminator 1 view .LVU26
 103 003a FFF7FEFF 		bl	__assert_func
 104              	.LVL2:
 105              	.L7:
  84:Source/circularBuffer.h **** 	}
 106              		.loc 1 84 10 is_stmt 1 view .LVU27
  84:Source/circularBuffer.h **** 	}
 107              		.loc 1 84 25 is_stmt 0 view .LVU28
 108 003e 0022     		movs	r2, #0
 109 0040 8260     		str	r2, [r0, #8]
 110 0042 E8E7     		b	.L3
 111              	.L8:
  88:Source/circularBuffer.h **** 
 112              		.loc 1 88 6 is_stmt 1 view .LVU29
  88:Source/circularBuffer.h **** 
 113              		.loc 1 88 21 is_stmt 0 view .LVU30
 114 0044 0022     		movs	r2, #0
 115 0046 5A60     		str	r2, [r3, #4]
 116 0048 EBE7     		b	.L4
 117              	.L10:
 118 004a 00BF     		.align	2
 119              	.L9:
 120 004c 00000000 		.word	.LC0
 121 0050 00000000 		.word	.LANCHOR0
 122 0054 08000000 		.word	.LC1
 123              		.cfi_endproc
 124              	.LFE12:
 126              		.section	.text.fn_retreatPointer,"ax",%progbits
 127              		.align	1
 128              		.syntax unified
ARM GAS  m2a.s 			page 5


 129              		.thumb
 130              		.thumb_func
 132              	fn_retreatPointer:
 133              	.LVL3:
 134              	.LFB13:
  92:Source/circularBuffer.h **** 
  93:Source/circularBuffer.h ****     //Called by Get, moves the tail appropriately
  94:Source/circularBuffer.h ****     static void fn_retreatPointer(st_circBuff* pst_me){
 135              		.loc 1 94 55 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		.loc 1 94 55 is_stmt 0 view .LVU32
 140 0000 08B5     		push	{r3, lr}
 141              	.LCFI1:
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 3, -8
 144              		.cfi_offset 14, -4
  95:Source/circularBuffer.h ****         assert(pst_me);
 145              		.loc 1 95 8 is_stmt 1 view .LVU33
 146              		.loc 1 95 20 is_stmt 0 view .LVU34
 147 0002 40B1     		cbz	r0, .L15
  96:Source/circularBuffer.h **** 
  97:Source/circularBuffer.h **** 	pst_me->b_full = false;
 148              		.loc 1 97 2 is_stmt 1 view .LVU35
 149              		.loc 1 97 17 is_stmt 0 view .LVU36
 150 0004 0022     		movs	r2, #0
 151 0006 0274     		strb	r2, [r0, #16]
  98:Source/circularBuffer.h **** 
  99:Source/circularBuffer.h **** 	if(++(pst_me->u_tail) == pst_me->u_max)
 152              		.loc 1 99 2 is_stmt 1 view .LVU37
 153              		.loc 1 99 14 is_stmt 0 view .LVU38
 154 0008 8268     		ldr	r2, [r0, #8]
 155              		.loc 1 99 5 view .LVU39
 156 000a 0132     		adds	r2, r2, #1
 157              		.loc 1 99 4 view .LVU40
 158 000c 8260     		str	r2, [r0, #8]
 159              		.loc 1 99 33 view .LVU41
 160 000e C168     		ldr	r1, [r0, #12]
 161              		.loc 1 99 4 view .LVU42
 162 0010 8A42     		cmp	r2, r1
 163 0012 06D0     		beq	.L16
 164              	.L11:
 100:Source/circularBuffer.h **** 		pst_me->u_tail = 0;
 101:Source/circularBuffer.h **** 
 102:Source/circularBuffer.h ****     }
 165              		.loc 1 102 5 view .LVU43
 166 0014 08BD     		pop	{r3, pc}
 167              	.L15:
  95:Source/circularBuffer.h **** 
 168              		.loc 1 95 22 discriminator 1 view .LVU44
 169 0016 044B     		ldr	r3, .L17
 170 0018 044A     		ldr	r2, .L17+4
 171 001a 5F21     		movs	r1, #95
 172 001c 0448     		ldr	r0, .L17+8
 173              	.LVL4:
  95:Source/circularBuffer.h **** 
ARM GAS  m2a.s 			page 6


 174              		.loc 1 95 22 discriminator 1 view .LVU45
 175 001e FFF7FEFF 		bl	__assert_func
 176              	.LVL5:
 177              	.L16:
 100:Source/circularBuffer.h **** 		pst_me->u_tail = 0;
 178              		.loc 1 100 3 is_stmt 1 view .LVU46
 100:Source/circularBuffer.h **** 		pst_me->u_tail = 0;
 179              		.loc 1 100 18 is_stmt 0 view .LVU47
 180 0022 0022     		movs	r2, #0
 181 0024 8260     		str	r2, [r0, #8]
 182              		.loc 1 102 5 view .LVU48
 183 0026 F5E7     		b	.L11
 184              	.L18:
 185              		.align	2
 186              	.L17:
 187 0028 00000000 		.word	.LC0
 188 002c 00000000 		.word	.LANCHOR1
 189 0030 08000000 		.word	.LC1
 190              		.cfi_endproc
 191              	.LFE13:
 193              		.section	.text.fn_clock_setup,"ax",%progbits
 194              		.align	1
 195              		.global	fn_clock_setup
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 200              	fn_clock_setup:
 201              	.LFB0:
 202              		.file 2 "Source/embsysS20.h"
   1:Source/embsysS20.h **** #ifndef embsysS20_H
   2:Source/embsysS20.h ****     #define embsysS20_H
   3:Source/embsysS20.h **** 
   4:Source/embsysS20.h ****     #ifndef STM32L4
   5:Source/embsysS20.h ****         #define STM32L4
   6:Source/embsysS20.h ****     #endif
   7:Source/embsysS20.h **** 
   8:Source/embsysS20.h ****     #include <libopencm3/stm32/rcc.h>
   9:Source/embsysS20.h ****     #include <libopencm3/stm32/gpio.h>
  10:Source/embsysS20.h ****     #include <libopencm3/stm32/usart.h>
  11:Source/embsysS20.h ****     #include <libopencm3/cm3/nvic.h>
  12:Source/embsysS20.h ****     #include <libopencm3/stm32/timer.h>
  13:Source/embsysS20.h **** 
  14:Source/embsysS20.h ****     #define LED2_Pin GPIO5  //Pin number for PA5, the LED2 pin, can be found in nucleo board 64 use
  15:Source/embsysS20.h ****     #define LED2_GPIO_Port GPIOA  //PORTA address, can be found in libopencm3 docs
  16:Source/embsysS20.h ****     #define BUT1_GPIO_Port GPIOC  //PORTC address, can be found in libopencm3 docs
  17:Source/embsysS20.h ****     #define BUT1_Pin GPIO13  //Pin number for PC13, the B1 pin, can be found in the nucleo board 64
  18:Source/embsysS20.h **** 
  19:Source/embsysS20.h ****     #define USART_CONSOLE USART2 //PA2 (tx) and PA3 (rx), STM32-L452RE Reference Manual
  20:Source/embsysS20.h ****     #define USART_GPIO_Port GPIOA
  21:Source/embsysS20.h ****     #define USART_GPIO_TXPin GPIO2
  22:Source/embsysS20.h ****     #define USART_GPIO_RXPin GPIO3
  23:Source/embsysS20.h **** 
  24:Source/embsysS20.h ****     #define TOGGLE_LED gpio_toggle(LED2_GPIO_Port,LED2_Pin)
  25:Source/embsysS20.h ****     #define LED_ON gpio_set(LED2_GPIO_Port,LED2_Pin)
  26:Source/embsysS20.h ****     #define LED_OFF gpio_clear(LED2_GPIO_Port,LED2_Pin)
  27:Source/embsysS20.h ****     #define IS_LD2_SET  (gpio_get(LED2_GPIO_Port,LED2_Pin))
  28:Source/embsysS20.h ****     #define IS_LD2_RESET  ((IS_LD2_SET)^LED2_Pin)
ARM GAS  m2a.s 			page 7


  29:Source/embsysS20.h ****     #define IS_B1_RELEASED (gpio_get(BUT1_GPIO_Port,BUT1_Pin))
  30:Source/embsysS20.h ****     #define IS_B1_PRESSED ((IS_B1_RELEASED)^BUT1_Pin)
  31:Source/embsysS20.h ****     
  32:Source/embsysS20.h ****     void fn_clock_setup(void){
 203              		.loc 2 32 30 is_stmt 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 10B5     		push	{r4, lr}
 208              	.LCFI2:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 4, -8
 211              		.cfi_offset 14, -4
 212 0002 82B0     		sub	sp, sp, #8
 213              	.LCFI3:
 214              		.cfi_def_cfa_offset 16
  33:Source/embsysS20.h ****         rcc_osc_on(RCC_HSI16);
 215              		.loc 2 33 9 view .LVU50
 216 0004 0220     		movs	r0, #2
 217 0006 FFF7FEFF 		bl	rcc_osc_on
 218              	.LVL6:
  34:Source/embsysS20.h **** 
  35:Source/embsysS20.h ****         //16 MHz / 4 => 4 * 20 = 80 MHz / 2 = 40 MHz
  36:Source/embsysS20.h ****         rcc_set_main_pll(RCC_PLLCFGR_PLLSRC_HSI16, 4, 20, 0, 0, RCC_PLLCFGR_PLLR_DIV2);
 219              		.loc 2 36 9 view .LVU51
 220 000a 0024     		movs	r4, #0
 221 000c 0194     		str	r4, [sp, #4]
 222 000e 0094     		str	r4, [sp]
 223 0010 2346     		mov	r3, r4
 224 0012 1422     		movs	r2, #20
 225 0014 0421     		movs	r1, #4
 226 0016 0220     		movs	r0, #2
 227 0018 FFF7FEFF 		bl	rcc_set_main_pll
 228              	.LVL7:
  37:Source/embsysS20.h **** 
  38:Source/embsysS20.h ****         rcc_osc_on(RCC_PLL);
 229              		.loc 2 38 9 view .LVU52
 230 001c 2046     		mov	r0, r4
 231 001e FFF7FEFF 		bl	rcc_osc_on
 232              	.LVL8:
  39:Source/embsysS20.h **** 
  40:Source/embsysS20.h ****         rcc_periph_clock_enable(RCC_TIM2);
 233              		.loc 2 40 9 view .LVU53
 234 0022 4FF43060 		mov	r0, #2816
 235 0026 FFF7FEFF 		bl	rcc_periph_clock_enable
 236              	.LVL9:
  41:Source/embsysS20.h ****         rcc_periph_clock_enable(RCC_GPIOA);
 237              		.loc 2 41 9 view .LVU54
 238 002a 4FF41860 		mov	r0, #2432
 239 002e FFF7FEFF 		bl	rcc_periph_clock_enable
 240              	.LVL10:
  42:Source/embsysS20.h **** 	    rcc_periph_clock_enable(RCC_GPIOC);
 241              		.loc 2 42 6 view .LVU55
 242 0032 40F68210 		movw	r0, #2434
 243 0036 FFF7FEFF 		bl	rcc_periph_clock_enable
 244              	.LVL11:
  43:Source/embsysS20.h **** 	    rcc_periph_clock_enable(RCC_USART2);
ARM GAS  m2a.s 			page 8


 245              		.loc 2 43 6 view .LVU56
 246 003a 40F61130 		movw	r0, #2833
 247 003e FFF7FEFF 		bl	rcc_periph_clock_enable
 248              	.LVL12:
  44:Source/embsysS20.h **** 	    return;
 249              		.loc 2 44 6 view .LVU57
  45:Source/embsysS20.h ****     }
 250              		.loc 2 45 5 is_stmt 0 view .LVU58
 251 0042 02B0     		add	sp, sp, #8
 252              	.LCFI4:
 253              		.cfi_def_cfa_offset 8
 254              		@ sp needed
 255 0044 10BD     		pop	{r4, pc}
 256              		.cfi_endproc
 257              	.LFE0:
 259              		.section	.text.fn_usart_setup,"ax",%progbits
 260              		.align	1
 261              		.global	fn_usart_setup
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 266              	fn_usart_setup:
 267              	.LFB1:
  46:Source/embsysS20.h **** 
  47:Source/embsysS20.h ****     void fn_usart_setup(void){
 268              		.loc 2 47 30 is_stmt 1 view -0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272 0000 10B5     		push	{r4, lr}
 273              	.LCFI5:
 274              		.cfi_def_cfa_offset 8
 275              		.cfi_offset 4, -8
 276              		.cfi_offset 14, -4
  48:Source/embsysS20.h ****         /* Setup GPIO pins for USART */
  49:Source/embsysS20.h ****          gpio_mode_setup(USART_GPIO_Port, GPIO_MODE_AF, GPIO_PUPD_NONE, USART_GPIO_TXPin | USART_GP
 277              		.loc 2 49 10 view .LVU60
 278 0002 0C23     		movs	r3, #12
 279 0004 0022     		movs	r2, #0
 280 0006 0221     		movs	r1, #2
 281 0008 4FF09040 		mov	r0, #1207959552
 282 000c FFF7FEFF 		bl	gpio_mode_setup
 283              	.LVL13:
  50:Source/embsysS20.h ****         
  51:Source/embsysS20.h ****          /* Setup USART pins as alternate function. */
  52:Source/embsysS20.h ****          gpio_set_af(USART_GPIO_Port, GPIO_AF7, USART_GPIO_TXPin | USART_GPIO_RXPin); //AF7 = USART
 284              		.loc 2 52 10 view .LVU61
 285 0010 0C22     		movs	r2, #12
 286 0012 0721     		movs	r1, #7
 287 0014 4FF09040 		mov	r0, #1207959552
 288 0018 FFF7FEFF 		bl	gpio_set_af
 289              	.LVL14:
  53:Source/embsysS20.h **** 
  54:Source/embsysS20.h ****          /* Setup UART parameters. */
  55:Source/embsysS20.h ****          usart_set_baudrate(USART_CONSOLE, 57600);
 290              		.loc 2 55 10 view .LVU62
 291 001c 0F4C     		ldr	r4, .L23
ARM GAS  m2a.s 			page 9


 292 001e 4FF46141 		mov	r1, #57600
 293 0022 2046     		mov	r0, r4
 294 0024 FFF7FEFF 		bl	usart_set_baudrate
 295              	.LVL15:
  56:Source/embsysS20.h ****          usart_set_databits(USART_CONSOLE, 9);  // check the effect of parity on this fcn.
 296              		.loc 2 56 10 view .LVU63
 297 0028 0921     		movs	r1, #9
 298 002a 2046     		mov	r0, r4
 299 002c FFF7FEFF 		bl	usart_set_databits
 300              	.LVL16:
  57:Source/embsysS20.h ****          usart_set_stopbits(USART_CONSOLE, USART_STOPBITS_1);
 301              		.loc 2 57 10 view .LVU64
 302 0030 0021     		movs	r1, #0
 303 0032 2046     		mov	r0, r4
 304 0034 FFF7FEFF 		bl	usart_set_stopbits
 305              	.LVL17:
  58:Source/embsysS20.h ****          usart_set_mode(USART_CONSOLE, USART_MODE_TX_RX);
 306              		.loc 2 58 10 view .LVU65
 307 0038 0C21     		movs	r1, #12
 308 003a 2046     		mov	r0, r4
 309 003c FFF7FEFF 		bl	usart_set_mode
 310              	.LVL18:
  59:Source/embsysS20.h ****          usart_set_parity(USART_CONSOLE, USART_PARITY_ODD);
 311              		.loc 2 59 10 view .LVU66
 312 0040 4FF4C061 		mov	r1, #1536
 313 0044 2046     		mov	r0, r4
 314 0046 FFF7FEFF 		bl	usart_set_parity
 315              	.LVL19:
  60:Source/embsysS20.h ****          usart_set_flow_control(USART_CONSOLE, USART_FLOWCONTROL_NONE);
 316              		.loc 2 60 10 view .LVU67
 317 004a 0021     		movs	r1, #0
 318 004c 2046     		mov	r0, r4
 319 004e FFF7FEFF 		bl	usart_set_flow_control
 320              	.LVL20:
  61:Source/embsysS20.h **** 
  62:Source/embsysS20.h ****          /* everything is setup, so turn UART on */  
  63:Source/embsysS20.h ****          usart_enable(USART_CONSOLE);
 321              		.loc 2 63 10 view .LVU68
 322 0052 2046     		mov	r0, r4
 323 0054 FFF7FEFF 		bl	usart_enable
 324              	.LVL21:
  64:Source/embsysS20.h ****     }
 325              		.loc 2 64 5 is_stmt 0 view .LVU69
 326 0058 10BD     		pop	{r4, pc}
 327              	.L24:
 328 005a 00BF     		.align	2
 329              	.L23:
 330 005c 00440040 		.word	1073759232
 331              		.cfi_endproc
 332              	.LFE1:
 334              		.section	.text.fn_setup_tim2,"ax",%progbits
 335              		.align	1
 336              		.global	fn_setup_tim2
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 341              	fn_setup_tim2:
ARM GAS  m2a.s 			page 10


 342              	.LFB2:
  65:Source/embsysS20.h **** 
  66:Source/embsysS20.h ****     void fn_setup_tim2(){
 343              		.loc 2 66 25 is_stmt 1 view -0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347 0000 08B5     		push	{r3, lr}
 348              	.LCFI6:
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 3, -8
 351              		.cfi_offset 14, -4
  67:Source/embsysS20.h ****         rcc_periph_reset_pulse(RST_TIM2);
 352              		.loc 2 67 9 view .LVU71
 353 0002 4FF4E060 		mov	r0, #1792
 354 0006 FFF7FEFF 		bl	rcc_periph_reset_pulse
 355              	.LVL22:
  68:Source/embsysS20.h **** 
  69:Source/embsysS20.h ****         //rcc_APB1 is 4 MHz in this case, this can be verified by running the below print statement
  70:Source/embsysS20.h ****         //printf("%d\n", rcc_apb1_frequency);
  71:Source/embsysS20.h **** 
  72:Source/embsysS20.h ****         //4M / (200 * 10k) = 2 Hz, period = 0.5s
  73:Source/embsysS20.h ****         timer_set_prescaler(TIM2, 200);
 356              		.loc 2 73 9 view .LVU72
 357 000a C821     		movs	r1, #200
 358 000c 4FF08040 		mov	r0, #1073741824
 359 0010 FFF7FEFF 		bl	timer_set_prescaler
 360              	.LVL23:
  74:Source/embsysS20.h ****         timer_set_period(TIM2, 10000);
 361              		.loc 2 74 9 view .LVU73
 362 0014 42F21071 		movw	r1, #10000
 363 0018 4FF08040 		mov	r0, #1073741824
 364 001c FFF7FEFF 		bl	timer_set_period
 365              	.LVL24:
  75:Source/embsysS20.h **** 
  76:Source/embsysS20.h ****         timer_enable_counter(TIM2);
 366              		.loc 2 76 9 view .LVU74
 367 0020 4FF08040 		mov	r0, #1073741824
 368 0024 FFF7FEFF 		bl	timer_enable_counter
 369              	.LVL25:
  77:Source/embsysS20.h ****         timer_enable_irq(TIM2, TIM_DIER_CC1IE);
 370              		.loc 2 77 9 view .LVU75
 371 0028 0221     		movs	r1, #2
 372 002a 4FF08040 		mov	r0, #1073741824
 373 002e FFF7FEFF 		bl	timer_enable_irq
 374              	.LVL26:
  78:Source/embsysS20.h ****     }
 375              		.loc 2 78 5 is_stmt 0 view .LVU76
 376 0032 08BD     		pop	{r3, pc}
 377              		.cfi_endproc
 378              	.LFE2:
 380              		.section	.text.fn_circBuffReset,"ax",%progbits
 381              		.align	1
 382              		.global	fn_circBuffReset
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
ARM GAS  m2a.s 			page 11


 387              	fn_circBuffReset:
 388              	.LVL27:
 389              	.LFB6:
  22:Source/circularBuffer.h ****         assert(pst_me);
 390              		.loc 1 22 47 is_stmt 1 view -0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
  22:Source/circularBuffer.h ****         assert(pst_me);
 394              		.loc 1 22 47 is_stmt 0 view .LVU78
 395 0000 08B5     		push	{r3, lr}
 396              	.LCFI7:
 397              		.cfi_def_cfa_offset 8
 398              		.cfi_offset 3, -8
 399              		.cfi_offset 14, -4
  23:Source/circularBuffer.h **** 
 400              		.loc 1 23 8 is_stmt 1 view .LVU79
  23:Source/circularBuffer.h **** 
 401              		.loc 1 23 20 is_stmt 0 view .LVU80
 402 0002 20B1     		cbz	r0, .L30
  25:Source/circularBuffer.h **** 	    pst_me->u_tail = 0;
 403              		.loc 1 25 6 is_stmt 1 view .LVU81
  25:Source/circularBuffer.h **** 	    pst_me->u_tail = 0;
 404              		.loc 1 25 21 is_stmt 0 view .LVU82
 405 0004 0022     		movs	r2, #0
 406 0006 4260     		str	r2, [r0, #4]
  26:Source/circularBuffer.h **** 	    pst_me->b_full = false;
 407              		.loc 1 26 6 is_stmt 1 view .LVU83
  26:Source/circularBuffer.h **** 	    pst_me->b_full = false;
 408              		.loc 1 26 21 is_stmt 0 view .LVU84
 409 0008 8260     		str	r2, [r0, #8]
  27:Source/circularBuffer.h ****     }
 410              		.loc 1 27 6 is_stmt 1 view .LVU85
  27:Source/circularBuffer.h ****     }
 411              		.loc 1 27 21 is_stmt 0 view .LVU86
 412 000a 0274     		strb	r2, [r0, #16]
  28:Source/circularBuffer.h ****     
 413              		.loc 1 28 5 view .LVU87
 414 000c 08BD     		pop	{r3, pc}
 415              	.L30:
  23:Source/circularBuffer.h **** 
 416              		.loc 1 23 22 discriminator 1 view .LVU88
 417 000e 034B     		ldr	r3, .L31
 418 0010 034A     		ldr	r2, .L31+4
 419 0012 1721     		movs	r1, #23
 420 0014 0348     		ldr	r0, .L31+8
 421              	.LVL28:
  23:Source/circularBuffer.h **** 
 422              		.loc 1 23 22 discriminator 1 view .LVU89
 423 0016 FFF7FEFF 		bl	__assert_func
 424              	.LVL29:
 425              	.L32:
 426 001a 00BF     		.align	2
 427              	.L31:
 428 001c 00000000 		.word	.LC0
 429 0020 00000000 		.word	.LANCHOR2
 430 0024 08000000 		.word	.LC1
ARM GAS  m2a.s 			page 12


 431              		.cfi_endproc
 432              	.LFE6:
 434              		.section	.text.fn_circBuffEmpty,"ax",%progbits
 435              		.align	1
 436              		.global	fn_circBuffEmpty
 437              		.syntax unified
 438              		.thumb
 439              		.thumb_func
 441              	fn_circBuffEmpty:
 442              	.LVL30:
 443              	.LFB7:
  31:Source/circularBuffer.h ****         assert(pst_me);
 444              		.loc 1 31 46 is_stmt 1 view -0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
  31:Source/circularBuffer.h ****         assert(pst_me);
 448              		.loc 1 31 46 is_stmt 0 view .LVU91
 449 0000 08B5     		push	{r3, lr}
 450              	.LCFI8:
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 3, -8
 453              		.cfi_offset 14, -4
  32:Source/circularBuffer.h **** 
 454              		.loc 1 32 8 is_stmt 1 view .LVU92
  32:Source/circularBuffer.h **** 
 455              		.loc 1 32 20 is_stmt 0 view .LVU93
 456 0002 38B1     		cbz	r0, .L39
  34:Source/circularBuffer.h ****     }
 457              		.loc 1 34 6 is_stmt 1 view .LVU94
  34:Source/circularBuffer.h ****     }
 458              		.loc 1 34 21 is_stmt 0 view .LVU95
 459 0004 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
  34:Source/circularBuffer.h ****     }
 460              		.loc 1 34 30 view .LVU96
 461 0006 5AB9     		cbnz	r2, .L36
  34:Source/circularBuffer.h ****     }
 462              		.loc 1 34 40 discriminator 1 view .LVU97
 463 0008 4268     		ldr	r2, [r0, #4]
  34:Source/circularBuffer.h ****     }
 464              		.loc 1 34 58 discriminator 1 view .LVU98
 465 000a 8368     		ldr	r3, [r0, #8]
  34:Source/circularBuffer.h ****     }
 466              		.loc 1 34 30 discriminator 1 view .LVU99
 467 000c 9A42     		cmp	r2, r3
 468 000e 09D0     		beq	.L37
  34:Source/circularBuffer.h ****     }
 469              		.loc 1 34 30 view .LVU100
 470 0010 0020     		movs	r0, #0
 471              	.LVL31:
  34:Source/circularBuffer.h ****     }
 472              		.loc 1 34 30 view .LVU101
 473 0012 06E0     		b	.L35
 474              	.LVL32:
 475              	.L39:
  32:Source/circularBuffer.h **** 
 476              		.loc 1 32 22 discriminator 1 view .LVU102
ARM GAS  m2a.s 			page 13


 477 0014 044B     		ldr	r3, .L40
 478 0016 054A     		ldr	r2, .L40+4
 479 0018 2021     		movs	r1, #32
 480 001a 0548     		ldr	r0, .L40+8
 481              	.LVL33:
  32:Source/circularBuffer.h **** 
 482              		.loc 1 32 22 discriminator 1 view .LVU103
 483 001c FFF7FEFF 		bl	__assert_func
 484              	.LVL34:
 485              	.L36:
  34:Source/circularBuffer.h ****     }
 486              		.loc 1 34 30 view .LVU104
 487 0020 0020     		movs	r0, #0
 488              	.LVL35:
 489              	.L35:
  35:Source/circularBuffer.h **** 
 490              		.loc 1 35 5 discriminator 6 view .LVU105
 491 0022 08BD     		pop	{r3, pc}
 492              	.LVL36:
 493              	.L37:
  34:Source/circularBuffer.h ****     }
 494              		.loc 1 34 30 view .LVU106
 495 0024 0120     		movs	r0, #1
 496              	.LVL37:
  34:Source/circularBuffer.h ****     }
 497              		.loc 1 34 30 view .LVU107
 498 0026 FCE7     		b	.L35
 499              	.L41:
 500              		.align	2
 501              	.L40:
 502 0028 00000000 		.word	.LC0
 503 002c 00000000 		.word	.LANCHOR3
 504 0030 08000000 		.word	.LC1
 505              		.cfi_endproc
 506              	.LFE7:
 508              		.section	.rodata.fn_circBuffInit.str1.4,"aMS",%progbits,1
 509              		.align	2
 510              	.LC2:
 511 0000 7073745F 		.ascii	"pst_me && pc_buff && u_size\000"
 511      6D652026 
 511      26207063 
 511      5F627566 
 511      66202626 
 512              		.align	2
 513              	.LC3:
 514 001c 666E5F63 		.ascii	"fn_circBuffEmpty(pst_me)\000"
 514      69726342 
 514      75666645 
 514      6D707479 
 514      28707374 
 515              		.section	.text.fn_circBuffInit,"ax",%progbits
 516              		.align	1
 517              		.global	fn_circBuffInit
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 522              	fn_circBuffInit:
ARM GAS  m2a.s 			page 14


 523              	.LVL38:
 524              	.LFB8:
  38:Source/circularBuffer.h ****         assert(pst_me && pc_buff && u_size);
 525              		.loc 1 38 76 is_stmt 1 view -0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
  38:Source/circularBuffer.h ****         assert(pst_me && pc_buff && u_size);
 529              		.loc 1 38 76 is_stmt 0 view .LVU109
 530 0000 10B5     		push	{r4, lr}
 531              	.LCFI9:
 532              		.cfi_def_cfa_offset 8
 533              		.cfi_offset 4, -8
 534              		.cfi_offset 14, -4
  39:Source/circularBuffer.h ****     
 535              		.loc 1 39 8 is_stmt 1 view .LVU110
  39:Source/circularBuffer.h ****     
 536              		.loc 1 39 20 is_stmt 0 view .LVU111
 537 0002 58B1     		cbz	r0, .L43
 538 0004 0446     		mov	r4, r0
  39:Source/circularBuffer.h ****     
 539              		.loc 1 39 15 discriminator 2 view .LVU112
 540 0006 49B1     		cbz	r1, .L43
  39:Source/circularBuffer.h ****     
 541              		.loc 1 39 26 discriminator 4 view .LVU113
 542 0008 42B1     		cbz	r2, .L43
  41:Source/circularBuffer.h ****         pst_me->u_max = u_size;
 543              		.loc 1 41 9 is_stmt 1 view .LVU114
  41:Source/circularBuffer.h ****         pst_me->u_max = u_size;
 544              		.loc 1 41 27 is_stmt 0 view .LVU115
 545 000a 0160     		str	r1, [r0]
  42:Source/circularBuffer.h ****         fn_circBuffReset(pst_me);
 546              		.loc 1 42 9 is_stmt 1 view .LVU116
  42:Source/circularBuffer.h ****         fn_circBuffReset(pst_me);
 547              		.loc 1 42 23 is_stmt 0 view .LVU117
 548 000c C260     		str	r2, [r0, #12]
  43:Source/circularBuffer.h **** 
 549              		.loc 1 43 9 is_stmt 1 view .LVU118
 550 000e FFF7FEFF 		bl	fn_circBuffReset
 551              	.LVL39:
  45:Source/circularBuffer.h ****     }
 552              		.loc 1 45 8 view .LVU119
  45:Source/circularBuffer.h ****     }
 553              		.loc 1 45 8 is_stmt 0 view .LVU120
 554 0012 2046     		mov	r0, r4
 555 0014 FFF7FEFF 		bl	fn_circBuffEmpty
 556              	.LVL40:
  45:Source/circularBuffer.h ****     }
 557              		.loc 1 45 20 view .LVU121
 558 0018 30B1     		cbz	r0, .L47
  46:Source/circularBuffer.h **** 
 559              		.loc 1 46 5 view .LVU122
 560 001a 10BD     		pop	{r4, pc}
 561              	.LVL41:
 562              	.L43:
  39:Source/circularBuffer.h ****     
 563              		.loc 1 39 22 discriminator 5 view .LVU123
ARM GAS  m2a.s 			page 15


 564 001c 054B     		ldr	r3, .L48
 565 001e 064A     		ldr	r2, .L48+4
 566              	.LVL42:
  39:Source/circularBuffer.h ****     
 567              		.loc 1 39 22 discriminator 5 view .LVU124
 568 0020 2721     		movs	r1, #39
 569              	.LVL43:
  39:Source/circularBuffer.h ****     
 570              		.loc 1 39 22 discriminator 5 view .LVU125
 571 0022 0648     		ldr	r0, .L48+8
 572              	.LVL44:
  39:Source/circularBuffer.h ****     
 573              		.loc 1 39 22 discriminator 5 view .LVU126
 574 0024 FFF7FEFF 		bl	__assert_func
 575              	.LVL45:
 576              	.L47:
  45:Source/circularBuffer.h ****     }
 577              		.loc 1 45 22 discriminator 1 view .LVU127
 578 0028 054B     		ldr	r3, .L48+12
 579 002a 034A     		ldr	r2, .L48+4
 580 002c 2D21     		movs	r1, #45
 581 002e 0348     		ldr	r0, .L48+8
 582 0030 FFF7FEFF 		bl	__assert_func
 583              	.LVL46:
 584              	.L49:
 585              		.align	2
 586              	.L48:
 587 0034 00000000 		.word	.LC2
 588 0038 00000000 		.word	.LANCHOR4
 589 003c 08000000 		.word	.LC1
 590 0040 1C000000 		.word	.LC3
 591              		.cfi_endproc
 592              	.LFE8:
 594              		.section	.text.fn_circBuffFull,"ax",%progbits
 595              		.align	1
 596              		.global	fn_circBuffFull
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 601              	fn_circBuffFull:
 602              	.LVL47:
 603              	.LFB9:
  49:Source/circularBuffer.h ****         assert(pst_me);
 604              		.loc 1 49 45 is_stmt 1 view -0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 0
 607              		@ frame_needed = 0, uses_anonymous_args = 0
  49:Source/circularBuffer.h ****         assert(pst_me);
 608              		.loc 1 49 45 is_stmt 0 view .LVU129
 609 0000 08B5     		push	{r3, lr}
 610              	.LCFI10:
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 3, -8
 613              		.cfi_offset 14, -4
  50:Source/circularBuffer.h **** 
 614              		.loc 1 50 8 is_stmt 1 view .LVU130
  50:Source/circularBuffer.h **** 
ARM GAS  m2a.s 			page 16


 615              		.loc 1 50 20 is_stmt 0 view .LVU131
 616 0002 08B1     		cbz	r0, .L53
  52:Source/circularBuffer.h ****     }
 617              		.loc 1 52 2 is_stmt 1 view .LVU132
  53:Source/circularBuffer.h **** 
 618              		.loc 1 53 5 is_stmt 0 view .LVU133
 619 0004 007C     		ldrb	r0, [r0, #16]	@ zero_extendqisi2
 620              	.LVL48:
  53:Source/circularBuffer.h **** 
 621              		.loc 1 53 5 view .LVU134
 622 0006 08BD     		pop	{r3, pc}
 623              	.LVL49:
 624              	.L53:
  50:Source/circularBuffer.h **** 
 625              		.loc 1 50 22 discriminator 1 view .LVU135
 626 0008 024B     		ldr	r3, .L54
 627 000a 034A     		ldr	r2, .L54+4
 628 000c 3221     		movs	r1, #50
 629 000e 0348     		ldr	r0, .L54+8
 630              	.LVL50:
  50:Source/circularBuffer.h **** 
 631              		.loc 1 50 22 discriminator 1 view .LVU136
 632 0010 FFF7FEFF 		bl	__assert_func
 633              	.LVL51:
 634              	.L55:
 635              		.align	2
 636              	.L54:
 637 0014 00000000 		.word	.LC0
 638 0018 00000000 		.word	.LANCHOR5
 639 001c 08000000 		.word	.LC1
 640              		.cfi_endproc
 641              	.LFE9:
 643              		.section	.text.fn_circBuffCapacity,"ax",%progbits
 644              		.align	1
 645              		.global	fn_circBuffCapacity
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 650              	fn_circBuffCapacity:
 651              	.LVL52:
 652              	.LFB10:
  56:Source/circularBuffer.h ****         assert(pst_me);
 653              		.loc 1 56 52 is_stmt 1 view -0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
  56:Source/circularBuffer.h ****         assert(pst_me);
 657              		.loc 1 56 52 is_stmt 0 view .LVU138
 658 0000 08B5     		push	{r3, lr}
 659              	.LCFI11:
 660              		.cfi_def_cfa_offset 8
 661              		.cfi_offset 3, -8
 662              		.cfi_offset 14, -4
  57:Source/circularBuffer.h **** 
 663              		.loc 1 57 8 is_stmt 1 view .LVU139
  57:Source/circularBuffer.h **** 
 664              		.loc 1 57 20 is_stmt 0 view .LVU140
ARM GAS  m2a.s 			page 17


 665 0002 08B1     		cbz	r0, .L59
  59:Source/circularBuffer.h ****     }
 666              		.loc 1 59 2 is_stmt 1 view .LVU141
  60:Source/circularBuffer.h **** 
 667              		.loc 1 60 5 is_stmt 0 view .LVU142
 668 0004 C068     		ldr	r0, [r0, #12]
 669              	.LVL53:
  60:Source/circularBuffer.h **** 
 670              		.loc 1 60 5 view .LVU143
 671 0006 08BD     		pop	{r3, pc}
 672              	.LVL54:
 673              	.L59:
  57:Source/circularBuffer.h **** 
 674              		.loc 1 57 22 discriminator 1 view .LVU144
 675 0008 024B     		ldr	r3, .L60
 676 000a 034A     		ldr	r2, .L60+4
 677 000c 3921     		movs	r1, #57
 678 000e 0348     		ldr	r0, .L60+8
 679              	.LVL55:
  57:Source/circularBuffer.h **** 
 680              		.loc 1 57 22 discriminator 1 view .LVU145
 681 0010 FFF7FEFF 		bl	__assert_func
 682              	.LVL56:
 683              	.L61:
 684              		.align	2
 685              	.L60:
 686 0014 00000000 		.word	.LC0
 687 0018 00000000 		.word	.LANCHOR6
 688 001c 08000000 		.word	.LC1
 689              		.cfi_endproc
 690              	.LFE10:
 692              		.section	.text.fn_circBuffSize,"ax",%progbits
 693              		.align	1
 694              		.global	fn_circBuffSize
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 699              	fn_circBuffSize:
 700              	.LVL57:
 701              	.LFB11:
  63:Source/circularBuffer.h ****         assert(pst_me);
 702              		.loc 1 63 48 is_stmt 1 view -0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
  63:Source/circularBuffer.h ****         assert(pst_me);
 706              		.loc 1 63 48 is_stmt 0 view .LVU147
 707 0000 08B5     		push	{r3, lr}
 708              	.LCFI12:
 709              		.cfi_def_cfa_offset 8
 710              		.cfi_offset 3, -8
 711              		.cfi_offset 14, -4
  64:Source/circularBuffer.h **** 
 712              		.loc 1 64 8 is_stmt 1 view .LVU148
  64:Source/circularBuffer.h **** 
 713              		.loc 1 64 20 is_stmt 0 view .LVU149
 714 0002 48B1     		cbz	r0, .L67
ARM GAS  m2a.s 			page 18


 715 0004 0346     		mov	r3, r0
  66:Source/circularBuffer.h **** 
 716              		.loc 1 66 2 is_stmt 1 view .LVU150
  66:Source/circularBuffer.h **** 
 717              		.loc 1 66 9 is_stmt 0 view .LVU151
 718 0006 C068     		ldr	r0, [r0, #12]
 719              	.LVL58:
  68:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
 720              		.loc 1 68 2 is_stmt 1 view .LVU152
  68:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
 721              		.loc 1 68 12 is_stmt 0 view .LVU153
 722 0008 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
  68:Source/circularBuffer.h **** 		if(pst_me->u_head >= pst_me->u_tail)
 723              		.loc 1 68 4 view .LVU154
 724 000a 22B9     		cbnz	r2, .L62
  69:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 725              		.loc 1 69 3 is_stmt 1 view .LVU155
  69:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 726              		.loc 1 69 12 is_stmt 0 view .LVU156
 727 000c 5A68     		ldr	r2, [r3, #4]
  69:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 728              		.loc 1 69 30 view .LVU157
 729 000e 9B68     		ldr	r3, [r3, #8]
 730              	.LVL59:
  69:Source/circularBuffer.h **** 			u_size = pst_me->u_head - pst_me->u_tail;
 731              		.loc 1 69 5 view .LVU158
 732 0010 9A42     		cmp	r2, r3
 733 0012 07D3     		bcc	.L65
  70:Source/circularBuffer.h **** 		else
 734              		.loc 1 70 4 is_stmt 1 view .LVU159
  70:Source/circularBuffer.h **** 		else
 735              		.loc 1 70 11 is_stmt 0 view .LVU160
 736 0014 D01A     		subs	r0, r2, r3
 737              	.LVL60:
 738              	.L62:
  76:Source/circularBuffer.h **** 
 739              		.loc 1 76 5 view .LVU161
 740 0016 08BD     		pop	{r3, pc}
 741              	.LVL61:
 742              	.L67:
  64:Source/circularBuffer.h **** 
 743              		.loc 1 64 22 discriminator 1 view .LVU162
 744 0018 044B     		ldr	r3, .L68
 745 001a 054A     		ldr	r2, .L68+4
 746 001c 4021     		movs	r1, #64
 747 001e 0548     		ldr	r0, .L68+8
 748              	.LVL62:
  64:Source/circularBuffer.h **** 
 749              		.loc 1 64 22 discriminator 1 view .LVU163
 750 0020 FFF7FEFF 		bl	__assert_func
 751              	.LVL63:
 752              	.L65:
  72:Source/circularBuffer.h **** 	}
 753              		.loc 1 72 4 is_stmt 1 view .LVU164
  72:Source/circularBuffer.h **** 	}
 754              		.loc 1 72 27 is_stmt 0 view .LVU165
 755 0024 1044     		add	r0, r0, r2
ARM GAS  m2a.s 			page 19


 756              	.LVL64:
  72:Source/circularBuffer.h **** 	}
 757              		.loc 1 72 11 view .LVU166
 758 0026 C01A     		subs	r0, r0, r3
 759              	.LVL65:
  75:Source/circularBuffer.h ****     }
 760              		.loc 1 75 2 is_stmt 1 view .LVU167
  75:Source/circularBuffer.h ****     }
 761              		.loc 1 75 9 is_stmt 0 view .LVU168
 762 0028 F5E7     		b	.L62
 763              	.L69:
 764 002a 00BF     		.align	2
 765              	.L68:
 766 002c 00000000 		.word	.LC0
 767 0030 00000000 		.word	.LANCHOR7
 768 0034 08000000 		.word	.LC1
 769              		.cfi_endproc
 770              	.LFE11:
 772              		.section	.rodata.fn_circBuffPut.str1.4,"aMS",%progbits,1
 773              		.align	2
 774              	.LC4:
 775 0000 7073745F 		.ascii	"pst_me && pst_me->pc_buffer\000"
 775      6D652026 
 775      26207073 
 775      745F6D65 
 775      2D3E7063 
 776              		.section	.text.fn_circBuffPut,"ax",%progbits
 777              		.align	1
 778              		.global	fn_circBuffPut
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 783              	fn_circBuffPut:
 784              	.LVL66:
 785              	.LFB14:
 103:Source/circularBuffer.h **** 
 104:Source/circularBuffer.h ****     //Puts data in the buffer
 105:Source/circularBuffer.h ****     void fn_circBuffPut(st_circBuff* pst_me, char c_data){
 786              		.loc 1 105 58 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		.loc 1 105 58 is_stmt 0 view .LVU170
 791 0000 08B5     		push	{r3, lr}
 792              	.LCFI13:
 793              		.cfi_def_cfa_offset 8
 794              		.cfi_offset 3, -8
 795              		.cfi_offset 14, -4
 106:Source/circularBuffer.h ****         assert(pst_me && pst_me->pc_buffer);
 796              		.loc 1 106 8 is_stmt 1 view .LVU171
 797              		.loc 1 106 20 is_stmt 0 view .LVU172
 798 0002 40B1     		cbz	r0, .L71
 799 0004 0346     		mov	r3, r0
 800              		.loc 1 106 24 discriminator 2 view .LVU173
 801 0006 0268     		ldr	r2, [r0]
 802              		.loc 1 106 15 discriminator 2 view .LVU174
 803 0008 2AB1     		cbz	r2, .L71
ARM GAS  m2a.s 			page 20


 107:Source/circularBuffer.h **** 
 108:Source/circularBuffer.h **** 	pst_me->pc_buffer[pst_me->u_head] = c_data;
 804              		.loc 1 108 2 is_stmt 1 view .LVU175
 805              		.loc 1 108 26 is_stmt 0 view .LVU176
 806 000a 4068     		ldr	r0, [r0, #4]
 807              	.LVL67:
 808              		.loc 1 108 36 view .LVU177
 809 000c 1154     		strb	r1, [r2, r0]
 109:Source/circularBuffer.h **** 
 110:Source/circularBuffer.h **** 	fn_advancePointer(pst_me);
 810              		.loc 1 110 2 is_stmt 1 view .LVU178
 811 000e 1846     		mov	r0, r3
 812 0010 FFF7FEFF 		bl	fn_advancePointer
 813              	.LVL68:
 111:Source/circularBuffer.h ****     }
 814              		.loc 1 111 5 is_stmt 0 view .LVU179
 815 0014 08BD     		pop	{r3, pc}
 816              	.LVL69:
 817              	.L71:
 106:Source/circularBuffer.h **** 
 818              		.loc 1 106 22 discriminator 3 view .LVU180
 819 0016 034B     		ldr	r3, .L74
 820 0018 034A     		ldr	r2, .L74+4
 821 001a 6A21     		movs	r1, #106
 822              	.LVL70:
 106:Source/circularBuffer.h **** 
 823              		.loc 1 106 22 discriminator 3 view .LVU181
 824 001c 0348     		ldr	r0, .L74+8
 825              	.LVL71:
 106:Source/circularBuffer.h **** 
 826              		.loc 1 106 22 discriminator 3 view .LVU182
 827 001e FFF7FEFF 		bl	__assert_func
 828              	.LVL72:
 829              	.L75:
 830 0022 00BF     		.align	2
 831              	.L74:
 832 0024 00000000 		.word	.LC4
 833 0028 00000000 		.word	.LANCHOR8
 834 002c 08000000 		.word	.LC1
 835              		.cfi_endproc
 836              	.LFE14:
 838              		.section	.rodata.fn_circBuffGet.str1.4,"aMS",%progbits,1
 839              		.align	2
 840              	.LC5:
 841 0000 70635F64 		.ascii	"pc_data\000"
 841      61746100 
 842              		.align	2
 843              	.LC6:
 844 0008 7073745F 		.ascii	"pst_me->pc_buffer\000"
 844      6D652D3E 
 844      70635F62 
 844      75666665 
 844      7200
 845              		.section	.text.fn_circBuffGet,"ax",%progbits
 846              		.align	1
 847              		.global	fn_circBuffGet
 848              		.syntax unified
ARM GAS  m2a.s 			page 21


 849              		.thumb
 850              		.thumb_func
 852              	fn_circBuffGet:
 853              	.LVL73:
 854              	.LFB15:
 112:Source/circularBuffer.h **** 
 113:Source/circularBuffer.h ****     //Removes data from the buffer, returns pass/fail (need to supply storage for data in parameter
 114:Source/circularBuffer.h ****     bool fn_circBuffGet(st_circBuff* pst_me, char* pc_data){
 855              		.loc 1 114 59 is_stmt 1 view -0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              		.loc 1 114 59 is_stmt 0 view .LVU184
 860 0000 70B5     		push	{r4, r5, r6, lr}
 861              	.LCFI14:
 862              		.cfi_def_cfa_offset 16
 863              		.cfi_offset 4, -16
 864              		.cfi_offset 5, -12
 865              		.cfi_offset 6, -8
 866              		.cfi_offset 14, -4
 115:Source/circularBuffer.h ****         //assert(pst_me && pc_data && pst_me->pc_buffer);
 116:Source/circularBuffer.h ****         assert(pst_me);
 867              		.loc 1 116 8 is_stmt 1 view .LVU185
 868              		.loc 1 116 20 is_stmt 0 view .LVU186
 869 0002 48B1     		cbz	r0, .L83
 870 0004 0C46     		mov	r4, r1
 871 0006 0546     		mov	r5, r0
 117:Source/circularBuffer.h ****         assert(pc_data);
 872              		.loc 1 117 8 is_stmt 1 view .LVU187
 873              		.loc 1 117 20 is_stmt 0 view .LVU188
 874 0008 61B1     		cbz	r1, .L84
 118:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 875              		.loc 1 118 8 is_stmt 1 view .LVU189
 876              		.loc 1 118 14 is_stmt 0 view .LVU190
 877 000a 0668     		ldr	r6, [r0]
 878              		.loc 1 118 20 view .LVU191
 879 000c 86B1     		cbz	r6, .L85
 119:Source/circularBuffer.h **** 
 120:Source/circularBuffer.h **** 	bool r = false;
 880              		.loc 1 120 1 is_stmt 1 view .LVU192
 881              	.LVL74:
 121:Source/circularBuffer.h **** 
 122:Source/circularBuffer.h **** 	if(!fn_circBuffEmpty(pst_me)){
 882              		.loc 1 122 2 view .LVU193
 883              		.loc 1 122 6 is_stmt 0 view .LVU194
 884 000e FFF7FEFF 		bl	fn_circBuffEmpty
 885              	.LVL75:
 886              		.loc 1 122 4 view .LVU195
 887 0012 98B1     		cbz	r0, .L86
 120:Source/circularBuffer.h **** 
 888              		.loc 1 120 6 view .LVU196
 889 0014 0020     		movs	r0, #0
 890              	.LVL76:
 891              	.L80:
 123:Source/circularBuffer.h ****         *pc_data = pst_me->pc_buffer[pst_me->u_tail];
 124:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 125:Source/circularBuffer.h **** 
ARM GAS  m2a.s 			page 22


 126:Source/circularBuffer.h **** 	   r = true; 
 127:Source/circularBuffer.h **** 	}
 128:Source/circularBuffer.h **** 
 129:Source/circularBuffer.h ****         return r;
 892              		.loc 1 129 9 is_stmt 1 view .LVU197
 130:Source/circularBuffer.h ****     }
 893              		.loc 1 130 5 is_stmt 0 view .LVU198
 894 0016 70BD     		pop	{r4, r5, r6, pc}
 895              	.LVL77:
 896              	.L83:
 116:Source/circularBuffer.h ****         assert(pc_data);
 897              		.loc 1 116 22 discriminator 1 view .LVU199
 898 0018 0C4B     		ldr	r3, .L87
 899 001a 0D4A     		ldr	r2, .L87+4
 900 001c 7421     		movs	r1, #116
 901              	.LVL78:
 116:Source/circularBuffer.h ****         assert(pc_data);
 902              		.loc 1 116 22 discriminator 1 view .LVU200
 903 001e 0D48     		ldr	r0, .L87+8
 904              	.LVL79:
 116:Source/circularBuffer.h ****         assert(pc_data);
 905              		.loc 1 116 22 discriminator 1 view .LVU201
 906 0020 FFF7FEFF 		bl	__assert_func
 907              	.LVL80:
 908              	.L84:
 117:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 909              		.loc 1 117 22 discriminator 1 view .LVU202
 910 0024 0C4B     		ldr	r3, .L87+12
 911 0026 0A4A     		ldr	r2, .L87+4
 912 0028 7521     		movs	r1, #117
 913              	.LVL81:
 117:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 914              		.loc 1 117 22 discriminator 1 view .LVU203
 915 002a 0A48     		ldr	r0, .L87+8
 916              	.LVL82:
 117:Source/circularBuffer.h ****         assert(pst_me->pc_buffer);
 917              		.loc 1 117 22 discriminator 1 view .LVU204
 918 002c FFF7FEFF 		bl	__assert_func
 919              	.LVL83:
 920              	.L85:
 118:Source/circularBuffer.h **** 
 921              		.loc 1 118 22 discriminator 1 view .LVU205
 922 0030 0A4B     		ldr	r3, .L87+16
 923 0032 074A     		ldr	r2, .L87+4
 924 0034 7621     		movs	r1, #118
 925              	.LVL84:
 118:Source/circularBuffer.h **** 
 926              		.loc 1 118 22 discriminator 1 view .LVU206
 927 0036 0748     		ldr	r0, .L87+8
 928              	.LVL85:
 118:Source/circularBuffer.h **** 
 929              		.loc 1 118 22 discriminator 1 view .LVU207
 930 0038 FFF7FEFF 		bl	__assert_func
 931              	.LVL86:
 932              	.L86:
 123:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 933              		.loc 1 123 9 is_stmt 1 view .LVU208
ARM GAS  m2a.s 			page 23


 123:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 934              		.loc 1 123 44 is_stmt 0 view .LVU209
 935 003c AB68     		ldr	r3, [r5, #8]
 123:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 936              		.loc 1 123 37 view .LVU210
 937 003e F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 123:Source/circularBuffer.h **** 	    fn_retreatPointer(pst_me);
 938              		.loc 1 123 18 view .LVU211
 939 0040 2370     		strb	r3, [r4]
 124:Source/circularBuffer.h **** 
 940              		.loc 1 124 6 is_stmt 1 view .LVU212
 941 0042 2846     		mov	r0, r5
 942 0044 FFF7FEFF 		bl	fn_retreatPointer
 943              	.LVL87:
 126:Source/circularBuffer.h **** 	}
 944              		.loc 1 126 5 view .LVU213
 126:Source/circularBuffer.h **** 	}
 945              		.loc 1 126 7 is_stmt 0 view .LVU214
 946 0048 0120     		movs	r0, #1
 947 004a E4E7     		b	.L80
 948              	.L88:
 949              		.align	2
 950              	.L87:
 951 004c 00000000 		.word	.LC0
 952 0050 00000000 		.word	.LANCHOR9
 953 0054 08000000 		.word	.LC1
 954 0058 00000000 		.word	.LC5
 955 005c 08000000 		.word	.LC6
 956              		.cfi_endproc
 957              	.LFE15:
 959              		.section	.rodata.fn_circBuffGetMostRecent.str1.4,"aMS",%progbits,1
 960              		.align	2
 961              	.LC7:
 962 0000 7073745F 		.ascii	"pst_me && pc_data && pst_me->pc_buffer\000"
 962      6D652026 
 962      26207063 
 962      5F646174 
 962      61202626 
 963              		.section	.text.fn_circBuffGetMostRecent,"ax",%progbits
 964              		.align	1
 965              		.global	fn_circBuffGetMostRecent
 966              		.syntax unified
 967              		.thumb
 968              		.thumb_func
 970              	fn_circBuffGetMostRecent:
 971              	.LVL88:
 972              	.LFB16:
 131:Source/circularBuffer.h **** 
 132:Source/circularBuffer.h ****     bool fn_circBuffGetMostRecent(st_circBuff* pst_me, char* pc_data){
 973              		.loc 1 132 69 is_stmt 1 view -0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 0
 976              		@ frame_needed = 0, uses_anonymous_args = 0
 977              		.loc 1 132 69 is_stmt 0 view .LVU216
 978 0000 70B5     		push	{r4, r5, r6, lr}
 979              	.LCFI15:
 980              		.cfi_def_cfa_offset 16
ARM GAS  m2a.s 			page 24


 981              		.cfi_offset 4, -16
 982              		.cfi_offset 5, -12
 983              		.cfi_offset 6, -8
 984              		.cfi_offset 14, -4
 133:Source/circularBuffer.h ****         assert(pst_me && pc_data && pst_me->pc_buffer);
 985              		.loc 1 133 8 is_stmt 1 view .LVU217
 986              		.loc 1 133 20 is_stmt 0 view .LVU218
 987 0002 80B1     		cbz	r0, .L90
 988 0004 0C46     		mov	r4, r1
 989 0006 0646     		mov	r6, r0
 990              		.loc 1 133 15 discriminator 2 view .LVU219
 991 0008 69B1     		cbz	r1, .L90
 992              		.loc 1 133 35 discriminator 4 view .LVU220
 993 000a 0568     		ldr	r5, [r0]
 994              		.loc 1 133 26 discriminator 4 view .LVU221
 995 000c 5DB1     		cbz	r5, .L90
 134:Source/circularBuffer.h **** 
 135:Source/circularBuffer.h ****         bool r = false;
 996              		.loc 1 135 8 is_stmt 1 view .LVU222
 997              	.LVL89:
 136:Source/circularBuffer.h **** 
 137:Source/circularBuffer.h ****         if(!fn_circBuffEmpty(pst_me)){
 998              		.loc 1 137 9 view .LVU223
 999              		.loc 1 137 13 is_stmt 0 view .LVU224
 1000 000e FFF7FEFF 		bl	fn_circBuffEmpty
 1001              	.LVL90:
 1002              		.loc 1 137 11 view .LVU225
 1003 0012 A0B9     		cbnz	r0, .L94
 138:Source/circularBuffer.h ****                 if(pst_me->u_head == 0){
 1004              		.loc 1 138 17 is_stmt 1 view .LVU226
 1005              		.loc 1 138 26 is_stmt 0 view .LVU227
 1006 0014 7368     		ldr	r3, [r6, #4]
 1007              		.loc 1 138 19 view .LVU228
 1008 0016 63B9     		cbnz	r3, .L93
 139:Source/circularBuffer.h ****                     pst_me->u_head = (pst_me->u_max) - 1;
 1009              		.loc 1 139 21 is_stmt 1 view .LVU229
 1010              		.loc 1 139 45 is_stmt 0 view .LVU230
 1011 0018 F368     		ldr	r3, [r6, #12]
 1012              		.loc 1 139 54 view .LVU231
 1013 001a 013B     		subs	r3, r3, #1
 1014              		.loc 1 139 36 view .LVU232
 1015 001c 7360     		str	r3, [r6, #4]
 140:Source/circularBuffer.h ****                 *pc_data = pst_me->pc_buffer[pst_me->u_head];
 1016              		.loc 1 140 17 is_stmt 1 view .LVU233
 1017              		.loc 1 140 45 is_stmt 0 view .LVU234
 1018 001e EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1019              		.loc 1 140 26 view .LVU235
 1020 0020 2370     		strb	r3, [r4]
 141:Source/circularBuffer.h ****                 r = true;	
 1021              		.loc 1 141 17 is_stmt 1 view .LVU236
 1022              	.LVL91:
 1023              		.loc 1 141 19 is_stmt 0 view .LVU237
 1024 0022 0120     		movs	r0, #1
 1025 0024 0CE0     		b	.L92
 1026              	.LVL92:
 1027              	.L90:
 133:Source/circularBuffer.h **** 
ARM GAS  m2a.s 			page 25


 1028              		.loc 1 133 22 discriminator 5 view .LVU238
 1029 0026 074B     		ldr	r3, .L96
 1030 0028 074A     		ldr	r2, .L96+4
 1031 002a 8521     		movs	r1, #133
 1032              	.LVL93:
 133:Source/circularBuffer.h **** 
 1033              		.loc 1 133 22 discriminator 5 view .LVU239
 1034 002c 0748     		ldr	r0, .L96+8
 1035              	.LVL94:
 133:Source/circularBuffer.h **** 
 1036              		.loc 1 133 22 discriminator 5 view .LVU240
 1037 002e FFF7FEFF 		bl	__assert_func
 1038              	.LVL95:
 1039              	.L93:
 142:Source/circularBuffer.h ****             }   
 143:Source/circularBuffer.h ****             else{
 144:Source/circularBuffer.h ****                 *pc_data = pst_me->pc_buffer[--(pst_me->u_head)];
 1040              		.loc 1 144 17 is_stmt 1 view .LVU241
 1041              		.loc 1 144 46 is_stmt 0 view .LVU242
 1042 0032 013B     		subs	r3, r3, #1
 1043              		.loc 1 144 26 view .LVU243
 1044 0034 7360     		str	r3, [r6, #4]
 1045              		.loc 1 144 45 view .LVU244
 1046 0036 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1047              		.loc 1 144 26 view .LVU245
 1048 0038 2370     		strb	r3, [r4]
 145:Source/circularBuffer.h ****             r = true;
 1049              		.loc 1 145 13 is_stmt 1 view .LVU246
 1050              	.LVL96:
 1051              		.loc 1 145 15 is_stmt 0 view .LVU247
 1052 003a 0120     		movs	r0, #1
 1053 003c 00E0     		b	.L92
 1054              	.LVL97:
 1055              	.L94:
 135:Source/circularBuffer.h **** 
 1056              		.loc 1 135 13 view .LVU248
 1057 003e 0020     		movs	r0, #0
 1058              	.LVL98:
 1059              	.L92:
 146:Source/circularBuffer.h ****             }
 147:Source/circularBuffer.h ****         }
 148:Source/circularBuffer.h **** 
 149:Source/circularBuffer.h ****         return r;
 1060              		.loc 1 149 9 is_stmt 1 view .LVU249
 150:Source/circularBuffer.h ****     }
 1061              		.loc 1 150 5 is_stmt 0 view .LVU250
 1062 0040 70BD     		pop	{r4, r5, r6, pc}
 1063              	.LVL99:
 1064              	.L97:
 1065              		.loc 1 150 5 view .LVU251
 1066 0042 00BF     		.align	2
 1067              	.L96:
 1068 0044 00000000 		.word	.LC7
 1069 0048 00000000 		.word	.LANCHOR10
 1070 004c 08000000 		.word	.LC1
 1071              		.cfi_endproc
 1072              	.LFE16:
ARM GAS  m2a.s 			page 26


 1074              		.section	.text._write,"ax",%progbits
 1075              		.align	1
 1076              		.global	_write
 1077              		.syntax unified
 1078              		.thumb
 1079              		.thumb_func
 1081              	_write:
 1082              	.LVL100:
 1083              	.LFB17:
 1084              		.file 3 "Source/m2a.c"
   1:Source/m2a.c  **** /*
   2:Source/m2a.c  ****  * Ryan Colon
   3:Source/m2a.c  ****  * Embedded Systems Milestone 2
   4:Source/m2a.c  ****  * 02.15.22
   5:Source/m2a.c  ****  * Program takes user input from the serial monitor and encrypts the text
   6:Source/m2a.c  ****  * While running, if the user holds B1, the output will switch to decrypt from encrypt
   7:Source/m2a.c  ****  */
   8:Source/m2a.c  **** 
   9:Source/m2a.c  **** /*
  10:Source/m2a.c  ****  * Compute actual baud rate of the system:
  11:Source/m2a.c  ****  * 
  12:Source/m2a.c  ****  * From STs USART Training Manual https://www.st.com/content/ccc/resource/training/technical/produc
  13:Source/m2a.c  ****  * By default, the clock for usart is using RCC_APB1, which we know is at 4 MHz. 
  14:Source/m2a.c  ****  * Libopencm3 docs under USART API usart_set_baudrate() tells us by default the OVER8 register is 0
  15:Source/m2a.c  ****  * 
  16:Source/m2a.c  ****  * 4M / 16 = 250K, 250k / 57.6k = 4.3403
  17:Source/m2a.c  ****  * 
  18:Source/m2a.c  ****  * By reading the USART2_BRR register, we can see that this is the value located in the USART_DIV
  19:Source/m2a.c  ****  * 
  20:Source/m2a.c  ****  * Therefore, the error is 0% 
  21:Source/m2a.c  ****  */
  22:Source/m2a.c  **** 
  23:Source/m2a.c  **** #include "embsysS20.h"
  24:Source/m2a.c  **** #include <stdio.h>
  25:Source/m2a.c  **** #include <errno.h>
  26:Source/m2a.c  **** #include <unistd.h>
  27:Source/m2a.c  **** #include "circularBuffer.h"
  28:Source/m2a.c  **** 
  29:Source/m2a.c  **** #define BUFFER_SIZE 256
  30:Source/m2a.c  **** #define CIPHER_SIZE 13
  31:Source/m2a.c  **** 
  32:Source/m2a.c  **** char fn_encryptText(char c_toEncrypt);
  33:Source/m2a.c  **** char fn_decryptText(char c_toDecrypt);
  34:Source/m2a.c  **** void fn_convertToCaps(char* pc_Convert);
  35:Source/m2a.c  **** 
  36:Source/m2a.c  **** const char ac_CIPHER[CIPHER_SIZE] = {'T','E','N','N','E','S','S','E','E','T','E','C','H'};
  37:Source/m2a.c  **** 
  38:Source/m2a.c  **** //Available on the libopencm3 github example page
  39:Source/m2a.c  **** //Essentially makes the USART2 port the STDOUT stream
  40:Source/m2a.c  **** int _write(int file, char* ptr, int len){
 1085              		.loc 3 40 41 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		.loc 3 40 41 is_stmt 0 view .LVU253
 1090 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1091              	.LCFI16:
ARM GAS  m2a.s 			page 27


 1092              		.cfi_def_cfa_offset 24
 1093              		.cfi_offset 3, -24
 1094              		.cfi_offset 4, -20
 1095              		.cfi_offset 5, -16
 1096              		.cfi_offset 6, -12
 1097              		.cfi_offset 7, -8
 1098              		.cfi_offset 14, -4
  41:Source/m2a.c  ****     int i;
 1099              		.loc 3 41 5 is_stmt 1 view .LVU254
  42:Source/m2a.c  **** 
  43:Source/m2a.c  ****     if (file == STDOUT_FILENO || file == STDERR_FILENO){
 1100              		.loc 3 43 5 view .LVU255
 1101              		.loc 3 43 30 is_stmt 0 view .LVU256
 1102 0002 0138     		subs	r0, r0, #1
 1103              	.LVL101:
 1104              		.loc 3 43 8 view .LVU257
 1105 0004 0128     		cmp	r0, #1
 1106 0006 13D8     		bhi	.L107
 1107 0008 0D46     		mov	r5, r1
 1108 000a 1746     		mov	r7, r2
  44:Source/m2a.c  **** 	    for(i = 0; i < len; i++){
 1109              		.loc 3 44 12 view .LVU258
 1110 000c 0024     		movs	r4, #0
 1111 000e 04E0     		b	.L99
 1112              	.LVL102:
 1113              	.L101:
  45:Source/m2a.c  **** 		    if(ptr[i] == '\n')
  46:Source/m2a.c  **** 			    usart_send_blocking(USART_CONSOLE, '\r');
  47:Source/m2a.c  **** 
  48:Source/m2a.c  **** 		    usart_send_blocking(USART_CONSOLE, ptr[i]);
 1114              		.loc 3 48 7 is_stmt 1 discriminator 2 view .LVU259
 1115 0010 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 1116 0012 0B48     		ldr	r0, .L108
 1117 0014 FFF7FEFF 		bl	usart_send_blocking
 1118              	.LVL103:
  44:Source/m2a.c  **** 	    for(i = 0; i < len; i++){
 1119              		.loc 3 44 26 discriminator 2 view .LVU260
  44:Source/m2a.c  **** 	    for(i = 0; i < len; i++){
 1120              		.loc 3 44 27 is_stmt 0 discriminator 2 view .LVU261
 1121 0018 0134     		adds	r4, r4, #1
 1122              	.LVL104:
 1123              	.L99:
  44:Source/m2a.c  **** 	    for(i = 0; i < len; i++){
 1124              		.loc 3 44 17 is_stmt 1 discriminator 1 view .LVU262
  44:Source/m2a.c  **** 	    for(i = 0; i < len; i++){
 1125              		.loc 3 44 6 is_stmt 0 discriminator 1 view .LVU263
 1126 001a BC42     		cmp	r4, r7
 1127 001c 0EDA     		bge	.L98
  45:Source/m2a.c  **** 		    if(ptr[i] == '\n')
 1128              		.loc 3 45 7 is_stmt 1 view .LVU264
  45:Source/m2a.c  **** 		    if(ptr[i] == '\n')
 1129              		.loc 3 45 13 is_stmt 0 view .LVU265
 1130 001e 2E19     		adds	r6, r5, r4
 1131 0020 2B5D     		ldrb	r3, [r5, r4]	@ zero_extendqisi2
  45:Source/m2a.c  **** 		    if(ptr[i] == '\n')
 1132              		.loc 3 45 9 view .LVU266
 1133 0022 0A2B     		cmp	r3, #10
ARM GAS  m2a.s 			page 28


 1134 0024 F4D1     		bne	.L101
  46:Source/m2a.c  **** 
 1135              		.loc 3 46 8 is_stmt 1 view .LVU267
 1136 0026 0D21     		movs	r1, #13
 1137 0028 0548     		ldr	r0, .L108
 1138 002a FFF7FEFF 		bl	usart_send_blocking
 1139              	.LVL105:
 1140 002e EFE7     		b	.L101
 1141              	.LVL106:
 1142              	.L107:
  49:Source/m2a.c  **** 	    }
  50:Source/m2a.c  **** 
  51:Source/m2a.c  **** 	    return i;
  52:Source/m2a.c  ****     }
  53:Source/m2a.c  **** 
  54:Source/m2a.c  ****     errno = EIO;
 1143              		.loc 3 54 4 view .LVU268
 1144              		.loc 3 54 6 is_stmt 0 view .LVU269
 1145 0030 FFF7FEFF 		bl	__errno
 1146              	.LVL107:
 1147              		.loc 3 54 10 view .LVU270
 1148 0034 0523     		movs	r3, #5
 1149 0036 0360     		str	r3, [r0]
  55:Source/m2a.c  ****     return -1;
 1150              		.loc 3 55 5 is_stmt 1 view .LVU271
 1151              		.loc 3 55 12 is_stmt 0 view .LVU272
 1152 0038 4FF0FF34 		mov	r4, #-1
 1153              	.L98:
  56:Source/m2a.c  **** }
 1154              		.loc 3 56 1 view .LVU273
 1155 003c 2046     		mov	r0, r4
 1156 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1157              	.L109:
 1158              		.align	2
 1159              	.L108:
 1160 0040 00440040 		.word	1073759232
 1161              		.cfi_endproc
 1162              	.LFE17:
 1164              		.section	.text.fn_convertToCaps,"ax",%progbits
 1165              		.align	1
 1166              		.global	fn_convertToCaps
 1167              		.syntax unified
 1168              		.thumb
 1169              		.thumb_func
 1171              	fn_convertToCaps:
 1172              	.LVL108:
 1173              	.LFB19:
  57:Source/m2a.c  **** 
  58:Source/m2a.c  **** // Below is a standard template for just about any embedded
  59:Source/m2a.c  **** //  system main() loop. 
  60:Source/m2a.c  **** int main(void)  {
  61:Source/m2a.c  ****    
  62:Source/m2a.c  ****   // setup software structures need for application
  63:Source/m2a.c  ****   static struct st_circBuff st_circularBuffer;
  64:Source/m2a.c  ****   static char buffer[BUFFER_SIZE];
  65:Source/m2a.c  ****   fn_circBuffInit(&st_circularBuffer, buffer, BUFFER_SIZE);
  66:Source/m2a.c  **** 
ARM GAS  m2a.s 			page 29


  67:Source/m2a.c  ****   char c_charToSend = '\0';
  68:Source/m2a.c  **** 
  69:Source/m2a.c  ****   // initialize the hardware
  70:Source/m2a.c  ****   fn_clock_setup();
  71:Source/m2a.c  ****   fn_usart_setup(); 
  72:Source/m2a.c  ****   fn_setup_tim2();
  73:Source/m2a.c  **** 
  74:Source/m2a.c  ****   gpio_mode_setup(LED2_GPIO_Port, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, LED2_Pin);
  75:Source/m2a.c  ****   gpio_mode_setup(BUT1_GPIO_Port, GPIO_MODE_INPUT, GPIO_PUPD_NONE, BUT1_Pin);
  76:Source/m2a.c  **** 
  77:Source/m2a.c  ****   LED_OFF;
  78:Source/m2a.c  **** 
  79:Source/m2a.c  ****   while(true){
  80:Source/m2a.c  **** 
  81:Source/m2a.c  ****     //First, check if we need to get data from USART and get it
  82:Source/m2a.c  ****     if(usart_get_flag(USART_CONSOLE, USART_ISR_RXNE))
  83:Source/m2a.c  ****       fn_circBuffPut(&st_circularBuffer, usart_recv_blocking(USART_CONSOLE));
  84:Source/m2a.c  **** 
  85:Source/m2a.c  ****     //Before doing anything else, check we have data
  86:Source/m2a.c  ****     if(!fn_circBuffEmpty(&st_circularBuffer)){
  87:Source/m2a.c  ****       fn_circBuffGet(&st_circularBuffer, &c_charToSend);
  88:Source/m2a.c  ****       fn_convertToCaps(&c_charToSend);
  89:Source/m2a.c  **** 
  90:Source/m2a.c  ****       if(IS_B1_PRESSED) //DECRYPT
  91:Source/m2a.c  ****         c_charToSend = fn_decryptText(c_charToSend);
  92:Source/m2a.c  **** 
  93:Source/m2a.c  ****       else if(IS_B1_RELEASED) //ENCRYPT
  94:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
  95:Source/m2a.c  ****       
  96:Source/m2a.c  ****       else{ //ENCRYPT
  97:Source/m2a.c  ****         printf("Indeterminate button state!... Defaulting to Encrypt!");
  98:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
  99:Source/m2a.c  ****       }
 100:Source/m2a.c  **** 
 101:Source/m2a.c  ****       //Spit it back to the console
 102:Source/m2a.c  ****       if(usart_get_flag(USART_CONSOLE, USART_ISR_TXE))
 103:Source/m2a.c  ****         usart_send_blocking(USART_CONSOLE, c_charToSend);
 104:Source/m2a.c  ****     }
 105:Source/m2a.c  **** 
 106:Source/m2a.c  ****     //Toggle Led
 107:Source/m2a.c  ****     if(timer_get_flag(TIM2,TIM_SR_CC1IF)){
 108:Source/m2a.c  ****       timer_clear_flag(TIM2, TIM_SR_CC1IF);
 109:Source/m2a.c  **** 
 110:Source/m2a.c  ****       if(IS_B1_PRESSED)
 111:Source/m2a.c  ****         timer_set_period(TIM2, 2500); //4M / (200 * 2.5k) = 8 Hz, period - 0.125 s
 112:Source/m2a.c  ****       else
 113:Source/m2a.c  ****         timer_set_period(TIM2, 10000); //4M / (200 * 10k) = 2 Hz, period = 0.5s
 114:Source/m2a.c  ****         
 115:Source/m2a.c  ****       TOGGLE_LED;
 116:Source/m2a.c  ****     }
 117:Source/m2a.c  ****   }
 118:Source/m2a.c  ****   return 0;    // NEVER EXECUTES
 119:Source/m2a.c  **** } 
 120:Source/m2a.c  **** 
 121:Source/m2a.c  **** //Will only convert a character to caps if it is in the alphabet and lowercase, stores in the param
 122:Source/m2a.c  **** void fn_convertToCaps(char* pc_Convert){
 1174              		.loc 3 122 40 is_stmt 1 view -0
ARM GAS  m2a.s 			page 30


 1175              		.cfi_startproc
 1176              		@ args = 0, pretend = 0, frame = 0
 1177              		@ frame_needed = 0, uses_anonymous_args = 0
 1178              		@ link register save eliminated.
 123:Source/m2a.c  ****   if(*pc_Convert >= 'a' && *pc_Convert <= 'z')
 1179              		.loc 3 123 3 view .LVU275
 1180              		.loc 3 123 6 is_stmt 0 view .LVU276
 1181 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1182              		.loc 3 123 25 view .LVU277
 1183 0002 A2F16103 		sub	r3, r2, #97
 1184 0006 DBB2     		uxtb	r3, r3
 1185              		.loc 3 123 5 view .LVU278
 1186 0008 192B     		cmp	r3, #25
 1187 000a 01D8     		bhi	.L110
 124:Source/m2a.c  ****     *pc_Convert = (*pc_Convert - 'a') + 'A';  
 1188              		.loc 3 124 5 is_stmt 1 view .LVU279
 1189              		.loc 3 124 39 is_stmt 0 view .LVU280
 1190 000c 203A     		subs	r2, r2, #32
 1191              		.loc 3 124 17 view .LVU281
 1192 000e 0270     		strb	r2, [r0]
 1193              	.L110:
 125:Source/m2a.c  **** }
 1194              		.loc 3 125 1 view .LVU282
 1195 0010 7047     		bx	lr
 1196              		.cfi_endproc
 1197              	.LFE19:
 1199              		.section	.text.fn_encryptText,"ax",%progbits
 1200              		.align	1
 1201              		.global	fn_encryptText
 1202              		.syntax unified
 1203              		.thumb
 1204              		.thumb_func
 1206              	fn_encryptText:
 1207              	.LVL109:
 1208              	.LFB20:
 126:Source/m2a.c  **** 
 127:Source/m2a.c  **** //Encrypt using the cipher and return the encrypted key
 128:Source/m2a.c  **** char fn_encryptText(char c_toEncrypt){
 1209              		.loc 3 128 38 is_stmt 1 view -0
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 0
 1212              		@ frame_needed = 0, uses_anonymous_args = 0
 1213              		@ link register save eliminated.
 1214              		.loc 3 128 38 is_stmt 0 view .LVU284
 1215 0000 10B4     		push	{r4}
 1216              	.LCFI17:
 1217              		.cfi_def_cfa_offset 4
 1218              		.cfi_offset 4, -4
 129:Source/m2a.c  ****   static uint8_t u8_cipherEPosition = 0;
 1219              		.loc 3 129 3 is_stmt 1 view .LVU285
 130:Source/m2a.c  **** 
 131:Source/m2a.c  ****   c_toEncrypt = (((c_toEncrypt - 'A') + (ac_CIPHER[u8_cipherEPosition] - 'A')) % 26) + 'A';
 1220              		.loc 3 131 3 view .LVU286
 1221              		.loc 3 131 32 is_stmt 0 view .LVU287
 1222 0002 4138     		subs	r0, r0, #65
 1223              	.LVL110:
 1224              		.loc 3 131 51 view .LVU288
ARM GAS  m2a.s 			page 31


 1225 0004 0E4C     		ldr	r4, .L116
 1226 0006 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1227 0008 0E4A     		ldr	r2, .L116+4
 1228 000a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1229              		.loc 3 131 72 view .LVU289
 1230 000c 413A     		subs	r2, r2, #65
 1231              		.loc 3 131 39 view .LVU290
 1232 000e 0244     		add	r2, r2, r0
 1233              		.loc 3 131 80 view .LVU291
 1234 0010 0D49     		ldr	r1, .L116+8
 1235 0012 81FB0201 		smull	r0, r1, r1, r2
 1236 0016 D017     		asrs	r0, r2, #31
 1237 0018 C0EBE100 		rsb	r0, r0, r1, asr #3
 1238 001c 1A21     		movs	r1, #26
 1239 001e 01FB1020 		mls	r0, r1, r0, r2
 1240              		.loc 3 131 86 view .LVU292
 1241 0022 C0B2     		uxtb	r0, r0
 1242              		.loc 3 131 15 view .LVU293
 1243 0024 4130     		adds	r0, r0, #65
 1244 0026 C0B2     		uxtb	r0, r0
 1245              	.LVL111:
 132:Source/m2a.c  ****   ++u8_cipherEPosition;
 1246              		.loc 3 132 3 is_stmt 1 view .LVU294
 1247 0028 0133     		adds	r3, r3, #1
 1248 002a DBB2     		uxtb	r3, r3
 1249 002c 2370     		strb	r3, [r4]
 133:Source/m2a.c  **** 
 134:Source/m2a.c  ****   u8_cipherEPosition = (u8_cipherEPosition == CIPHER_SIZE) ? 0 : u8_cipherEPosition;
 1250              		.loc 3 134 3 view .LVU295
 1251              		.loc 3 134 22 is_stmt 0 view .LVU296
 1252 002e 0D2B     		cmp	r3, #13
 1253 0030 04D0     		beq	.L115
 1254              	.L113:
 1255              		.loc 3 134 22 discriminator 4 view .LVU297
 1256 0032 034A     		ldr	r2, .L116
 1257 0034 1370     		strb	r3, [r2]
 135:Source/m2a.c  **** 
 136:Source/m2a.c  ****   return c_toEncrypt;
 1258              		.loc 3 136 3 is_stmt 1 discriminator 4 view .LVU298
 137:Source/m2a.c  **** }
 1259              		.loc 3 137 1 is_stmt 0 discriminator 4 view .LVU299
 1260 0036 5DF8044B 		ldr	r4, [sp], #4
 1261              	.LCFI18:
 1262              		.cfi_remember_state
 1263              		.cfi_restore 4
 1264              		.cfi_def_cfa_offset 0
 1265 003a 7047     		bx	lr
 1266              	.L115:
 1267              	.LCFI19:
 1268              		.cfi_restore_state
 134:Source/m2a.c  **** 
 1269              		.loc 3 134 22 view .LVU300
 1270 003c 0023     		movs	r3, #0
 1271 003e F8E7     		b	.L113
 1272              	.L117:
 1273              		.align	2
 1274              	.L116:
ARM GAS  m2a.s 			page 32


 1275 0040 00000000 		.word	.LANCHOR11
 1276 0044 00000000 		.word	.LANCHOR12
 1277 0048 4FECC44E 		.word	1321528399
 1278              		.cfi_endproc
 1279              	.LFE20:
 1281              		.section	.text.fn_decryptText,"ax",%progbits
 1282              		.align	1
 1283              		.global	fn_decryptText
 1284              		.syntax unified
 1285              		.thumb
 1286              		.thumb_func
 1288              	fn_decryptText:
 1289              	.LVL112:
 1290              	.LFB21:
 138:Source/m2a.c  **** 
 139:Source/m2a.c  **** //Decrypt using the cipher and return the decrypted key
 140:Source/m2a.c  **** char fn_decryptText(char c_toDecrypt){
 1291              		.loc 3 140 38 is_stmt 1 view -0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 0
 1294              		@ frame_needed = 0, uses_anonymous_args = 0
 1295              		@ link register save eliminated.
 1296              		.loc 3 140 38 is_stmt 0 view .LVU302
 1297 0000 10B4     		push	{r4}
 1298              	.LCFI20:
 1299              		.cfi_def_cfa_offset 4
 1300              		.cfi_offset 4, -4
 141:Source/m2a.c  ****   static uint8_t u8_cipherDPosition = 0;
 1301              		.loc 3 141 3 is_stmt 1 view .LVU303
 142:Source/m2a.c  **** 
 143:Source/m2a.c  ****   c_toDecrypt = ((c_toDecrypt - ac_CIPHER[u8_cipherDPosition] + 26) % 26) + 'A';
 1302              		.loc 3 143 3 view .LVU304
 1303              		.loc 3 143 42 is_stmt 0 view .LVU305
 1304 0002 0F4C     		ldr	r4, .L122
 1305 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1306 0006 0F4A     		ldr	r2, .L122+4
 1307 0008 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1308              		.loc 3 143 31 view .LVU306
 1309 000a 821A     		subs	r2, r0, r2
 1310              		.loc 3 143 63 view .LVU307
 1311 000c 1A32     		adds	r2, r2, #26
 1312              		.loc 3 143 69 view .LVU308
 1313 000e 0E49     		ldr	r1, .L122+8
 1314 0010 81FB0201 		smull	r0, r1, r1, r2
 1315              	.LVL113:
 1316              		.loc 3 143 69 view .LVU309
 1317 0014 D017     		asrs	r0, r2, #31
 1318 0016 C0EBE100 		rsb	r0, r0, r1, asr #3
 1319 001a 1A21     		movs	r1, #26
 1320 001c 01FB1020 		mls	r0, r1, r0, r2
 1321              		.loc 3 143 75 view .LVU310
 1322 0020 C0B2     		uxtb	r0, r0
 1323              		.loc 3 143 15 view .LVU311
 1324 0022 4130     		adds	r0, r0, #65
 1325 0024 C0B2     		uxtb	r0, r0
 1326              	.LVL114:
 144:Source/m2a.c  **** 
ARM GAS  m2a.s 			page 33


 145:Source/m2a.c  ****   ++u8_cipherDPosition;
 1327              		.loc 3 145 3 is_stmt 1 view .LVU312
 1328 0026 0133     		adds	r3, r3, #1
 1329 0028 DBB2     		uxtb	r3, r3
 1330 002a 2370     		strb	r3, [r4]
 146:Source/m2a.c  **** 
 147:Source/m2a.c  ****   u8_cipherDPosition = (u8_cipherDPosition == CIPHER_SIZE) ? 0 : u8_cipherDPosition;
 1331              		.loc 3 147 3 view .LVU313
 1332              		.loc 3 147 22 is_stmt 0 view .LVU314
 1333 002c 0D2B     		cmp	r3, #13
 1334 002e 04D0     		beq	.L121
 1335              	.L119:
 1336              		.loc 3 147 22 discriminator 4 view .LVU315
 1337 0030 034A     		ldr	r2, .L122
 1338 0032 1370     		strb	r3, [r2]
 148:Source/m2a.c  ****   
 149:Source/m2a.c  ****   return c_toDecrypt;
 1339              		.loc 3 149 3 is_stmt 1 discriminator 4 view .LVU316
 150:Source/m2a.c  **** }...
 1340              		.loc 3 150 1 is_stmt 0 discriminator 4 view .LVU317
 1341 0034 5DF8044B 		ldr	r4, [sp], #4
 1342              	.LCFI21:
 1343              		.cfi_remember_state
 1344              		.cfi_restore 4
 1345              		.cfi_def_cfa_offset 0
 1346 0038 7047     		bx	lr
 1347              	.L121:
 1348              	.LCFI22:
 1349              		.cfi_restore_state
 147:Source/m2a.c  ****   u8_cipherDPosition = (u8_cipherDPosition == CIPHER_SIZE) ? 0 : u8_cipherDPosition;
 1350              		.loc 3 147 22 view .LVU318
 1351 003a 0023     		movs	r3, #0
 1352 003c F8E7     		b	.L119
 1353              	.L123:
 1354 003e 00BF     		.align	2
 1355              	.L122:
 1356 0040 00000000 		.word	.LANCHOR13
 1357 0044 00000000 		.word	.LANCHOR12
 1358 0048 4FECC44E 		.word	1321528399
 1359              		.cfi_endproc
 1360              	.LFE21:
 1362              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1363              		.align	2
 1364              	.LC8:
 1365 0000 496E6465 		.ascii	"Indeterminate button state!... Defaulting to Encryp"
 1365      7465726D 
 1365      696E6174 
 1365      65206275 
 1365      74746F6E 
 1366 0033 742100   		.ascii	"t!\000"
 1367              		.section	.text.main,"ax",%progbits
 1368              		.align	1
 1369              		.global	main
 1370              		.syntax unified
 1371              		.thumb
 1372              		.thumb_func
 1374              	main:
ARM GAS  m2a.s 			page 34


 1375              	.LFB18:
  60:Source/m2a.c  **** int main(void)  {
 1376              		.loc 3 60 16 is_stmt 1 view -0
 1377              		.cfi_startproc
 1378              		@ Volatile: function does not return.
 1379              		@ args = 0, pretend = 0, frame = 8
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 1381 0000 00B5     		push	{lr}
 1382              	.LCFI23:
 1383              		.cfi_def_cfa_offset 4
 1384              		.cfi_offset 14, -4
 1385 0002 83B0     		sub	sp, sp, #12
 1386              	.LCFI24:
 1387              		.cfi_def_cfa_offset 16
  63:Source/m2a.c  ****   static struct st_circBuff st_circularBuffer;
 1388              		.loc 3 63 3 view .LVU320
  64:Source/m2a.c  ****   static char buffer[BUFFER_SIZE];
 1389              		.loc 3 64 3 view .LVU321
  65:Source/m2a.c  ****   fn_circBuffInit(&st_circularBuffer, buffer, BUFFER_SIZE);
 1390              		.loc 3 65 3 view .LVU322
 1391 0004 4FF48072 		mov	r2, #256
 1392 0008 4949     		ldr	r1, .L138
 1393 000a 4A48     		ldr	r0, .L138+4
 1394 000c FFF7FEFF 		bl	fn_circBuffInit
 1395              	.LVL115:
  67:Source/m2a.c  ****   char c_charToSend = '\0';
 1396              		.loc 3 67 3 view .LVU323
  67:Source/m2a.c  ****   char c_charToSend = '\0';
 1397              		.loc 3 67 8 is_stmt 0 view .LVU324
 1398 0010 0024     		movs	r4, #0
 1399 0012 8DF80740 		strb	r4, [sp, #7]
  70:Source/m2a.c  ****   fn_clock_setup();
 1400              		.loc 3 70 3 is_stmt 1 view .LVU325
 1401 0016 FFF7FEFF 		bl	fn_clock_setup
 1402              	.LVL116:
  71:Source/m2a.c  ****   fn_usart_setup(); 
 1403              		.loc 3 71 3 view .LVU326
 1404 001a FFF7FEFF 		bl	fn_usart_setup
 1405              	.LVL117:
  72:Source/m2a.c  ****   fn_setup_tim2();
 1406              		.loc 3 72 3 view .LVU327
 1407 001e FFF7FEFF 		bl	fn_setup_tim2
 1408              	.LVL118:
  74:Source/m2a.c  ****   gpio_mode_setup(LED2_GPIO_Port, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, LED2_Pin);
 1409              		.loc 3 74 3 view .LVU328
 1410 0022 2023     		movs	r3, #32
 1411 0024 0122     		movs	r2, #1
 1412 0026 1146     		mov	r1, r2
 1413 0028 4FF09040 		mov	r0, #1207959552
 1414 002c FFF7FEFF 		bl	gpio_mode_setup
 1415              	.LVL119:
  75:Source/m2a.c  ****   gpio_mode_setup(BUT1_GPIO_Port, GPIO_MODE_INPUT, GPIO_PUPD_NONE, BUT1_Pin);
 1416              		.loc 3 75 3 view .LVU329
 1417 0030 4FF40053 		mov	r3, #8192
 1418 0034 2246     		mov	r2, r4
 1419 0036 2146     		mov	r1, r4
 1420 0038 3F48     		ldr	r0, .L138+8
ARM GAS  m2a.s 			page 35


 1421 003a FFF7FEFF 		bl	gpio_mode_setup
 1422              	.LVL120:
  77:Source/m2a.c  ****   LED_OFF;
 1423              		.loc 3 77 3 view .LVU330
 1424 003e 2021     		movs	r1, #32
 1425 0040 4FF09040 		mov	r0, #1207959552
 1426 0044 FFF7FEFF 		bl	gpio_clear
 1427              	.LVL121:
 1428 0048 1EE0     		b	.L130
 1429              	.L137:
  83:Source/m2a.c  ****       fn_circBuffPut(&st_circularBuffer, usart_recv_blocking(USART_CONSOLE));
 1430              		.loc 3 83 7 view .LVU331
  83:Source/m2a.c  ****       fn_circBuffPut(&st_circularBuffer, usart_recv_blocking(USART_CONSOLE));
 1431              		.loc 3 83 42 is_stmt 0 view .LVU332
 1432 004a 3C48     		ldr	r0, .L138+12
 1433 004c FFF7FEFF 		bl	usart_recv_blocking
 1434              	.LVL122:
  83:Source/m2a.c  ****       fn_circBuffPut(&st_circularBuffer, usart_recv_blocking(USART_CONSOLE));
 1435              		.loc 3 83 7 view .LVU333
 1436 0050 C1B2     		uxtb	r1, r0
 1437 0052 3848     		ldr	r0, .L138+4
 1438 0054 FFF7FEFF 		bl	fn_circBuffPut
 1439              	.LVL123:
 1440 0058 1CE0     		b	.L125
 1441              	.L127:
  93:Source/m2a.c  ****       else if(IS_B1_RELEASED) //ENCRYPT
 1442              		.loc 3 93 12 is_stmt 1 view .LVU334
  93:Source/m2a.c  ****       else if(IS_B1_RELEASED) //ENCRYPT
 1443              		.loc 3 93 16 is_stmt 0 view .LVU335
 1444 005a 4FF40051 		mov	r1, #8192
 1445 005e 3648     		ldr	r0, .L138+8
 1446 0060 FFF7FEFF 		bl	gpio_get
 1447              	.LVL124:
  93:Source/m2a.c  ****       else if(IS_B1_RELEASED) //ENCRYPT
 1448              		.loc 3 93 14 view .LVU336
 1449 0064 98B3     		cbz	r0, .L129
  94:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1450              		.loc 3 94 9 is_stmt 1 view .LVU337
  94:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1451              		.loc 3 94 24 is_stmt 0 view .LVU338
 1452 0066 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1453 006a FFF7FEFF 		bl	fn_encryptText
 1454              	.LVL125:
  94:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1455              		.loc 3 94 22 view .LVU339
 1456 006e 8DF80700 		strb	r0, [sp, #7]
 1457              	.L128:
 102:Source/m2a.c  ****       if(usart_get_flag(USART_CONSOLE, USART_ISR_TXE))
 1458              		.loc 3 102 7 is_stmt 1 view .LVU340
 102:Source/m2a.c  ****       if(usart_get_flag(USART_CONSOLE, USART_ISR_TXE))
 1459              		.loc 3 102 10 is_stmt 0 view .LVU341
 1460 0072 8021     		movs	r1, #128
 1461 0074 3148     		ldr	r0, .L138+12
 1462 0076 FFF7FEFF 		bl	usart_get_flag
 1463              	.LVL126:
 102:Source/m2a.c  ****       if(usart_get_flag(USART_CONSOLE, USART_ISR_TXE))
 1464              		.loc 3 102 9 view .LVU342
ARM GAS  m2a.s 			page 36


 1465 007a 90BB     		cbnz	r0, .L135
 1466              	.L126:
 107:Source/m2a.c  ****     if(timer_get_flag(TIM2,TIM_SR_CC1IF)){
 1467              		.loc 3 107 5 is_stmt 1 view .LVU343
 107:Source/m2a.c  ****     if(timer_get_flag(TIM2,TIM_SR_CC1IF)){
 1468              		.loc 3 107 8 is_stmt 0 view .LVU344
 1469 007c 0221     		movs	r1, #2
 1470 007e 4FF08040 		mov	r0, #1073741824
 1471 0082 FFF7FEFF 		bl	timer_get_flag
 1472              	.LVL127:
 107:Source/m2a.c  ****     if(timer_get_flag(TIM2,TIM_SR_CC1IF)){
 1473              		.loc 3 107 7 view .LVU345
 1474 0086 90BB     		cbnz	r0, .L136
 1475              	.L130:
  79:Source/m2a.c  ****   while(true){
 1476              		.loc 3 79 3 is_stmt 1 view .LVU346
  82:Source/m2a.c  ****     if(usart_get_flag(USART_CONSOLE, USART_ISR_RXNE))
 1477              		.loc 3 82 5 view .LVU347
  82:Source/m2a.c  ****     if(usart_get_flag(USART_CONSOLE, USART_ISR_RXNE))
 1478              		.loc 3 82 8 is_stmt 0 view .LVU348
 1479 0088 2021     		movs	r1, #32
 1480 008a 2C48     		ldr	r0, .L138+12
 1481 008c FFF7FEFF 		bl	usart_get_flag
 1482              	.LVL128:
  82:Source/m2a.c  ****     if(usart_get_flag(USART_CONSOLE, USART_ISR_RXNE))
 1483              		.loc 3 82 7 view .LVU349
 1484 0090 0028     		cmp	r0, #0
 1485 0092 DAD1     		bne	.L137
 1486              	.L125:
  86:Source/m2a.c  ****     if(!fn_circBuffEmpty(&st_circularBuffer)){
 1487              		.loc 3 86 5 is_stmt 1 view .LVU350
  86:Source/m2a.c  ****     if(!fn_circBuffEmpty(&st_circularBuffer)){
 1488              		.loc 3 86 9 is_stmt 0 view .LVU351
 1489 0094 2748     		ldr	r0, .L138+4
 1490 0096 FFF7FEFF 		bl	fn_circBuffEmpty
 1491              	.LVL129:
  86:Source/m2a.c  ****     if(!fn_circBuffEmpty(&st_circularBuffer)){
 1492              		.loc 3 86 7 view .LVU352
 1493 009a 0028     		cmp	r0, #0
 1494 009c EED1     		bne	.L126
  87:Source/m2a.c  ****       fn_circBuffGet(&st_circularBuffer, &c_charToSend);
 1495              		.loc 3 87 7 is_stmt 1 view .LVU353
 1496 009e 0DF10701 		add	r1, sp, #7
 1497 00a2 2448     		ldr	r0, .L138+4
 1498 00a4 FFF7FEFF 		bl	fn_circBuffGet
 1499              	.LVL130:
  88:Source/m2a.c  ****       fn_convertToCaps(&c_charToSend);
 1500              		.loc 3 88 7 view .LVU354
 1501 00a8 0DF10700 		add	r0, sp, #7
 1502 00ac FFF7FEFF 		bl	fn_convertToCaps
 1503              	.LVL131:
  90:Source/m2a.c  ****       if(IS_B1_PRESSED) //DECRYPT
 1504              		.loc 3 90 7 view .LVU355
  90:Source/m2a.c  ****       if(IS_B1_PRESSED) //DECRYPT
 1505              		.loc 3 90 13 is_stmt 0 view .LVU356
 1506 00b0 4FF40051 		mov	r1, #8192
 1507 00b4 2048     		ldr	r0, .L138+8
ARM GAS  m2a.s 			page 37


 1508 00b6 FFF7FEFF 		bl	gpio_get
 1509              	.LVL132:
  90:Source/m2a.c  ****       if(IS_B1_PRESSED) //DECRYPT
 1510              		.loc 3 90 9 view .LVU357
 1511 00ba B0F5005F 		cmp	r0, #8192
 1512 00be CCD0     		beq	.L127
  91:Source/m2a.c  ****         c_charToSend = fn_decryptText(c_charToSend);
 1513              		.loc 3 91 9 is_stmt 1 view .LVU358
  91:Source/m2a.c  ****         c_charToSend = fn_decryptText(c_charToSend);
 1514              		.loc 3 91 24 is_stmt 0 view .LVU359
 1515 00c0 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1516 00c4 FFF7FEFF 		bl	fn_decryptText
 1517              	.LVL133:
  91:Source/m2a.c  ****         c_charToSend = fn_decryptText(c_charToSend);
 1518              		.loc 3 91 22 view .LVU360
 1519 00c8 8DF80700 		strb	r0, [sp, #7]
 1520 00cc D1E7     		b	.L128
 1521              	.L129:
  97:Source/m2a.c  ****         printf("Indeterminate button state!... Defaulting to Encrypt!");
 1522              		.loc 3 97 9 is_stmt 1 view .LVU361
 1523 00ce 1C48     		ldr	r0, .L138+16
 1524 00d0 FFF7FEFF 		bl	printf
 1525              	.LVL134:
  98:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1526              		.loc 3 98 9 view .LVU362
  98:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1527              		.loc 3 98 24 is_stmt 0 view .LVU363
 1528 00d4 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1529 00d8 FFF7FEFF 		bl	fn_encryptText
 1530              	.LVL135:
  98:Source/m2a.c  ****         c_charToSend = fn_encryptText(c_charToSend);
 1531              		.loc 3 98 22 view .LVU364
 1532 00dc 8DF80700 		strb	r0, [sp, #7]
 1533 00e0 C7E7     		b	.L128
 1534              	.L135:
 103:Source/m2a.c  ****         usart_send_blocking(USART_CONSOLE, c_charToSend);
 1535              		.loc 3 103 9 is_stmt 1 view .LVU365
 1536 00e2 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 1537 00e6 1548     		ldr	r0, .L138+12
 1538 00e8 FFF7FEFF 		bl	usart_send_blocking
 1539              	.LVL136:
 1540 00ec C6E7     		b	.L126
 1541              	.L136:
 108:Source/m2a.c  ****       timer_clear_flag(TIM2, TIM_SR_CC1IF);
 1542              		.loc 3 108 7 view .LVU366
 1543 00ee 0221     		movs	r1, #2
 1544 00f0 4FF08040 		mov	r0, #1073741824
 1545 00f4 FFF7FEFF 		bl	timer_clear_flag
 1546              	.LVL137:
 110:Source/m2a.c  ****       if(IS_B1_PRESSED)
 1547              		.loc 3 110 7 view .LVU367
 110:Source/m2a.c  ****       if(IS_B1_PRESSED)
 1548              		.loc 3 110 13 is_stmt 0 view .LVU368
 1549 00f8 4FF40051 		mov	r1, #8192
 1550 00fc 0E48     		ldr	r0, .L138+8
 1551 00fe FFF7FEFF 		bl	gpio_get
 1552              	.LVL138:
ARM GAS  m2a.s 			page 38


 110:Source/m2a.c  ****       if(IS_B1_PRESSED)
 1553              		.loc 3 110 9 view .LVU369
 1554 0102 B0F5005F 		cmp	r0, #8192
 1555 0106 0BD0     		beq	.L131
 111:Source/m2a.c  ****         timer_set_period(TIM2, 2500); //4M / (200 * 2.5k) = 8 Hz, period - 0.125 s
 1556              		.loc 3 111 9 is_stmt 1 view .LVU370
 1557 0108 40F6C411 		movw	r1, #2500
 1558 010c 4FF08040 		mov	r0, #1073741824
 1559 0110 FFF7FEFF 		bl	timer_set_period
 1560              	.LVL139:
 1561              	.L132:
 115:Source/m2a.c  ****       TOGGLE_LED;
 1562              		.loc 3 115 7 view .LVU371
 1563 0114 2021     		movs	r1, #32
 1564 0116 4FF09040 		mov	r0, #1207959552
 1565 011a FFF7FEFF 		bl	gpio_toggle
 1566              	.LVL140:
 1567 011e B3E7     		b	.L130
 1568              	.L131:
 113:Source/m2a.c  ****         timer_set_period(TIM2, 10000); //4M / (200 * 10k) = 2 Hz, period = 0.5s
 1569              		.loc 3 113 9 view .LVU372
 1570 0120 42F21071 		movw	r1, #10000
 1571 0124 4FF08040 		mov	r0, #1073741824
 1572 0128 FFF7FEFF 		bl	timer_set_period
 1573              	.LVL141:
 1574 012c F2E7     		b	.L132
 1575              	.L139:
 1576 012e 00BF     		.align	2
 1577              	.L138:
 1578 0130 00000000 		.word	.LANCHOR14
 1579 0134 00000000 		.word	.LANCHOR15
 1580 0138 00080048 		.word	1207961600
 1581 013c 00440040 		.word	1073759232
 1582 0140 00000000 		.word	.LC8
 1583              		.cfi_endproc
 1584              	.LFE18:
 1586              		.global	ac_CIPHER
 1587              		.section	.bss.buffer.2,"aw",%nobits
 1588              		.align	2
 1589              		.set	.LANCHOR14,. + 0
 1592              	buffer.2:
 1593 0000 00000000 		.space	256
 1593      00000000 
 1593      00000000 
 1593      00000000 
 1593      00000000 
 1594              		.section	.bss.st_circularBuffer.3,"aw",%nobits
 1595              		.align	2
 1596              		.set	.LANCHOR15,. + 0
 1599              	st_circularBuffer.3:
 1600 0000 00000000 		.space	20
 1600      00000000 
 1600      00000000 
 1600      00000000 
 1600      00000000 
 1601              		.section	.bss.u8_cipherDPosition.0,"aw",%nobits
 1602              		.set	.LANCHOR13,. + 0
ARM GAS  m2a.s 			page 39


 1605              	u8_cipherDPosition.0:
 1606 0000 00       		.space	1
 1607              		.section	.bss.u8_cipherEPosition.1,"aw",%nobits
 1608              		.set	.LANCHOR11,. + 0
 1611              	u8_cipherEPosition.1:
 1612 0000 00       		.space	1
 1613              		.section	.rodata.__func__.10,"a"
 1614              		.align	2
 1615              		.set	.LANCHOR6,. + 0
 1618              	__func__.10:
 1619 0000 666E5F63 		.ascii	"fn_circBuffCapacity\000"
 1619      69726342 
 1619      75666643 
 1619      61706163 
 1619      69747900 
 1620              		.section	.rodata.__func__.11,"a"
 1621              		.align	2
 1622              		.set	.LANCHOR5,. + 0
 1625              	__func__.11:
 1626 0000 666E5F63 		.ascii	"fn_circBuffFull\000"
 1626      69726342 
 1626      75666646 
 1626      756C6C00 
 1627              		.section	.rodata.__func__.12,"a"
 1628              		.align	2
 1629              		.set	.LANCHOR4,. + 0
 1632              	__func__.12:
 1633 0000 666E5F63 		.ascii	"fn_circBuffInit\000"
 1633      69726342 
 1633      75666649 
 1633      6E697400 
 1634              		.section	.rodata.__func__.13,"a"
 1635              		.align	2
 1636              		.set	.LANCHOR3,. + 0
 1639              	__func__.13:
 1640 0000 666E5F63 		.ascii	"fn_circBuffEmpty\000"
 1640      69726342 
 1640      75666645 
 1640      6D707479 
 1640      00
 1641              		.section	.rodata.__func__.14,"a"
 1642              		.align	2
 1643              		.set	.LANCHOR2,. + 0
 1646              	__func__.14:
 1647 0000 666E5F63 		.ascii	"fn_circBuffReset\000"
 1647      69726342 
 1647      75666652 
 1647      65736574 
 1647      00
 1648              		.section	.rodata.__func__.4,"a"
 1649              		.align	2
 1650              		.set	.LANCHOR10,. + 0
 1653              	__func__.4:
 1654 0000 666E5F63 		.ascii	"fn_circBuffGetMostRecent\000"
 1654      69726342 
 1654      75666647 
 1654      65744D6F 
ARM GAS  m2a.s 			page 40


 1654      73745265 
 1655              		.section	.rodata.__func__.5,"a"
 1656              		.align	2
 1657              		.set	.LANCHOR1,. + 0
 1660              	__func__.5:
 1661 0000 666E5F72 		.ascii	"fn_retreatPointer\000"
 1661      65747265 
 1661      6174506F 
 1661      696E7465 
 1661      7200
 1662              		.section	.rodata.__func__.6,"a"
 1663              		.align	2
 1664              		.set	.LANCHOR9,. + 0
 1667              	__func__.6:
 1668 0000 666E5F63 		.ascii	"fn_circBuffGet\000"
 1668      69726342 
 1668      75666647 
 1668      657400
 1669              		.section	.rodata.__func__.7,"a"
 1670              		.align	2
 1671              		.set	.LANCHOR0,. + 0
 1674              	__func__.7:
 1675 0000 666E5F61 		.ascii	"fn_advancePointer\000"
 1675      6476616E 
 1675      6365506F 
 1675      696E7465 
 1675      7200
 1676              		.section	.rodata.__func__.8,"a"
 1677              		.align	2
 1678              		.set	.LANCHOR8,. + 0
 1681              	__func__.8:
 1682 0000 666E5F63 		.ascii	"fn_circBuffPut\000"
 1682      69726342 
 1682      75666650 
 1682      757400
 1683              		.section	.rodata.__func__.9,"a"
 1684              		.align	2
 1685              		.set	.LANCHOR7,. + 0
 1688              	__func__.9:
 1689 0000 666E5F63 		.ascii	"fn_circBuffSize\000"
 1689      69726342 
 1689      75666653 
 1689      697A6500 
 1690              		.section	.rodata.ac_CIPHER,"a"
 1691              		.align	2
 1692              		.set	.LANCHOR12,. + 0
 1695              	ac_CIPHER:
 1696 0000 54454E4E 		.ascii	"TENNESSEETECH"
 1696      45535345 
 1696      45544543 
 1696      48
 1697              		.text
 1698              	.Letext0:
 1699              		.file 4 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eabi
 1700              		.file 5 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eabi
 1701              		.file 6 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/li
 1702              		.file 7 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eabi
ARM GAS  m2a.s 			page 41


 1703              		.file 8 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/li
 1704              		.file 9 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/li
 1705              		.file 10 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/l
 1706              		.file 11 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/l
 1707              		.file 12 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eab
 1708              		.file 13 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eab
 1709              		.file 14 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eab
 1710              		.file 15 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/libopencm3/include/l
ARM GAS  m2a.s 			page 42


DEFINED SYMBOLS
                            *ABS*:0000000000000000 m2a.c
               m2a.s:20     .rodata.fn_advancePointer.str1.4:0000000000000000 $d
               m2a.s:27     .text.fn_advancePointer:0000000000000000 $t
               m2a.s:32     .text.fn_advancePointer:0000000000000000 fn_advancePointer
               m2a.s:120    .text.fn_advancePointer:000000000000004c $d
               m2a.s:127    .text.fn_retreatPointer:0000000000000000 $t
               m2a.s:132    .text.fn_retreatPointer:0000000000000000 fn_retreatPointer
               m2a.s:187    .text.fn_retreatPointer:0000000000000028 $d
               m2a.s:194    .text.fn_clock_setup:0000000000000000 $t
               m2a.s:200    .text.fn_clock_setup:0000000000000000 fn_clock_setup
               m2a.s:260    .text.fn_usart_setup:0000000000000000 $t
               m2a.s:266    .text.fn_usart_setup:0000000000000000 fn_usart_setup
               m2a.s:330    .text.fn_usart_setup:000000000000005c $d
               m2a.s:335    .text.fn_setup_tim2:0000000000000000 $t
               m2a.s:341    .text.fn_setup_tim2:0000000000000000 fn_setup_tim2
               m2a.s:381    .text.fn_circBuffReset:0000000000000000 $t
               m2a.s:387    .text.fn_circBuffReset:0000000000000000 fn_circBuffReset
               m2a.s:428    .text.fn_circBuffReset:000000000000001c $d
               m2a.s:435    .text.fn_circBuffEmpty:0000000000000000 $t
               m2a.s:441    .text.fn_circBuffEmpty:0000000000000000 fn_circBuffEmpty
               m2a.s:502    .text.fn_circBuffEmpty:0000000000000028 $d
               m2a.s:509    .rodata.fn_circBuffInit.str1.4:0000000000000000 $d
               m2a.s:516    .text.fn_circBuffInit:0000000000000000 $t
               m2a.s:522    .text.fn_circBuffInit:0000000000000000 fn_circBuffInit
               m2a.s:587    .text.fn_circBuffInit:0000000000000034 $d
               m2a.s:595    .text.fn_circBuffFull:0000000000000000 $t
               m2a.s:601    .text.fn_circBuffFull:0000000000000000 fn_circBuffFull
               m2a.s:637    .text.fn_circBuffFull:0000000000000014 $d
               m2a.s:644    .text.fn_circBuffCapacity:0000000000000000 $t
               m2a.s:650    .text.fn_circBuffCapacity:0000000000000000 fn_circBuffCapacity
               m2a.s:686    .text.fn_circBuffCapacity:0000000000000014 $d
               m2a.s:693    .text.fn_circBuffSize:0000000000000000 $t
               m2a.s:699    .text.fn_circBuffSize:0000000000000000 fn_circBuffSize
               m2a.s:766    .text.fn_circBuffSize:000000000000002c $d
               m2a.s:773    .rodata.fn_circBuffPut.str1.4:0000000000000000 $d
               m2a.s:777    .text.fn_circBuffPut:0000000000000000 $t
               m2a.s:783    .text.fn_circBuffPut:0000000000000000 fn_circBuffPut
               m2a.s:832    .text.fn_circBuffPut:0000000000000024 $d
               m2a.s:839    .rodata.fn_circBuffGet.str1.4:0000000000000000 $d
               m2a.s:846    .text.fn_circBuffGet:0000000000000000 $t
               m2a.s:852    .text.fn_circBuffGet:0000000000000000 fn_circBuffGet
               m2a.s:951    .text.fn_circBuffGet:000000000000004c $d
               m2a.s:960    .rodata.fn_circBuffGetMostRecent.str1.4:0000000000000000 $d
               m2a.s:964    .text.fn_circBuffGetMostRecent:0000000000000000 $t
               m2a.s:970    .text.fn_circBuffGetMostRecent:0000000000000000 fn_circBuffGetMostRecent
               m2a.s:1068   .text.fn_circBuffGetMostRecent:0000000000000044 $d
               m2a.s:1075   .text._write:0000000000000000 $t
               m2a.s:1081   .text._write:0000000000000000 _write
               m2a.s:1160   .text._write:0000000000000040 $d
               m2a.s:1165   .text.fn_convertToCaps:0000000000000000 $t
               m2a.s:1171   .text.fn_convertToCaps:0000000000000000 fn_convertToCaps
               m2a.s:1200   .text.fn_encryptText:0000000000000000 $t
               m2a.s:1206   .text.fn_encryptText:0000000000000000 fn_encryptText
               m2a.s:1275   .text.fn_encryptText:0000000000000040 $d
               m2a.s:1282   .text.fn_decryptText:0000000000000000 $t
               m2a.s:1288   .text.fn_decryptText:0000000000000000 fn_decryptText
ARM GAS  m2a.s 			page 43


               m2a.s:1356   .text.fn_decryptText:0000000000000040 $d
               m2a.s:1363   .rodata.main.str1.4:0000000000000000 $d
               m2a.s:1368   .text.main:0000000000000000 $t
               m2a.s:1374   .text.main:0000000000000000 main
               m2a.s:1578   .text.main:0000000000000130 $d
               m2a.s:1695   .rodata.ac_CIPHER:0000000000000000 ac_CIPHER
               m2a.s:1588   .bss.buffer.2:0000000000000000 $d
               m2a.s:1592   .bss.buffer.2:0000000000000000 buffer.2
               m2a.s:1595   .bss.st_circularBuffer.3:0000000000000000 $d
               m2a.s:1599   .bss.st_circularBuffer.3:0000000000000000 st_circularBuffer.3
               m2a.s:1605   .bss.u8_cipherDPosition.0:0000000000000000 u8_cipherDPosition.0
               m2a.s:1606   .bss.u8_cipherDPosition.0:0000000000000000 $d
               m2a.s:1611   .bss.u8_cipherEPosition.1:0000000000000000 u8_cipherEPosition.1
               m2a.s:1612   .bss.u8_cipherEPosition.1:0000000000000000 $d
               m2a.s:1614   .rodata.__func__.10:0000000000000000 $d
               m2a.s:1618   .rodata.__func__.10:0000000000000000 __func__.10
               m2a.s:1621   .rodata.__func__.11:0000000000000000 $d
               m2a.s:1625   .rodata.__func__.11:0000000000000000 __func__.11
               m2a.s:1628   .rodata.__func__.12:0000000000000000 $d
               m2a.s:1632   .rodata.__func__.12:0000000000000000 __func__.12
               m2a.s:1635   .rodata.__func__.13:0000000000000000 $d
               m2a.s:1639   .rodata.__func__.13:0000000000000000 __func__.13
               m2a.s:1642   .rodata.__func__.14:0000000000000000 $d
               m2a.s:1646   .rodata.__func__.14:0000000000000000 __func__.14
               m2a.s:1649   .rodata.__func__.4:0000000000000000 $d
               m2a.s:1653   .rodata.__func__.4:0000000000000000 __func__.4
               m2a.s:1656   .rodata.__func__.5:0000000000000000 $d
               m2a.s:1660   .rodata.__func__.5:0000000000000000 __func__.5
               m2a.s:1663   .rodata.__func__.6:0000000000000000 $d
               m2a.s:1667   .rodata.__func__.6:0000000000000000 __func__.6
               m2a.s:1670   .rodata.__func__.7:0000000000000000 $d
               m2a.s:1674   .rodata.__func__.7:0000000000000000 __func__.7
               m2a.s:1677   .rodata.__func__.8:0000000000000000 $d
               m2a.s:1681   .rodata.__func__.8:0000000000000000 __func__.8
               m2a.s:1684   .rodata.__func__.9:0000000000000000 $d
               m2a.s:1688   .rodata.__func__.9:0000000000000000 __func__.9
               m2a.s:1691   .rodata.ac_CIPHER:0000000000000000 $d

UNDEFINED SYMBOLS
__assert_func
rcc_osc_on
rcc_set_main_pll
rcc_periph_clock_enable
gpio_mode_setup
gpio_set_af
usart_set_baudrate
usart_set_databits
usart_set_stopbits
usart_set_mode
usart_set_parity
usart_set_flow_control
usart_enable
rcc_periph_reset_pulse
timer_set_prescaler
timer_set_period
timer_enable_counter
timer_enable_irq
ARM GAS  m2a.s 			page 44


usart_send_blocking
__errno
gpio_clear
usart_recv_blocking
gpio_get
usart_get_flag
timer_get_flag
printf
timer_clear_flag
gpio_toggle
